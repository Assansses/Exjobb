
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002100  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800228c  0800228c  0000328c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022cc  080022cc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022cc  080022cc  000032cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022d0  080022d0  000032d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080022e0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080022e0  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bae  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b8  00000000  00000000  0000abea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b5  00000000  00000000  0000c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f216  00000000  00000000  0000cdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000822e  00000000  00000000  0002c013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc8ff  00000000  00000000  00034241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dd0  00000000  00000000  000f0b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f2954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002274 	.word	0x08002274

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002274 	.word	0x08002274

080001cc <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2102      	movs	r1, #2
 80001d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001d8:	f000 fe26 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80001dc:	2014      	movs	r0, #20
 80001de:	f000 fb87 	bl	80008f0 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 0);
    //HAL_Delay(2);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 80001e2:	2200      	movs	r2, #0
 80001e4:	2102      	movs	r1, #2
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ea:	f000 fe1d 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80001ee:	2002      	movs	r0, #2
 80001f0:	f000 fb7e 	bl	80008f0 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2102      	movs	r1, #2
 80001f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001fc:	f000 fe14 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000200:	2014      	movs	r0, #20
 8000202:	f000 fb75 	bl	80008f0 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 0);
    //HAL_Delay(2);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2102      	movs	r1, #2
 800020a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800020e:	f000 fe0b 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000212:	2002      	movs	r0, #2
 8000214:	f000 fb6c 	bl	80008f0 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	2102      	movs	r1, #2
 800021c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000220:	f000 fe02 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000224:	2014      	movs	r0, #20
 8000226:	f000 fb63 	bl	80008f0 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 0);
    //HAL_Delay(2);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 800022a:	2200      	movs	r2, #0
 800022c:	2102      	movs	r1, #2
 800022e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000232:	f000 fdf9 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000236:	2002      	movs	r0, #2
 8000238:	f000 fb5a 	bl	80008f0 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	2102      	movs	r1, #2
 8000240:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000244:	f000 fdf0 	bl	8000e28 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000248:	2014      	movs	r0, #20
 800024a:	f000 fb51 	bl	80008f0 <HAL_Delay>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(uint8_t Reg)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	DEV_Digital_Write(EPD_DC_PIN, 0);
    DEV_Digital_Write(EPD_CS_PIN, 0);
    DEV_SPI_WriteByte(Reg);
    DEV_Digital_Write(EPD_CS_PIN, 1);
    */
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2104      	movs	r1, #4
 8000262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000266:	f000 fddf 	bl	8000e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	2110      	movs	r1, #16
 800026e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000272:	f000 fdd9 	bl	8000e28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Reg, 1, 100);
 8000276:	1df9      	adds	r1, r7, #7
 8000278:	2364      	movs	r3, #100	@ 0x64
 800027a:	2201      	movs	r2, #1
 800027c:	4806      	ldr	r0, [pc, #24]	@ (8000298 <EPD_SendCommand+0x44>)
 800027e:	f001 fcf2 	bl	8001c66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8000282:	2201      	movs	r2, #1
 8000284:	2110      	movs	r1, #16
 8000286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028a:	f000 fdcd 	bl	8000e28 <HAL_GPIO_WritePin>
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000028 	.word	0x20000028

0800029c <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(uint8_t Data)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
    DEV_Digital_Write(EPD_CS_PIN, 0);
    DEV_SPI_WriteByte(Data);
    DEV_Digital_Write(EPD_CS_PIN, 1);
    */
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, 1);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2104      	movs	r1, #4
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f000 fdbb 	bl	8000e28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2110      	movs	r1, #16
 80002b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ba:	f000 fdb5 	bl	8000e28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 100);
 80002be:	1df9      	adds	r1, r7, #7
 80002c0:	2364      	movs	r3, #100	@ 0x64
 80002c2:	2201      	movs	r2, #1
 80002c4:	4806      	ldr	r0, [pc, #24]	@ (80002e0 <EPD_SendData+0x44>)
 80002c6:	f001 fcce 	bl	8001c66 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2110      	movs	r1, #16
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002d2:	f000 fda9 	bl	8000e28 <HAL_GPIO_WritePin>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <EPD_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_ReadBusy(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
    HAL_Delay(20);
    Debug("e-Paper busy release\r\n");
    */
	uint8_t busy;
	    do {
	        EPD_SendCommand(0x71);
 80002ea:	2071      	movs	r0, #113	@ 0x71
 80002ec:	f7ff ffb2 	bl	8000254 <EPD_SendCommand>
	        busy = HAL_GPIO_ReadPin(BUSY_GPIO_Port, BUSY_Pin);
 80002f0:	2108      	movs	r1, #8
 80002f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f6:	f000 fd7f 	bl	8000df8 <HAL_GPIO_ReadPin>
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	        busy =!(busy & 0x01);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	bf0c      	ite	eq
 8000308:	2301      	moveq	r3, #1
 800030a:	2300      	movne	r3, #0
 800030c:	b2db      	uxtb	r3, r3
 800030e:	71fb      	strb	r3, [r7, #7]
	    } while(busy);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d1e9      	bne.n	80002ea <EPD_ReadBusy+0x6>
	    HAL_Delay(20);
 8000316:	2014      	movs	r0, #20
 8000318:	f000 faea 	bl	80008f0 <HAL_Delay>

}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <EPD_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_TurnOnDisplay(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
    EPD_SendCommand(0x12);		 //DISPLAY REFRESH
 8000328:	2012      	movs	r0, #18
 800032a:	f7ff ff93 	bl	8000254 <EPD_SendCommand>
    HAL_Delay(10);     //!!!The delay here is necessary, 200uS at least!!!
 800032e:	200a      	movs	r0, #10
 8000330:	f000 fade 	bl	80008f0 <HAL_Delay>

    EPD_ReadBusy();
 8000334:	f7ff ffd6 	bl	80002e4 <EPD_ReadBusy>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}

0800033c <EPD_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
    EPD_Reset();
 8000340:	f7ff ff44 	bl	80001cc <EPD_Reset>

	EPD_SendCommand(0x04);
 8000344:	2004      	movs	r0, #4
 8000346:	f7ff ff85 	bl	8000254 <EPD_SendCommand>
	EPD_ReadBusy();//waiting for the electronic paper IC to release the idle signal
 800034a:	f7ff ffcb 	bl	80002e4 <EPD_ReadBusy>

	EPD_SendCommand(0x00);			//panel setting
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ff80 	bl	8000254 <EPD_SendCommand>
	EPD_SendData(0x1f);		//LUT from OTP，KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 8000354:	201f      	movs	r0, #31
 8000356:	f7ff ffa1 	bl	800029c <EPD_SendData>

	EPD_SendCommand(0x61);			//resolution setting
 800035a:	2061      	movs	r0, #97	@ 0x61
 800035c:	f7ff ff7a 	bl	8000254 <EPD_SendCommand>
	EPD_SendData (0x80);
 8000360:	2080      	movs	r0, #128	@ 0x80
 8000362:	f7ff ff9b 	bl	800029c <EPD_SendData>
	EPD_SendData (0x01);
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff ff98 	bl	800029c <EPD_SendData>
	EPD_SendData (0x28);
 800036c:	2028      	movs	r0, #40	@ 0x28
 800036e:	f7ff ff95 	bl	800029c <EPD_SendData>

	EPD_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
 8000372:	2050      	movs	r0, #80	@ 0x50
 8000374:	f7ff ff6e 	bl	8000254 <EPD_SendCommand>
	EPD_SendData(0x97);		//WBmode:VBDF 17|D7 VBDW 97 VBDB 57		WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7
 8000378:	2097      	movs	r0, #151	@ 0x97
 800037a:	f7ff ff8f 	bl	800029c <EPD_SendData>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}

08000382 <EPD_Draw1>:
/******************************************************************************
function :
parameter:
******************************************************************************/
void EPD_Draw1(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b084      	sub	sp, #16
 8000386:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
	    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 8000388:	2310      	movs	r3, #16
 800038a:	80fb      	strh	r3, [r7, #6]
	    Height = EPD_HEIGHT;
 800038c:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8000390:	80bb      	strh	r3, [r7, #4]

	    EPD_SendCommand(0x10);
 8000392:	2010      	movs	r0, #16
 8000394:	f7ff ff5e 	bl	8000254 <EPD_SendCommand>
	    for (uint16_t j = 0; j < Height; j++) {
 8000398:	2300      	movs	r3, #0
 800039a:	81fb      	strh	r3, [r7, #14]
 800039c:	e00f      	b.n	80003be <EPD_Draw1+0x3c>
	        for (uint16_t i = 0; i < Width; i++) {
 800039e:	2300      	movs	r3, #0
 80003a0:	81bb      	strh	r3, [r7, #12]
 80003a2:	e005      	b.n	80003b0 <EPD_Draw1+0x2e>
	            EPD_SendData(0x00);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ff79 	bl	800029c <EPD_SendData>
	        for (uint16_t i = 0; i < Width; i++) {
 80003aa:	89bb      	ldrh	r3, [r7, #12]
 80003ac:	3301      	adds	r3, #1
 80003ae:	81bb      	strh	r3, [r7, #12]
 80003b0:	89ba      	ldrh	r2, [r7, #12]
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	429a      	cmp	r2, r3
 80003b6:	d3f5      	bcc.n	80003a4 <EPD_Draw1+0x22>
	    for (uint16_t j = 0; j < Height; j++) {
 80003b8:	89fb      	ldrh	r3, [r7, #14]
 80003ba:	3301      	adds	r3, #1
 80003bc:	81fb      	strh	r3, [r7, #14]
 80003be:	89fa      	ldrh	r2, [r7, #14]
 80003c0:	88bb      	ldrh	r3, [r7, #4]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d3eb      	bcc.n	800039e <EPD_Draw1+0x1c>
	        }
	    }

	    EPD_SendCommand(0x13);
 80003c6:	2013      	movs	r0, #19
 80003c8:	f7ff ff44 	bl	8000254 <EPD_SendCommand>
	    for (uint16_t j = 0; j < Height; j++) {
 80003cc:	2300      	movs	r3, #0
 80003ce:	817b      	strh	r3, [r7, #10]
 80003d0:	e00f      	b.n	80003f2 <EPD_Draw1+0x70>
	        for (uint16_t i = 0; i < Width; i++) {
 80003d2:	2300      	movs	r3, #0
 80003d4:	813b      	strh	r3, [r7, #8]
 80003d6:	e005      	b.n	80003e4 <EPD_Draw1+0x62>
	            EPD_SendData(0xF0);
 80003d8:	20f0      	movs	r0, #240	@ 0xf0
 80003da:	f7ff ff5f 	bl	800029c <EPD_SendData>
	        for (uint16_t i = 0; i < Width; i++) {
 80003de:	893b      	ldrh	r3, [r7, #8]
 80003e0:	3301      	adds	r3, #1
 80003e2:	813b      	strh	r3, [r7, #8]
 80003e4:	893a      	ldrh	r2, [r7, #8]
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	d3f5      	bcc.n	80003d8 <EPD_Draw1+0x56>
	    for (uint16_t j = 0; j < Height; j++) {
 80003ec:	897b      	ldrh	r3, [r7, #10]
 80003ee:	3301      	adds	r3, #1
 80003f0:	817b      	strh	r3, [r7, #10]
 80003f2:	897a      	ldrh	r2, [r7, #10]
 80003f4:	88bb      	ldrh	r3, [r7, #4]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d3eb      	bcc.n	80003d2 <EPD_Draw1+0x50>
	        }
	    }

	    EPD_TurnOnDisplay();
 80003fa:	f7ff ff93 	bl	8000324 <EPD_TurnOnDisplay>
}
 80003fe:	bf00      	nop
 8000400:	3710      	adds	r7, #16
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <EPD_Draw2>:

void EPD_Draw2(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 800040c:	2310      	movs	r3, #16
 800040e:	80fb      	strh	r3, [r7, #6]
    Height = EPD_HEIGHT;
 8000410:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8000414:	80bb      	strh	r3, [r7, #4]

    EPD_SendCommand(0x10);
 8000416:	2010      	movs	r0, #16
 8000418:	f7ff ff1c 	bl	8000254 <EPD_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 800041c:	2300      	movs	r3, #0
 800041e:	81fb      	strh	r3, [r7, #14]
 8000420:	e00f      	b.n	8000442 <EPD_Draw2+0x3c>
        for (uint16_t i = 0; i < Width; i++) {
 8000422:	2300      	movs	r3, #0
 8000424:	81bb      	strh	r3, [r7, #12]
 8000426:	e005      	b.n	8000434 <EPD_Draw2+0x2e>
            EPD_SendData(0x00);
 8000428:	2000      	movs	r0, #0
 800042a:	f7ff ff37 	bl	800029c <EPD_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 800042e:	89bb      	ldrh	r3, [r7, #12]
 8000430:	3301      	adds	r3, #1
 8000432:	81bb      	strh	r3, [r7, #12]
 8000434:	89ba      	ldrh	r2, [r7, #12]
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	429a      	cmp	r2, r3
 800043a:	d3f5      	bcc.n	8000428 <EPD_Draw2+0x22>
    for (uint16_t j = 0; j < Height; j++) {
 800043c:	89fb      	ldrh	r3, [r7, #14]
 800043e:	3301      	adds	r3, #1
 8000440:	81fb      	strh	r3, [r7, #14]
 8000442:	89fa      	ldrh	r2, [r7, #14]
 8000444:	88bb      	ldrh	r3, [r7, #4]
 8000446:	429a      	cmp	r2, r3
 8000448:	d3eb      	bcc.n	8000422 <EPD_Draw2+0x1c>
        }
    }

    EPD_SendCommand(0x13);
 800044a:	2013      	movs	r0, #19
 800044c:	f7ff ff02 	bl	8000254 <EPD_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 8000450:	2300      	movs	r3, #0
 8000452:	817b      	strh	r3, [r7, #10]
 8000454:	e00f      	b.n	8000476 <EPD_Draw2+0x70>
        for (uint16_t i = 0; i < Width; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	813b      	strh	r3, [r7, #8]
 800045a:	e005      	b.n	8000468 <EPD_Draw2+0x62>
            EPD_SendData(0xAA);
 800045c:	20aa      	movs	r0, #170	@ 0xaa
 800045e:	f7ff ff1d 	bl	800029c <EPD_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 8000462:	893b      	ldrh	r3, [r7, #8]
 8000464:	3301      	adds	r3, #1
 8000466:	813b      	strh	r3, [r7, #8]
 8000468:	893a      	ldrh	r2, [r7, #8]
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	429a      	cmp	r2, r3
 800046e:	d3f5      	bcc.n	800045c <EPD_Draw2+0x56>
    for (uint16_t j = 0; j < Height; j++) {
 8000470:	897b      	ldrh	r3, [r7, #10]
 8000472:	3301      	adds	r3, #1
 8000474:	817b      	strh	r3, [r7, #10]
 8000476:	897a      	ldrh	r2, [r7, #10]
 8000478:	88bb      	ldrh	r3, [r7, #4]
 800047a:	429a      	cmp	r2, r3
 800047c:	d3eb      	bcc.n	8000456 <EPD_Draw2+0x50>
        }
    }

    EPD_TurnOnDisplay();
 800047e:	f7ff ff51 	bl	8000324 <EPD_TurnOnDisplay>
}
 8000482:	bf00      	nop
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048e:	f000 f9ba 	bl	8000806 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000492:	f000 f81b 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f8a3 	bl	80005e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800049a:	f000 f863 	bl	8000564 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  EPD_Init();
 800049e:	f7ff ff4d 	bl	800033c <EPD_Init>
  EPD_Draw1();
 80004a2:	f7ff ff6e 	bl	8000382 <EPD_Draw1>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //EPD_Clear();
	  	  HAL_Delay(5000);
 80004a6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004aa:	f000 fa21 	bl	80008f0 <HAL_Delay>
	  	  EPD_Draw2();
 80004ae:	f7ff ffaa 	bl	8000406 <EPD_Draw2>
	  	  //HAL_Delay(10000);
	  	  //EPD_Clear();
	  	  HAL_Delay(5000);
 80004b2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004b6:	f000 fa1b 	bl	80008f0 <HAL_Delay>
	  	  EPD_Draw1();
 80004ba:	f7ff ff62 	bl	8000382 <EPD_Draw1>
	  	  //HAL_Delay(10000);
	  	  HAL_Delay(5000);
 80004be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004c2:	f000 fa15 	bl	80008f0 <HAL_Delay>
	  	  HAL_Delay(5000);
 80004c6:	bf00      	nop
 80004c8:	e7ed      	b.n	80004a6 <main+0x1c>
	...

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b096      	sub	sp, #88	@ 0x58
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	2244      	movs	r2, #68	@ 0x44
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f001 fe9e 	bl	800221c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004f2:	f000 fcbf 	bl	8000e74 <HAL_PWREx_ControlVoltageScaling>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004fc:	f000 f8ac 	bl	8000658 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000500:	2310      	movs	r3, #16
 8000502:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000504:	2301      	movs	r3, #1
 8000506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800050c:	2360      	movs	r3, #96	@ 0x60
 800050e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000510:	2300      	movs	r3, #0
 8000512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4618      	mov	r0, r3
 800051a:	f000 fd01 	bl	8000f20 <HAL_RCC_OscConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000524:	f000 f898 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000528:	230f      	movs	r3, #15
 800052a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800053c:	463b      	mov	r3, r7
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f001 f901 	bl	8001748 <HAL_RCC_ClockConfig>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800054c:	f000 f884 	bl	8000658 <Error_Handler>
  }
  SCB->VTOR = FLASH_BASE | 0x00000000U;
 8000550:	4b03      	ldr	r3, [pc, #12]	@ (8000560 <SystemClock_Config+0x94>)
 8000552:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000556:	609a      	str	r2, [r3, #8]
}
 8000558:	bf00      	nop
 800055a:	3758      	adds	r7, #88	@ 0x58
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	e000ed00 	.word	0xe000ed00

08000564 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_SPI1_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_SPI1_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_SPI1_Init+0x74>)
 8000570:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000576:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_SPI1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800057c:	4b16      	ldr	r3, [pc, #88]	@ (80005d8 <MX_SPI1_Init+0x74>)
 800057e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000582:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000584:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_SPI1_Init+0x74>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800058a:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <MX_SPI1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_SPI1_Init+0x74>)
 8000592:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000596:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_SPI1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005b2:	2207      	movs	r2, #7
 80005b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005be:	2208      	movs	r2, #8
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_SPI1_Init+0x74>)
 80005c4:	f001 faac 	bl	8001b20 <HAL_SPI_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f843 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40013000 	.word	0x40013000

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_GPIO_Init+0x74>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f8:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <MX_GPIO_Init+0x74>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_GPIO_Init+0x74>)
 8000602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2116      	movs	r1, #22
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f000 fc08 	bl	8000e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CS_Pin;
 8000618:	2316      	movs	r3, #22
 800061a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000630:	f000 fa68 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000634:	2308      	movs	r3, #8
 8000636:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4619      	mov	r1, r3
 8000644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000648:	f000 fa5c 	bl	8000b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <Error_Handler+0x8>

08000664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <HAL_MspInit+0x44>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800066e:	4a0e      	ldr	r2, [pc, #56]	@ (80006a8 <HAL_MspInit+0x44>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6613      	str	r3, [r2, #96]	@ 0x60
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <HAL_MspInit+0x44>)
 8000678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <HAL_MspInit+0x44>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000686:	4a08      	ldr	r2, [pc, #32]	@ (80006a8 <HAL_MspInit+0x44>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800068c:	6593      	str	r3, [r2, #88]	@ 0x58
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <HAL_MspInit+0x44>)
 8000690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <HAL_SPI_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d128      	bne.n	8000720 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ce:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006d2:	4a16      	ldr	r2, [pc, #88]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006da:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a10      	ldr	r2, [pc, #64]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <HAL_SPI_MspInit+0x80>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006fe:	23e0      	movs	r3, #224	@ 0xe0
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800070e:	2305      	movs	r3, #5
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071c:	f000 f9f2 	bl	8000b04 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	@ 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40013000 	.word	0x40013000
 800072c:	40021000 	.word	0x40021000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000786:	f000 f893 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <SystemInit+0x20>)
 8000796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <SystemInit+0x20>)
 800079c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b8:	f7ff ffea 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	@ (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	@ (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	@ (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e2:	f001 fd23 	bl	800222c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007e6:	f7ff fe50 	bl	800048a <main>

080007ea <LoopForever>:

LoopForever:
    b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007ec:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f8:	080022d4 	.word	0x080022d4
  ldr r2, =_sbss
 80007fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000800:	20000090 	.word	0x20000090

08000804 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_IRQHandler>

08000806 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080c:	2300      	movs	r3, #0
 800080e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f943 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f80e 	bl	8000838 <HAL_InitTick>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	e001      	b.n	800082c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000828:	f7ff ff1c 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800082c:	79fb      	ldrb	r3, [r7, #7]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000844:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <HAL_InitTick+0x6c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d023      	beq.n	8000894 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800084c:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <HAL_InitTick+0x70>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <HAL_InitTick+0x6c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f941 	bl	8000aea <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10f      	bne.n	800088e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d809      	bhi.n	8000888 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f919 	bl	8000ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000880:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_InitTick+0x74>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	e007      	b.n	8000898 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e004      	b.n	8000898 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	73fb      	strb	r3, [r7, #15]
 8000892:	e001      	b.n	8000898 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_IncTick+0x20>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x24>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4413      	add	r3, r2
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_IncTick+0x24>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	20000008 	.word	0x20000008
 80008d4:	2000008c 	.word	0x2000008c

080008d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <HAL_GetTick+0x14>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	2000008c 	.word	0x2000008c

080008f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f8:	f7ff ffee 	bl	80008d8 <HAL_GetTick>
 80008fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000908:	d005      	beq.n	8000916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800090a:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <HAL_Delay+0x44>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000916:	bf00      	nop
 8000918:	f7ff ffde 	bl	80008d8 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d8f7      	bhi.n	8000918 <HAL_Delay+0x28>
  {
  }
}
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008

08000938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094e:	68ba      	ldr	r2, [r7, #8]
 8000950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096a:	4a04      	ldr	r2, [pc, #16]	@ (800097c <__NVIC_SetPriorityGrouping+0x44>)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	60d3      	str	r3, [r2, #12]
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <__NVIC_GetPriorityGrouping+0x18>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	0a1b      	lsrs	r3, r3, #8
 800098a:	f003 0307 	and.w	r3, r3, #7
}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	@ (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	@ (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	@ 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff ff8e 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff47 	bl	8000938 <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff5c 	bl	8000980 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff8e 	bl	80009f0 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5d 	bl	800099c <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffb0 	bl	8000a58 <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b12:	e154      	b.n	8000dbe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	2101      	movs	r1, #1
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b20:	4013      	ands	r3, r2
 8000b22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 8146 	beq.w	8000db8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0303 	and.w	r3, r3, #3
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d005      	beq.n	8000b44 <HAL_GPIO_Init+0x40>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0303 	and.w	r3, r3, #3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d130      	bne.n	8000ba6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	2203      	movs	r2, #3
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43db      	mvns	r3, r3
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	091b      	lsrs	r3, r3, #4
 8000b90:	f003 0201 	and.w	r2, r3, #1
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d017      	beq.n	8000be2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	689a      	ldr	r2, [r3, #8]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d123      	bne.n	8000c36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	08da      	lsrs	r2, r3, #3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	3208      	adds	r2, #8
 8000bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	220f      	movs	r2, #15
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	691a      	ldr	r2, [r3, #16]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	08da      	lsrs	r2, r3, #3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3208      	adds	r2, #8
 8000c30:	6939      	ldr	r1, [r7, #16]
 8000c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0203 	and.w	r2, r3, #3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 80a0 	beq.w	8000db8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c78:	4b58      	ldr	r3, [pc, #352]	@ (8000ddc <HAL_GPIO_Init+0x2d8>)
 8000c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7c:	4a57      	ldr	r2, [pc, #348]	@ (8000ddc <HAL_GPIO_Init+0x2d8>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c84:	4b55      	ldr	r3, [pc, #340]	@ (8000ddc <HAL_GPIO_Init+0x2d8>)
 8000c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c90:	4a53      	ldr	r2, [pc, #332]	@ (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	220f      	movs	r2, #15
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cba:	d019      	beq.n	8000cf0 <HAL_GPIO_Init+0x1ec>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a49      	ldr	r2, [pc, #292]	@ (8000de4 <HAL_GPIO_Init+0x2e0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d013      	beq.n	8000cec <HAL_GPIO_Init+0x1e8>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a48      	ldr	r2, [pc, #288]	@ (8000de8 <HAL_GPIO_Init+0x2e4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d00d      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a47      	ldr	r2, [pc, #284]	@ (8000dec <HAL_GPIO_Init+0x2e8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d007      	beq.n	8000ce4 <HAL_GPIO_Init+0x1e0>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	@ (8000df0 <HAL_GPIO_Init+0x2ec>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d101      	bne.n	8000ce0 <HAL_GPIO_Init+0x1dc>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	e008      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e004      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d02:	4937      	ldr	r1, [pc, #220]	@ (8000de0 <HAL_GPIO_Init+0x2dc>)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d10:	4b38      	ldr	r3, [pc, #224]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d34:	4a2f      	ldr	r2, [pc, #188]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d5e:	4a25      	ldr	r2, [pc, #148]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d64:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d88:	4a1a      	ldr	r2, [pc, #104]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000db2:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <HAL_GPIO_Init+0x2f0>)
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f47f aea3 	bne.w	8000b14 <HAL_GPIO_Init+0x10>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48000800 	.word	0x48000800
 8000dec:	48000c00 	.word	0x48000c00
 8000df0:	48001000 	.word	0x48001000
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e001      	b.n	8000e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
 8000e34:	4613      	mov	r3, r2
 8000e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e38:	787b      	ldrb	r3, [r7, #1]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3e:	887a      	ldrh	r2, [r7, #2]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e44:	e002      	b.n	8000e4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40007000 	.word	0x40007000

08000e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e82:	d130      	bne.n	8000ee6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e84:	4b23      	ldr	r3, [pc, #140]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e90:	d038      	beq.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2232      	movs	r2, #50	@ 0x32
 8000ea8:	fb02 f303 	mul.w	r3, r2, r3
 8000eac:	4a1b      	ldr	r2, [pc, #108]	@ (8000f1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9b      	lsrs	r3, r3, #18
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb8:	e002      	b.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec0:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ecc:	d102      	bne.n	8000ed4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f2      	bne.n	8000eba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ee0:	d110      	bne.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e00f      	b.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ef2:	d007      	beq.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000efc:	4a05      	ldr	r2, [pc, #20]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40007000 	.word	0x40007000
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	431bde83 	.word	0x431bde83

08000f20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f000 bc02 	b.w	8001738 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f34:	4b96      	ldr	r3, [pc, #600]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 030c 	and.w	r3, r3, #12
 8000f3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f3e:	4b94      	ldr	r3, [pc, #592]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	f000 80e4 	beq.w	800111e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d007      	beq.n	8000f6c <HAL_RCC_OscConfig+0x4c>
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b0c      	cmp	r3, #12
 8000f60:	f040 808b 	bne.w	800107a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	f040 8087 	bne.w	800107a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f6c:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <HAL_RCC_OscConfig+0x64>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e3d9      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1a      	ldr	r2, [r3, #32]
 8000f88:	4b81      	ldr	r3, [pc, #516]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d004      	beq.n	8000f9e <HAL_RCC_OscConfig+0x7e>
 8000f94:	4b7e      	ldr	r3, [pc, #504]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f9c:	e005      	b.n	8000faa <HAL_RCC_OscConfig+0x8a>
 8000f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d223      	bcs.n	8000ff6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fd54 	bl	8001a60 <RCC_SetFlashLatencyFromMSIRange>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e3ba      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fc2:	4b73      	ldr	r3, [pc, #460]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a72      	ldr	r2, [pc, #456]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b70      	ldr	r3, [pc, #448]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	496d      	ldr	r1, [pc, #436]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69db      	ldr	r3, [r3, #28]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	4968      	ldr	r1, [pc, #416]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	604b      	str	r3, [r1, #4]
 8000ff4:	e025      	b.n	8001042 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff6:	4b66      	ldr	r3, [pc, #408]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a65      	ldr	r2, [pc, #404]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b63      	ldr	r3, [pc, #396]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4960      	ldr	r1, [pc, #384]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001010:	4313      	orrs	r3, r2
 8001012:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001014:	4b5e      	ldr	r3, [pc, #376]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69db      	ldr	r3, [r3, #28]
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	495b      	ldr	r1, [pc, #364]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fd14 	bl	8001a60 <RCC_SetFlashLatencyFromMSIRange>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e37a      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001042:	f000 fc81 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001046:	4602      	mov	r2, r0
 8001048:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	4950      	ldr	r1, [pc, #320]	@ (8001194 <HAL_RCC_OscConfig+0x274>)
 8001054:	5ccb      	ldrb	r3, [r1, r3]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	fa22 f303 	lsr.w	r3, r2, r3
 800105e:	4a4e      	ldr	r2, [pc, #312]	@ (8001198 <HAL_RCC_OscConfig+0x278>)
 8001060:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001062:	4b4e      	ldr	r3, [pc, #312]	@ (800119c <HAL_RCC_OscConfig+0x27c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fbe6 	bl	8000838 <HAL_InitTick>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d052      	beq.n	800111c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	e35e      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d032      	beq.n	80010e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001082:	4b43      	ldr	r3, [pc, #268]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a42      	ldr	r2, [pc, #264]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800108e:	f7ff fc23 	bl	80008d8 <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001096:	f7ff fc1f 	bl	80008d8 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e347      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010a8:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b4:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4930      	ldr	r1, [pc, #192]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010ce:	4313      	orrs	r3, r2
 80010d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69db      	ldr	r3, [r3, #28]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	492b      	ldr	r1, [pc, #172]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	604b      	str	r3, [r1, #4]
 80010e6:	e01a      	b.n	800111e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f4:	f7ff fbf0 	bl	80008d8 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010fc:	f7ff fbec 	bl	80008d8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e314      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800110e:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1dc>
 800111a:	e000      	b.n	800111e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800111c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	d073      	beq.n	8001212 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b08      	cmp	r3, #8
 800112e:	d005      	beq.n	800113c <HAL_RCC_OscConfig+0x21c>
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b0c      	cmp	r3, #12
 8001134:	d10e      	bne.n	8001154 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b03      	cmp	r3, #3
 800113a:	d10b      	bne.n	8001154 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d063      	beq.n	8001210 <HAL_RCC_OscConfig+0x2f0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d15f      	bne.n	8001210 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e2f1      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800115c:	d106      	bne.n	800116c <HAL_RCC_OscConfig+0x24c>
 800115e:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e025      	b.n	80011b8 <HAL_RCC_OscConfig+0x298>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001174:	d114      	bne.n	80011a0 <HAL_RCC_OscConfig+0x280>
 8001176:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a02      	ldr	r2, [pc, #8]	@ (8001190 <HAL_RCC_OscConfig+0x270>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e013      	b.n	80011b8 <HAL_RCC_OscConfig+0x298>
 8001190:	40021000 	.word	0x40021000
 8001194:	0800228c 	.word	0x0800228c
 8001198:	20000000 	.word	0x20000000
 800119c:	20000004 	.word	0x20000004
 80011a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a9f      	ldr	r2, [pc, #636]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80011a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b9d      	ldr	r3, [pc, #628]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a9c      	ldr	r2, [pc, #624]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80011b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d013      	beq.n	80011e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c0:	f7ff fb8a 	bl	80008d8 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fb86 	bl	80008d8 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	@ 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e2ae      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011da:	4b92      	ldr	r3, [pc, #584]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x2a8>
 80011e6:	e014      	b.n	8001212 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb76 	bl	80008d8 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fb72 	bl	80008d8 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	@ 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e29a      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001202:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2d0>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d060      	beq.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b04      	cmp	r3, #4
 8001222:	d005      	beq.n	8001230 <HAL_RCC_OscConfig+0x310>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d119      	bne.n	800125e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d116      	bne.n	800125e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001230:	4b7c      	ldr	r3, [pc, #496]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_OscConfig+0x328>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e277      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001248:	4b76      	ldr	r3, [pc, #472]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	4973      	ldr	r1, [pc, #460]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001258:	4313      	orrs	r3, r2
 800125a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800125c:	e040      	b.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d023      	beq.n	80012ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001266:	4b6f      	ldr	r3, [pc, #444]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6e      	ldr	r2, [pc, #440]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800126c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001272:	f7ff fb31 	bl	80008d8 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127a:	f7ff fb2d 	bl	80008d8 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e255      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800128c:	4b65      	ldr	r3, [pc, #404]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001298:	4b62      	ldr	r3, [pc, #392]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691b      	ldr	r3, [r3, #16]
 80012a4:	061b      	lsls	r3, r3, #24
 80012a6:	495f      	ldr	r1, [pc, #380]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	e018      	b.n	80012e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80012b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ba:	f7ff fb0d 	bl	80008d8 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c2:	f7ff fb09 	bl	80008d8 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e231      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d4:	4b53      	ldr	r3, [pc, #332]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f0      	bne.n	80012c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d03c      	beq.n	8001366 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d01c      	beq.n	800132e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001304:	f7ff fae8 	bl	80008d8 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130c:	f7ff fae4 	bl	80008d8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e20c      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131e:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0ef      	beq.n	800130c <HAL_RCC_OscConfig+0x3ec>
 800132c:	e01b      	b.n	8001366 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132e:	4b3d      	ldr	r3, [pc, #244]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001334:	4a3b      	ldr	r2, [pc, #236]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff facb 	bl	80008d8 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fac7 	bl	80008d8 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1ef      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001358:	4b32      	ldr	r3, [pc, #200]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ef      	bne.n	8001346 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 80a6 	beq.w	80014c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001374:	2300      	movs	r3, #0
 8001376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001378:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10d      	bne.n	80013a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001388:	4a26      	ldr	r2, [pc, #152]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139c:	2301      	movs	r3, #1
 800139e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_RCC_OscConfig+0x508>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d118      	bne.n	80013de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <HAL_RCC_OscConfig+0x508>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_RCC_OscConfig+0x508>)
 80013b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fa8e 	bl	80008d8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c0:	f7ff fa8a 	bl	80008d8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1b2      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_RCC_OscConfig+0x508>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_RCC_OscConfig+0x4d8>
 80013e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80013e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013f6:	e029      	b.n	800144c <HAL_RCC_OscConfig+0x52c>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d115      	bne.n	800142c <HAL_RCC_OscConfig+0x50c>
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001406:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001410:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001416:	4a03      	ldr	r2, [pc, #12]	@ (8001424 <HAL_RCC_OscConfig+0x504>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001420:	e014      	b.n	800144c <HAL_RCC_OscConfig+0x52c>
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	40007000 	.word	0x40007000
 800142c:	4b9a      	ldr	r3, [pc, #616]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001432:	4a99      	ldr	r2, [pc, #612]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001434:	f023 0301 	bic.w	r3, r3, #1
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800143c:	4b96      	ldr	r3, [pc, #600]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 800143e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001442:	4a95      	ldr	r2, [pc, #596]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d016      	beq.n	8001482 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fa40 	bl	80008d8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fa3c 	bl	80008d8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e162      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001472:	4b89      	ldr	r3, [pc, #548]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ed      	beq.n	800145c <HAL_RCC_OscConfig+0x53c>
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fa29 	bl	80008d8 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fa25 	bl	80008d8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e14b      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80014a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1ed      	bne.n	800148a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b4:	4b78      	ldr	r3, [pc, #480]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	4a77      	ldr	r2, [pc, #476]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80014ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d03c      	beq.n	8001546 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d01c      	beq.n	800150e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014d4:	4b70      	ldr	r3, [pc, #448]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80014d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014da:	4a6f      	ldr	r2, [pc, #444]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff f9f8 	bl	80008d8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ec:	f7ff f9f4 	bl	80008d8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e11c      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014fe:	4b66      	ldr	r3, [pc, #408]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ef      	beq.n	80014ec <HAL_RCC_OscConfig+0x5cc>
 800150c:	e01b      	b.n	8001546 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800150e:	4b62      	ldr	r3, [pc, #392]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001514:	4a60      	ldr	r2, [pc, #384]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151e:	f7ff f9db 	bl	80008d8 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001526:	f7ff f9d7 	bl	80008d8 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0ff      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001538:	4b57      	ldr	r3, [pc, #348]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 800153a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1ef      	bne.n	8001526 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80f3 	beq.w	8001736 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	2b02      	cmp	r3, #2
 8001556:	f040 80c9 	bne.w	80016ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800155a:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0203 	and.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	429a      	cmp	r2, r3
 800156c:	d12c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	3b01      	subs	r3, #1
 800157a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d123      	bne.n	80015c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800158a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d11b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800159a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d113      	bne.n	80015c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015aa:	085b      	lsrs	r3, r3, #1
 80015ac:	3b01      	subs	r3, #1
 80015ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d109      	bne.n	80015c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d06b      	beq.n	80016a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d062      	beq.n	8001694 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015ce:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0ac      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015de:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 80015e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ea:	f7ff f975 	bl	80008d8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f2:	f7ff f971 	bl	80008d8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e099      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	4b21      	ldr	r3, [pc, #132]	@ (800169c <HAL_RCC_OscConfig+0x77c>)
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001620:	3a01      	subs	r2, #1
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	4311      	orrs	r1, r2
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800162a:	0212      	lsls	r2, r2, #8
 800162c:	4311      	orrs	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001632:	0852      	lsrs	r2, r2, #1
 8001634:	3a01      	subs	r2, #1
 8001636:	0552      	lsls	r2, r2, #21
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800163e:	0852      	lsrs	r2, r2, #1
 8001640:	3a01      	subs	r2, #1
 8001642:	0652      	lsls	r2, r2, #25
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800164a:	06d2      	lsls	r2, r2, #27
 800164c:	430a      	orrs	r2, r1
 800164e:	4912      	ldr	r1, [pc, #72]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001650:	4313      	orrs	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a0c      	ldr	r2, [pc, #48]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800166a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800166c:	f7ff f934 	bl	80008d8 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff f930 	bl	80008d8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e058      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <HAL_RCC_OscConfig+0x778>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001692:	e050      	b.n	8001736 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e04f      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
 8001698:	40021000 	.word	0x40021000
 800169c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d144      	bne.n	8001736 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016ac:	4b24      	ldr	r3, [pc, #144]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a23      	ldr	r2, [pc, #140]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4a20      	ldr	r2, [pc, #128]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016c4:	f7ff f908 	bl	80008d8 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f904 	bl	80008d8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e02c      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x7ac>
 80016ea:	e024      	b.n	8001736 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d01f      	beq.n	8001732 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 80016f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fe:	f7ff f8eb 	bl	80008d8 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff f8e7 	bl	80008d8 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e00f      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	4905      	ldr	r1, [pc, #20]	@ (8001740 <HAL_RCC_OscConfig+0x820>)
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_OscConfig+0x824>)
 800172c:	4013      	ands	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
 8001730:	e001      	b.n	8001736 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	feeefffc 	.word	0xfeeefffc

08001748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0e7      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800175c:	4b75      	ldr	r3, [pc, #468]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d910      	bls.n	800178c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b72      	ldr	r3, [pc, #456]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 0207 	bic.w	r2, r3, #7
 8001772:	4970      	ldr	r1, [pc, #448]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	4313      	orrs	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177a:	4b6e      	ldr	r3, [pc, #440]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d001      	beq.n	800178c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cf      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d010      	beq.n	80017ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b66      	ldr	r3, [pc, #408]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d908      	bls.n	80017ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b63      	ldr	r3, [pc, #396]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4960      	ldr	r1, [pc, #384]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d04c      	beq.n	8001860 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d121      	bne.n	800181e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0a6      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4b54      	ldr	r3, [pc, #336]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d115      	bne.n	800181e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e09a      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d109      	bne.n	800181e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e08e      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180e:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e086      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800181e:	4b46      	ldr	r3, [pc, #280]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 0203 	bic.w	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4943      	ldr	r1, [pc, #268]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001830:	f7ff f852 	bl	80008d8 <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	e00a      	b.n	800184e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001838:	f7ff f84e 	bl	80008d8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e06e      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 020c 	and.w	r2, r3, #12
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	429a      	cmp	r2, r3
 800185e:	d1eb      	bne.n	8001838 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d010      	beq.n	800188e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001878:	429a      	cmp	r2, r3
 800187a:	d208      	bcs.n	800188e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187c:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	492b      	ldr	r1, [pc, #172]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800188e:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d210      	bcs.n	80018be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 0207 	bic.w	r2, r3, #7
 80018a4:	4923      	ldr	r1, [pc, #140]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ac:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <HAL_RCC_ClockConfig+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e036      	b.n	800192c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	4918      	ldr	r1, [pc, #96]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4910      	ldr	r1, [pc, #64]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018fc:	f000 f824 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	490b      	ldr	r1, [pc, #44]	@ (800193c <HAL_RCC_ClockConfig+0x1f4>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1f8>)
 800191a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1fc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe ff89 	bl	8000838 <HAL_InitTick>
 8001926:	4603      	mov	r3, r0
 8001928:	72fb      	strb	r3, [r7, #11]

  return status;
 800192a:	7afb      	ldrb	r3, [r7, #11]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40022000 	.word	0x40022000
 8001938:	40021000 	.word	0x40021000
 800193c:	0800228c 	.word	0x0800228c
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001960:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x34>
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d121      	bne.n	80019ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d11e      	bne.n	80019ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800197c:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d107      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 030f 	and.w	r3, r3, #15
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	e005      	b.n	80019a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d102      	bne.n	80019c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	e004      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019cc:	4b23      	ldr	r3, [pc, #140]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80019ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d134      	bne.n	8001a40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d003      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0xa6>
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d003      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0xac>
 80019ec:	e005      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80019f0:	617b      	str	r3, [r7, #20]
      break;
 80019f2:	e005      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80019f6:	617b      	str	r3, [r7, #20]
      break;
 80019f8:	e002      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	617b      	str	r3, [r7, #20]
      break;
 80019fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	fb03 f202 	mul.w	r2, r3, r2
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	0e5b      	lsrs	r3, r3, #25
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	3301      	adds	r3, #1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a40:	69bb      	ldr	r3, [r7, #24]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	0800229c 	.word	0x0800229c
 8001a58:	00f42400 	.word	0x00f42400
 8001a5c:	007a1200 	.word	0x007a1200

08001a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a78:	f7ff f9ee 	bl	8000e58 <HAL_PWREx_GetVoltageRange>
 8001a7c:	6178      	str	r0, [r7, #20]
 8001a7e:	e014      	b.n	8001aaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	4b25      	ldr	r3, [pc, #148]	@ (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	4a24      	ldr	r2, [pc, #144]	@ (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a98:	f7ff f9de 	bl	8000e58 <HAL_PWREx_GetVoltageRange>
 8001a9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ab0:	d10b      	bne.n	8001aca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b80      	cmp	r3, #128	@ 0x80
 8001ab6:	d919      	bls.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2ba0      	cmp	r3, #160	@ 0xa0
 8001abc:	d902      	bls.n	8001ac4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001abe:	2302      	movs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e013      	b.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	e010      	b.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b80      	cmp	r3, #128	@ 0x80
 8001ace:	d902      	bls.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e00a      	b.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b80      	cmp	r3, #128	@ 0x80
 8001ada:	d102      	bne.n	8001ae2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	e004      	b.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b70      	cmp	r3, #112	@ 0x70
 8001ae6:	d101      	bne.n	8001aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ae8:	2301      	movs	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 0207 	bic.w	r2, r3, #7
 8001af4:	4909      	ldr	r1, [pc, #36]	@ (8001b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001afc:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40022000 	.word	0x40022000

08001b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e095      	b.n	8001c5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d108      	bne.n	8001b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b42:	d009      	beq.n	8001b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
 8001b4a:	e005      	b.n	8001b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fd9a 	bl	80006ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001b98:	d902      	bls.n	8001ba0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e002      	b.n	8001ba6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ba4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8001bae:	d007      	beq.n	8001bc0 <HAL_SPI_Init+0xa0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001bb8:	d002      	beq.n	8001bc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c02:	ea42 0103 	orr.w	r1, r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	0c1b      	lsrs	r3, r3, #16
 8001c1c:	f003 0204 	and.w	r2, r3, #4
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001c3c:	ea42 0103 	orr.w	r1, r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b088      	sub	sp, #32
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	60f8      	str	r0, [r7, #12]
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	603b      	str	r3, [r7, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c76:	f7fe fe2f 	bl	80008d8 <HAL_GetTick>
 8001c7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d001      	beq.n	8001c90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e15c      	b.n	8001f4a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_SPI_Transmit+0x36>
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e154      	b.n	8001f4a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_SPI_Transmit+0x48>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e14d      	b.n	8001f4a <HAL_SPI_Transmit+0x2e4>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	88fa      	ldrh	r2, [r7, #6]
 8001cce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	88fa      	ldrh	r2, [r7, #6]
 8001cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d00:	d10f      	bne.n	8001d22 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2c:	2b40      	cmp	r3, #64	@ 0x40
 8001d2e:	d007      	beq.n	8001d40 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001d48:	d952      	bls.n	8001df0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_SPI_Transmit+0xf2>
 8001d52:	8b7b      	ldrh	r3, [r7, #26]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d145      	bne.n	8001de4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	881a      	ldrh	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d68:	1c9a      	adds	r2, r3, #2
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d7c:	e032      	b.n	8001de4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d112      	bne.n	8001db2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001db0:	e018      	b.n	8001de4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001db2:	f7fe fd91 	bl	80008d8 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d803      	bhi.n	8001dca <HAL_SPI_Transmit+0x164>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc8:	d102      	bne.n	8001dd0 <HAL_SPI_Transmit+0x16a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0b2      	b.n	8001f4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1c7      	bne.n	8001d7e <HAL_SPI_Transmit+0x118>
 8001dee:	e083      	b.n	8001ef8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_SPI_Transmit+0x198>
 8001df8:	8b7b      	ldrh	r3, [r7, #26]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d177      	bne.n	8001eee <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d912      	bls.n	8001e2e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e0c:	881a      	ldrh	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e18:	1c9a      	adds	r2, r3, #2
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b02      	subs	r3, #2
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e2c:	e05f      	b.n	8001eee <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	330c      	adds	r3, #12
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e54:	e04b      	b.n	8001eee <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d12b      	bne.n	8001ebc <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d912      	bls.n	8001e94 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7e:	1c9a      	adds	r2, r3, #2
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b02      	subs	r3, #2
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001e92:	e02c      	b.n	8001eee <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	7812      	ldrb	r2, [r2, #0]
 8001ea0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001eba:	e018      	b.n	8001eee <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ebc:	f7fe fd0c 	bl	80008d8 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d803      	bhi.n	8001ed4 <HAL_SPI_Transmit+0x26e>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed2:	d102      	bne.n	8001eda <HAL_SPI_Transmit+0x274>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e02d      	b.n	8001f4a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ae      	bne.n	8001e56 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ef8:	69fa      	ldr	r2, [r7, #28]
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f947 	bl	8002190 <SPI_EndRxTxTransaction>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10a      	bne.n	8001f2c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f64:	f7fe fcb8 	bl	80008d8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f74:	f7fe fcb0 	bl	80008d8 <HAL_GetTick>
 8001f78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f7a:	4b39      	ldr	r3, [pc, #228]	@ (8002060 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	015b      	lsls	r3, r3, #5
 8001f80:	0d1b      	lsrs	r3, r3, #20
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f8a:	e054      	b.n	8002036 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f92:	d050      	beq.n	8002036 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f94:	f7fe fca0 	bl	80008d8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d902      	bls.n	8001faa <SPI_WaitFlagStateUntilTimeout+0x56>
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d13d      	bne.n	8002026 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001fb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fc2:	d111      	bne.n	8001fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fcc:	d004      	beq.n	8001fd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d107      	bne.n	8001fe8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fe6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ff0:	d10f      	bne.n	8002012 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002010:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e017      	b.n	8002056 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3b01      	subs	r3, #1
 8002034:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4013      	ands	r3, r2
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	429a      	cmp	r2, r3
 8002052:	d19b      	bne.n	8001f8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	@ 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002076:	f7fe fc2f 	bl	80008d8 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	4413      	add	r3, r2
 8002084:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002086:	f7fe fc27 	bl	80008d8 <HAL_GetTick>
 800208a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	330c      	adds	r3, #12
 8002092:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002094:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00da      	lsls	r2, r3, #3
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	0d1b      	lsrs	r3, r3, #20
 80020a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80020ac:	e060      	b.n	8002170 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80020b4:	d107      	bne.n	80020c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d050      	beq.n	8002170 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ce:	f7fe fc03 	bl	80008d8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020da:	429a      	cmp	r2, r3
 80020dc:	d902      	bls.n	80020e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d13d      	bne.n	8002160 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80020f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020fc:	d111      	bne.n	8002122 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002106:	d004      	beq.n	8002112 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002110:	d107      	bne.n	8002122 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002120:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800212a:	d10f      	bne.n	800214c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800214a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e010      	b.n	8002182 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3b01      	subs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d196      	bne.n	80020ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff ff5b 	bl	8002064 <SPI_WaitFifoStateUntilTimeout>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d007      	beq.n	80021c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e027      	b.n	8002214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f7ff fec0 	bl	8001f54 <SPI_WaitFlagStateUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e014      	b.n	8002214 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f7ff ff34 	bl	8002064 <SPI_WaitFifoStateUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e000      	b.n	8002214 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <memset>:
 800221c:	4402      	add	r2, r0
 800221e:	4603      	mov	r3, r0
 8002220:	4293      	cmp	r3, r2
 8002222:	d100      	bne.n	8002226 <memset+0xa>
 8002224:	4770      	bx	lr
 8002226:	f803 1b01 	strb.w	r1, [r3], #1
 800222a:	e7f9      	b.n	8002220 <memset+0x4>

0800222c <__libc_init_array>:
 800222c:	b570      	push	{r4, r5, r6, lr}
 800222e:	4d0d      	ldr	r5, [pc, #52]	@ (8002264 <__libc_init_array+0x38>)
 8002230:	4c0d      	ldr	r4, [pc, #52]	@ (8002268 <__libc_init_array+0x3c>)
 8002232:	1b64      	subs	r4, r4, r5
 8002234:	10a4      	asrs	r4, r4, #2
 8002236:	2600      	movs	r6, #0
 8002238:	42a6      	cmp	r6, r4
 800223a:	d109      	bne.n	8002250 <__libc_init_array+0x24>
 800223c:	4d0b      	ldr	r5, [pc, #44]	@ (800226c <__libc_init_array+0x40>)
 800223e:	4c0c      	ldr	r4, [pc, #48]	@ (8002270 <__libc_init_array+0x44>)
 8002240:	f000 f818 	bl	8002274 <_init>
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	2600      	movs	r6, #0
 800224a:	42a6      	cmp	r6, r4
 800224c:	d105      	bne.n	800225a <__libc_init_array+0x2e>
 800224e:	bd70      	pop	{r4, r5, r6, pc}
 8002250:	f855 3b04 	ldr.w	r3, [r5], #4
 8002254:	4798      	blx	r3
 8002256:	3601      	adds	r6, #1
 8002258:	e7ee      	b.n	8002238 <__libc_init_array+0xc>
 800225a:	f855 3b04 	ldr.w	r3, [r5], #4
 800225e:	4798      	blx	r3
 8002260:	3601      	adds	r6, #1
 8002262:	e7f2      	b.n	800224a <__libc_init_array+0x1e>
 8002264:	080022cc 	.word	0x080022cc
 8002268:	080022cc 	.word	0x080022cc
 800226c:	080022cc 	.word	0x080022cc
 8002270:	080022d0 	.word	0x080022d0

08002274 <_init>:
 8002274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002276:	bf00      	nop
 8002278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227a:	bc08      	pop	{r3}
 800227c:	469e      	mov	lr, r3
 800227e:	4770      	bx	lr

08002280 <_fini>:
 8002280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002282:	bf00      	nop
 8002284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002286:	bc08      	pop	{r3}
 8002288:	469e      	mov	lr, r3
 800228a:	4770      	bx	lr
