
I2C-com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a68  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002bf4  08002bf4  00003bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c34  08002c34  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c34  08002c34  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c34  08002c34  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c38  08002c38  00003c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08002c48  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08002c48  00004088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fb4  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d4  00000000  00000000  0000cff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  0000e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070d  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6a4  00000000  00000000  0000f91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b533  00000000  00000000  0002efc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdaed  00000000  00000000  0003a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7fe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002518  00000000  00000000  000f8024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000fa53c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002bdc 	.word	0x08002bdc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002bdc 	.word	0x08002bdc

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa70 	bl	80006b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f863 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f8ed 	bl	80003b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f8ab 	bl	8000338 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ec:	f000 fd5c 	bl	8000ca8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80001f0:	2014      	movs	r0, #20
 80001f2:	f000 fad5 	bl	80007a0 <HAL_Delay>
  NTP_Write_eeprom(0x10, 0x3D, 0b00001101,0x00,0x01,0x00); //V_EH
 80001f6:	2300      	movs	r3, #0
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2301      	movs	r3, #1
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2300      	movs	r3, #0
 8000200:	220d      	movs	r2, #13
 8000202:	213d      	movs	r1, #61	@ 0x3d
 8000204:	2010      	movs	r0, #16
 8000206:	f000 f909 	bl	800041c <NTP_Write_eeprom>
  HAL_Delay(20);
 800020a:	2014      	movs	r0, #20
 800020c:	f000 fac8 	bl	80007a0 <HAL_Delay>
  NTP_Write_eeprom(0x10, 0x37, 0b00001000,0x00,0xFF,0x00); //EH_MODE
 8000210:	2300      	movs	r3, #0
 8000212:	9301      	str	r3, [sp, #4]
 8000214:	23ff      	movs	r3, #255	@ 0xff
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2300      	movs	r3, #0
 800021a:	2208      	movs	r2, #8
 800021c:	2137      	movs	r1, #55	@ 0x37
 800021e:	2010      	movs	r0, #16
 8000220:	f000 f8fc 	bl	800041c <NTP_Write_eeprom>
  HAL_Delay(20);
 8000224:	2014      	movs	r0, #20
 8000226:	f000 fabb 	bl	80007a0 <HAL_Delay>
  NTP_Read_eeprom(0x00, 0x02, rx_buffer);
 800022a:	4a1c      	ldr	r2, [pc, #112]	@ (800029c <main+0xd0>)
 800022c:	2102      	movs	r1, #2
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f926 	bl	8000480 <NTP_Read_eeprom>
  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 0);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800023a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023e:	f000 fd33 	bl	8000ca8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000242:	2032      	movs	r0, #50	@ 0x32
 8000244:	f000 faac 	bl	80007a0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 8000248:	2201      	movs	r2, #1
 800024a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800024e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000252:	f000 fd29 	bl	8000ca8 <HAL_GPIO_WritePin>
	   HAL_Delay(20);
 8000256:	2014      	movs	r0, #20
 8000258:	f000 faa2 	bl	80007a0 <HAL_Delay>
	   NTP_Write_eeprom(0x00, 0x02, 0b00001101,0xAA,0x01,0xBB);
 800025c:	23bb      	movs	r3, #187	@ 0xbb
 800025e:	9301      	str	r3, [sp, #4]
 8000260:	2301      	movs	r3, #1
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	23aa      	movs	r3, #170	@ 0xaa
 8000266:	220d      	movs	r2, #13
 8000268:	2102      	movs	r1, #2
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8d6 	bl	800041c <NTP_Write_eeprom>
	   HAL_Delay(20);
 8000270:	2014      	movs	r0, #20
 8000272:	f000 fa95 	bl	80007a0 <HAL_Delay>
	   NTP_Read_eeprom(0x00, 0x02, rx_buffer);
 8000276:	4a09      	ldr	r2, [pc, #36]	@ (800029c <main+0xd0>)
 8000278:	2102      	movs	r1, #2
 800027a:	2000      	movs	r0, #0
 800027c:	f000 f900 	bl	8000480 <NTP_Read_eeprom>
	   HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028a:	f000 fd0d 	bl	8000ca8 <HAL_GPIO_WritePin>
	   HAL_Delay(1000);
 800028e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000292:	f000 fa85 	bl	80007a0 <HAL_Delay>
	  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 8000296:	bf00      	nop
 8000298:	e7d6      	b.n	8000248 <main+0x7c>
 800029a:	bf00      	nop
 800029c:	2000007c 	.word	0x2000007c

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b096      	sub	sp, #88	@ 0x58
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2244      	movs	r2, #68	@ 0x44
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fc68 	bl	8002b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	463b      	mov	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002c6:	f001 fafd 	bl	80018c4 <HAL_PWREx_ControlVoltageScaling>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d0:	f000 f904 	bl	80004dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002d4:	2310      	movs	r3, #16
 80002d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d8:	2301      	movs	r3, #1
 80002da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002e0:	2360      	movs	r3, #96	@ 0x60
 80002e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e4:	2300      	movs	r3, #0
 80002e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	f107 0314 	add.w	r3, r7, #20
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fb3f 	bl	8001970 <HAL_RCC_OscConfig>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002f8:	f000 f8f0 	bl	80004dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	230f      	movs	r3, #15
 80002fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000300:	2300      	movs	r3, #0
 8000302:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000310:	463b      	mov	r3, r7
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 ff3f 	bl	8002198 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000320:	f000 f8dc 	bl	80004dc <Error_Handler>
  }
  SCB->VTOR = FLASH_BASE | 0x00000000U;
 8000324:	4b03      	ldr	r3, [pc, #12]	@ (8000334 <SystemClock_Config+0x94>)
 8000326:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800032a:	609a      	str	r2, [r3, #8]
}
 800032c:	bf00      	nop
 800032e:	3758      	adds	r7, #88	@ 0x58
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800033c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ac <MX_I2C1_Init+0x74>)
 800033e:	4a1c      	ldr	r2, [pc, #112]	@ (80003b0 <MX_I2C1_Init+0x78>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000342:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000344:	4a1b      	ldr	r2, [pc, #108]	@ (80003b4 <MX_I2C1_Init+0x7c>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000348:	4b18      	ldr	r3, [pc, #96]	@ (80003ac <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000350:	2201      	movs	r2, #1
 8000352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <MX_I2C1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000360:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000366:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036c:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <MX_I2C1_Init+0x74>)
 800036e:	2200      	movs	r2, #0
 8000370:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000372:	480e      	ldr	r0, [pc, #56]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000374:	f000 fcb0 	bl	8000cd8 <HAL_I2C_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037e:	f000 f8ad 	bl	80004dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000382:	2100      	movs	r1, #0
 8000384:	4809      	ldr	r0, [pc, #36]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000386:	f001 f9f7 	bl	8001778 <HAL_I2CEx_ConfigAnalogFilter>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000390:	f000 f8a4 	bl	80004dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000394:	2100      	movs	r1, #0
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <MX_I2C1_Init+0x74>)
 8000398:	f001 fa39 	bl	800180e <HAL_I2CEx_ConfigDigitalFilter>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003a2:	f000 f89b 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000028 	.word	0x20000028
 80003b0:	40005400 	.word	0x40005400
 80003b4:	00100d14 	.word	0x00100d14

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b086      	sub	sp, #24
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_GPIO_Init+0x60>)
 80003ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d0:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <MX_GPIO_Init+0x60>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_GPIO_Init+0x60>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	603b      	str	r3, [r7, #0]
 80003e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ee:	f000 fc5b 	bl	8000ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NFC_Vcc_Pin */
  GPIO_InitStruct.Pin = NFC_Vcc_Pin;
 80003f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80003f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(NFC_Vcc_GPIO_Port, &GPIO_InitStruct);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040c:	f000 fad2 	bl	80009b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000410:	bf00      	nop
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40021000 	.word	0x40021000

0800041c <NTP_Write_eeprom>:

/* USER CODE BEGIN 4 */


void NTP_Write_eeprom(uint8_t BL_AD1, uint8_t BL_AD0, uint8_t DATA0, uint8_t DATA1, uint8_t DATA2, uint8_t DATA3){
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b087      	sub	sp, #28
 8000420:	af02      	add	r7, sp, #8
 8000422:	4604      	mov	r4, r0
 8000424:	4608      	mov	r0, r1
 8000426:	4611      	mov	r1, r2
 8000428:	461a      	mov	r2, r3
 800042a:	4623      	mov	r3, r4
 800042c:	71fb      	strb	r3, [r7, #7]
 800042e:	4603      	mov	r3, r0
 8000430:	71bb      	strb	r3, [r7, #6]
 8000432:	460b      	mov	r3, r1
 8000434:	717b      	strb	r3, [r7, #5]
 8000436:	4613      	mov	r3, r2
 8000438:	713b      	strb	r3, [r7, #4]

	uint8_t tx_buff[6] = {BL_AD1, BL_AD0, DATA0, DATA1, DATA2, DATA3};
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	723b      	strb	r3, [r7, #8]
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	727b      	strb	r3, [r7, #9]
 8000442:	797b      	ldrb	r3, [r7, #5]
 8000444:	72bb      	strb	r3, [r7, #10]
 8000446:	793b      	ldrb	r3, [r7, #4]
 8000448:	72fb      	strb	r3, [r7, #11]
 800044a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800044e:	733b      	strb	r3, [r7, #12]
 8000450:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000454:	737b      	strb	r3, [r7, #13]

	status = HAL_I2C_Master_Transmit(&hi2c1, NTP_ADDRESS, tx_buff, 6, 2);
 8000456:	f107 0208 	add.w	r2, r7, #8
 800045a:	2302      	movs	r3, #2
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2306      	movs	r3, #6
 8000460:	21a8      	movs	r1, #168	@ 0xa8
 8000462:	4805      	ldr	r0, [pc, #20]	@ (8000478 <NTP_Write_eeprom+0x5c>)
 8000464:	f000 fcd4 	bl	8000e10 <HAL_I2C_Master_Transmit>
 8000468:	4603      	mov	r3, r0
 800046a:	461a      	mov	r2, r3
 800046c:	4b03      	ldr	r3, [pc, #12]	@ (800047c <NTP_Write_eeprom+0x60>)
 800046e:	701a      	strb	r2, [r3, #0]

}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	20000028 	.word	0x20000028
 800047c:	20000080 	.word	0x20000080

08000480 <NTP_Read_eeprom>:

void NTP_Read_eeprom(uint8_t BL_AD1, uint8_t BL_AD0, uint8_t* target){
 8000480:	b580      	push	{r7, lr}
 8000482:	b086      	sub	sp, #24
 8000484:	af02      	add	r7, sp, #8
 8000486:	4603      	mov	r3, r0
 8000488:	603a      	str	r2, [r7, #0]
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	460b      	mov	r3, r1
 800048e:	71bb      	strb	r3, [r7, #6]

	uint8_t rx_add[2] = {BL_AD1, BL_AD0};
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	733b      	strb	r3, [r7, #12]
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	737b      	strb	r3, [r7, #13]

	status = HAL_I2C_Master_Transmit(&hi2c1, NTP_ADDRESS, rx_add, 2, 2);
 8000498:	f107 020c 	add.w	r2, r7, #12
 800049c:	2302      	movs	r3, #2
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2302      	movs	r3, #2
 80004a2:	21a8      	movs	r1, #168	@ 0xa8
 80004a4:	480b      	ldr	r0, [pc, #44]	@ (80004d4 <NTP_Read_eeprom+0x54>)
 80004a6:	f000 fcb3 	bl	8000e10 <HAL_I2C_Master_Transmit>
 80004aa:	4603      	mov	r3, r0
 80004ac:	461a      	mov	r2, r3
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <NTP_Read_eeprom+0x58>)
 80004b0:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Master_Receive(&hi2c1, NTP_ADDRESS, target, 4, 1);
 80004b2:	2301      	movs	r3, #1
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2304      	movs	r3, #4
 80004b8:	683a      	ldr	r2, [r7, #0]
 80004ba:	21a8      	movs	r1, #168	@ 0xa8
 80004bc:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <NTP_Read_eeprom+0x54>)
 80004be:	f000 fdbf 	bl	8001040 <HAL_I2C_Master_Receive>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <NTP_Read_eeprom+0x58>)
 80004c8:	701a      	strb	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000028 	.word	0x20000028
 80004d8:	20000080 	.word	0x20000080

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <Error_Handler+0x8>

080004e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ee:	4b0f      	ldr	r3, [pc, #60]	@ (800052c <HAL_MspInit+0x44>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f2:	4a0e      	ldr	r2, [pc, #56]	@ (800052c <HAL_MspInit+0x44>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80004fa:	4b0c      	ldr	r3, [pc, #48]	@ (800052c <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <HAL_MspInit+0x44>)
 8000508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800050a:	4a08      	ldr	r2, [pc, #32]	@ (800052c <HAL_MspInit+0x44>)
 800050c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000510:	6593      	str	r3, [r2, #88]	@ 0x58
 8000512:	4b06      	ldr	r3, [pc, #24]	@ (800052c <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0a0      	sub	sp, #128	@ 0x80
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	225c      	movs	r2, #92	@ 0x5c
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f002 fb17 	bl	8002b84 <memset>
  if(hi2c->Instance==I2C1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1f      	ldr	r2, [pc, #124]	@ (80005d8 <HAL_I2C_MspInit+0xa8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d137      	bne.n	80005d0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000564:	2300      	movs	r3, #0
 8000566:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4618      	mov	r0, r3
 800056e:	f001 ffff 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000578:	f7ff ffb0 	bl	80004dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <HAL_I2C_MspInit+0xac>)
 800057e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000580:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <HAL_I2C_MspInit+0xac>)
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <HAL_I2C_MspInit+0xac>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000594:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000598:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800059a:	2312      	movs	r3, #18
 800059c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005a2:	2303      	movs	r3, #3
 80005a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005a6:	2304      	movs	r3, #4
 80005a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005ae:	4619      	mov	r1, r3
 80005b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b4:	f000 f9fe 	bl	80009b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_I2C_MspInit+0xac>)
 80005ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <HAL_I2C_MspInit+0xac>)
 80005be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <HAL_I2C_MspInit+0xac>)
 80005c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005d0:	bf00      	nop
 80005d2:	3780      	adds	r7, #128	@ 0x80
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40005400 	.word	0x40005400
 80005dc:	40021000 	.word	0x40021000

080005e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <NMI_Handler+0x4>

080005e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <HardFault_Handler+0x4>

080005f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <MemManage_Handler+0x4>

080005f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <BusFault_Handler+0x4>

08000600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <UsageFault_Handler+0x4>

08000608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000636:	f000 f893 	bl	8000760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <SystemInit+0x20>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <SystemInit+0x20>)
 800064c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800069c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000668:	f7ff ffea 	bl	8000640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	@ (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000692:	f002 fa7f 	bl	8002b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000696:	f7ff fd99 	bl	80001cc <main>

0800069a <LoopForever>:

LoopForever:
    b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800069c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006a8:	08002c3c 	.word	0x08002c3c
  ldr r2, =_sbss
 80006ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b0:	20000088 	.word	0x20000088

080006b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_IRQHandler>

080006b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f943 	bl	800094c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 f80e 	bl	80006e8 <HAL_InitTick>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006d2:	2301      	movs	r3, #1
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	e001      	b.n	80006dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006d8:	f7ff ff06 	bl	80004e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_InitTick+0x6c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d023      	beq.n	8000744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006fc:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <HAL_InitTick+0x70>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <HAL_InitTick+0x6c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f941 	bl	800099a <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10f      	bne.n	800073e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d809      	bhi.n	8000738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000724:	2200      	movs	r2, #0
 8000726:	6879      	ldr	r1, [r7, #4]
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f000 f919 	bl	8000962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000730:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <HAL_InitTick+0x74>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	e007      	b.n	8000748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	e004      	b.n	8000748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e001      	b.n	8000748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000748:	7bfb      	ldrb	r3, [r7, #15]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008
 8000758:	20000000 	.word	0x20000000
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <HAL_IncTick+0x20>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	461a      	mov	r2, r3
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_IncTick+0x24>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4413      	add	r3, r2
 8000770:	4a04      	ldr	r2, [pc, #16]	@ (8000784 <HAL_IncTick+0x24>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000008 	.word	0x20000008
 8000784:	20000084 	.word	0x20000084

08000788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <HAL_GetTick+0x14>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000084 	.word	0x20000084

080007a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff ffee 	bl	8000788 <HAL_GetTick>
 80007ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d005      	beq.n	80007c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_Delay+0x44>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c6:	bf00      	nop
 80007c8:	f7ff ffde 	bl	8000788 <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f7      	bhi.n	80007c8 <HAL_Delay+0x28>
  {
  }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000008 	.word	0x20000008

080007e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <__NVIC_SetPriorityGrouping+0x44>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000804:	4013      	ands	r3, r2
 8000806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800081a:	4a04      	ldr	r2, [pc, #16]	@ (800082c <__NVIC_SetPriorityGrouping+0x44>)
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000834:	4b04      	ldr	r3, [pc, #16]	@ (8000848 <__NVIC_GetPriorityGrouping+0x18>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	f003 0307 	and.w	r3, r3, #7
}
 800083e:	4618      	mov	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	db0a      	blt.n	8000876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	490c      	ldr	r1, [pc, #48]	@ (8000898 <__NVIC_SetPriority+0x4c>)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	b2d2      	uxtb	r2, r2
 800086e:	440b      	add	r3, r1
 8000870:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000874:	e00a      	b.n	800088c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4908      	ldr	r1, [pc, #32]	@ (800089c <__NVIC_SetPriority+0x50>)
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	3b04      	subs	r3, #4
 8000884:	0112      	lsls	r2, r2, #4
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	440b      	add	r3, r1
 800088a:	761a      	strb	r2, [r3, #24]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000e100 	.word	0xe000e100
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b089      	sub	sp, #36	@ 0x24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f003 0307 	and.w	r3, r3, #7
 80008b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f1c3 0307 	rsb	r3, r3, #7
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	bf28      	it	cs
 80008be:	2304      	movcs	r3, #4
 80008c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3304      	adds	r3, #4
 80008c6:	2b06      	cmp	r3, #6
 80008c8:	d902      	bls.n	80008d0 <NVIC_EncodePriority+0x30>
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3b03      	subs	r3, #3
 80008ce:	e000      	b.n	80008d2 <NVIC_EncodePriority+0x32>
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d4:	f04f 32ff 	mov.w	r2, #4294967295
 80008d8:	69bb      	ldr	r3, [r7, #24]
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43da      	mvns	r2, r3
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43d9      	mvns	r1, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	4313      	orrs	r3, r2
         );
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3724      	adds	r7, #36	@ 0x24
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3b01      	subs	r3, #1
 8000914:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000918:	d301      	bcc.n	800091e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091a:	2301      	movs	r3, #1
 800091c:	e00f      	b.n	800093e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091e:	4a0a      	ldr	r2, [pc, #40]	@ (8000948 <SysTick_Config+0x40>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000926:	210f      	movs	r1, #15
 8000928:	f04f 30ff 	mov.w	r0, #4294967295
 800092c:	f7ff ff8e 	bl	800084c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000930:	4b05      	ldr	r3, [pc, #20]	@ (8000948 <SysTick_Config+0x40>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000936:	4b04      	ldr	r3, [pc, #16]	@ (8000948 <SysTick_Config+0x40>)
 8000938:	2207      	movs	r2, #7
 800093a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	e000e010 	.word	0xe000e010

0800094c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff ff47 	bl	80007e8 <__NVIC_SetPriorityGrouping>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b086      	sub	sp, #24
 8000966:	af00      	add	r7, sp, #0
 8000968:	4603      	mov	r3, r0
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000974:	f7ff ff5c 	bl	8000830 <__NVIC_GetPriorityGrouping>
 8000978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	6978      	ldr	r0, [r7, #20]
 8000980:	f7ff ff8e 	bl	80008a0 <NVIC_EncodePriority>
 8000984:	4602      	mov	r2, r0
 8000986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff5d 	bl	800084c <__NVIC_SetPriority>
}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ffb0 	bl	8000908 <SysTick_Config>
 80009a8:	4603      	mov	r3, r0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e154      	b.n	8000c6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8146 	beq.w	8000c68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d005      	beq.n	80009f4 <HAL_GPIO_Init+0x40>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 0201 	and.w	r2, r3, #1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 0303 	and.w	r3, r3, #3
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d017      	beq.n	8000a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80a0 	beq.w	8000c68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b58      	ldr	r3, [pc, #352]	@ (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2c:	4a57      	ldr	r2, [pc, #348]	@ (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b34:	4b55      	ldr	r3, [pc, #340]	@ (8000c8c <HAL_GPIO_Init+0x2d8>)
 8000b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a53      	ldr	r2, [pc, #332]	@ (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b6a:	d019      	beq.n	8000ba0 <HAL_GPIO_Init+0x1ec>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a49      	ldr	r2, [pc, #292]	@ (8000c94 <HAL_GPIO_Init+0x2e0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d013      	beq.n	8000b9c <HAL_GPIO_Init+0x1e8>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a48      	ldr	r2, [pc, #288]	@ (8000c98 <HAL_GPIO_Init+0x2e4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d00d      	beq.n	8000b98 <HAL_GPIO_Init+0x1e4>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a47      	ldr	r2, [pc, #284]	@ (8000c9c <HAL_GPIO_Init+0x2e8>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d007      	beq.n	8000b94 <HAL_GPIO_Init+0x1e0>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a46      	ldr	r2, [pc, #280]	@ (8000ca0 <HAL_GPIO_Init+0x2ec>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d101      	bne.n	8000b90 <HAL_GPIO_Init+0x1dc>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	e008      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b90:	2307      	movs	r3, #7
 8000b92:	e006      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e004      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b98:	2302      	movs	r3, #2
 8000b9a:	e002      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e000      	b.n	8000ba2 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb2:	4937      	ldr	r1, [pc, #220]	@ (8000c90 <HAL_GPIO_Init+0x2dc>)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bc0:	4b38      	ldr	r3, [pc, #224]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000be4:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c14:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c38:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c62:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa22 f303 	lsr.w	r3, r2, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f47f aea3 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c7e:	bf00      	nop
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010000 	.word	0x40010000
 8000c94:	48000400 	.word	0x48000400
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	48000c00 	.word	0x48000c00
 8000ca0:	48001000 	.word	0x48001000
 8000ca4:	40010400 	.word	0x40010400

08000ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	807b      	strh	r3, [r7, #2]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cb8:	787b      	ldrb	r3, [r7, #1]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cbe:	887a      	ldrh	r2, [r7, #2]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cc4:	e002      	b.n	8000ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cc6:	887a      	ldrh	r2, [r7, #2]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e08d      	b.n	8000e06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d106      	bne.n	8000d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff fc16 	bl	8000530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2224      	movs	r2, #36	@ 0x24
 8000d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f022 0201 	bic.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d107      	bne.n	8000d52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	e006      	b.n	8000d60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d108      	bne.n	8000d7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	e007      	b.n	8000d8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000dac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	691a      	ldr	r2, [r3, #16]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69d9      	ldr	r1, [r3, #28]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a1a      	ldr	r2, [r3, #32]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2220      	movs	r2, #32
 8000df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	817b      	strh	r3, [r7, #10]
 8000e20:	4613      	mov	r3, r2
 8000e22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b20      	cmp	r3, #32
 8000e2e:	f040 80fd 	bne.w	800102c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d101      	bne.n	8000e40 <HAL_I2C_Master_Transmit+0x30>
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e0f6      	b.n	800102e <HAL_I2C_Master_Transmit+0x21e>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e48:	f7ff fc9e 	bl	8000788 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2319      	movs	r3, #25
 8000e54:	2201      	movs	r2, #1
 8000e56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	f000 fa0a 	bl	8001274 <I2C_WaitOnFlagUntilTimeout>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e0e1      	b.n	800102e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2221      	movs	r2, #33	@ 0x21
 8000e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2210      	movs	r2, #16
 8000e76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	893a      	ldrh	r2, [r7, #8]
 8000e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	2bff      	cmp	r3, #255	@ 0xff
 8000e9a:	d906      	bls.n	8000eaa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	22ff      	movs	r2, #255	@ 0xff
 8000ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8000ea2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	e007      	b.n	8000eba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8000eb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eb8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d024      	beq.n	8000f0c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec6:	781a      	ldrb	r2, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed2:	1c5a      	adds	r2, r3, #1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	8979      	ldrh	r1, [r7, #10]
 8000efe:	4b4e      	ldr	r3, [pc, #312]	@ (8001038 <HAL_I2C_Master_Transmit+0x228>)
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f000 fc05 	bl	8001714 <I2C_TransferConfig>
 8000f0a:	e066      	b.n	8000fda <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	8979      	ldrh	r1, [r7, #10]
 8000f14:	4b48      	ldr	r3, [pc, #288]	@ (8001038 <HAL_I2C_Master_Transmit+0x228>)
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	68f8      	ldr	r0, [r7, #12]
 8000f1c:	f000 fbfa 	bl	8001714 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f20:	e05b      	b.n	8000fda <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	6a39      	ldr	r1, [r7, #32]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 f9fd 	bl	8001326 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e07b      	b.n	800102e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d034      	beq.n	8000fda <HAL_I2C_Master_Transmit+0x1ca>
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d130      	bne.n	8000fda <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 f976 	bl	8001274 <I2C_WaitOnFlagUntilTimeout>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e04d      	b.n	800102e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	2bff      	cmp	r3, #255	@ 0xff
 8000f9a:	d90e      	bls.n	8000fba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	22ff      	movs	r2, #255	@ 0xff
 8000fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	8979      	ldrh	r1, [r7, #10]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 fbae 	bl	8001714 <I2C_TransferConfig>
 8000fb8:	e00f      	b.n	8000fda <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	8979      	ldrh	r1, [r7, #10]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f000 fb9d 	bl	8001714 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d19e      	bne.n	8000f22 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	6a39      	ldr	r1, [r7, #32]
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 f9e3 	bl	80013b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e01a      	b.n	800102e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6859      	ldr	r1, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <HAL_I2C_Master_Transmit+0x22c>)
 800100c:	400b      	ands	r3, r1
 800100e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2220      	movs	r2, #32
 8001014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	e000      	b.n	800102e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800102c:	2302      	movs	r3, #2
  }
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	80002000 	.word	0x80002000
 800103c:	fe00e800 	.word	0xfe00e800

08001040 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af02      	add	r7, sp, #8
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	461a      	mov	r2, r3
 800104c:	460b      	mov	r3, r1
 800104e:	817b      	strh	r3, [r7, #10]
 8001050:	4613      	mov	r3, r2
 8001052:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b20      	cmp	r3, #32
 800105e:	f040 80db 	bne.w	8001218 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_I2C_Master_Receive+0x30>
 800106c:	2302      	movs	r3, #2
 800106e:	e0d4      	b.n	800121a <HAL_I2C_Master_Receive+0x1da>
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001078:	f7ff fb86 	bl	8000788 <HAL_GetTick>
 800107c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2319      	movs	r3, #25
 8001084:	2201      	movs	r2, #1
 8001086:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800108a:	68f8      	ldr	r0, [r7, #12]
 800108c:	f000 f8f2 	bl	8001274 <I2C_WaitOnFlagUntilTimeout>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0bf      	b.n	800121a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2222      	movs	r2, #34	@ 0x22
 800109e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2210      	movs	r2, #16
 80010a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	893a      	ldrh	r2, [r7, #8]
 80010ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	2bff      	cmp	r3, #255	@ 0xff
 80010ca:	d90e      	bls.n	80010ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2201      	movs	r2, #1
 80010d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	8979      	ldrh	r1, [r7, #10]
 80010da:	4b52      	ldr	r3, [pc, #328]	@ (8001224 <HAL_I2C_Master_Receive+0x1e4>)
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 fb16 	bl	8001714 <I2C_TransferConfig>
 80010e8:	e06d      	b.n	80011c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	8979      	ldrh	r1, [r7, #10]
 80010fc:	4b49      	ldr	r3, [pc, #292]	@ (8001224 <HAL_I2C_Master_Receive+0x1e4>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fb05 	bl	8001714 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800110a:	e05c      	b.n	80011c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	6a39      	ldr	r1, [r7, #32]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f993 	bl	800143c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e07c      	b.n	800121a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800113c:	3b01      	subs	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001148:	b29b      	uxth	r3, r3
 800114a:	3b01      	subs	r3, #1
 800114c:	b29a      	uxth	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d034      	beq.n	80011c6 <HAL_I2C_Master_Receive+0x186>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001160:	2b00      	cmp	r3, #0
 8001162:	d130      	bne.n	80011c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	2200      	movs	r2, #0
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f000 f880 	bl	8001274 <I2C_WaitOnFlagUntilTimeout>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e04d      	b.n	800121a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001182:	b29b      	uxth	r3, r3
 8001184:	2bff      	cmp	r3, #255	@ 0xff
 8001186:	d90e      	bls.n	80011a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	22ff      	movs	r2, #255	@ 0xff
 800118c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001192:	b2da      	uxtb	r2, r3
 8001194:	8979      	ldrh	r1, [r7, #10]
 8001196:	2300      	movs	r3, #0
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f000 fab8 	bl	8001714 <I2C_TransferConfig>
 80011a4:	e00f      	b.n	80011c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	8979      	ldrh	r1, [r7, #10]
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f000 faa7 	bl	8001714 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d19d      	bne.n	800110c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	6a39      	ldr	r1, [r7, #32]
 80011d4:	68f8      	ldr	r0, [r7, #12]
 80011d6:	f000 f8ed 	bl	80013b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e01a      	b.n	800121a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2220      	movs	r2, #32
 80011ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6859      	ldr	r1, [r3, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_I2C_Master_Receive+0x1e8>)
 80011f8:	400b      	ands	r3, r1
 80011fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2220      	movs	r2, #32
 8001200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001218:	2302      	movs	r3, #2
  }
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	80002400 	.word	0x80002400
 8001228:	fe00e800 	.word	0xfe00e800

0800122c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b02      	cmp	r3, #2
 8001240:	d103      	bne.n	800124a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d007      	beq.n	8001268 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699a      	ldr	r2, [r3, #24]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	619a      	str	r2, [r3, #24]
  }
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001284:	e03b      	b.n	80012fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f000 f962 	bl	8001554 <I2C_IsErrorOccurred>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e041      	b.n	800131e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a0:	d02d      	beq.n	80012fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a2:	f7ff fa71 	bl	8000788 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d302      	bcc.n	80012b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d122      	bne.n	80012fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4013      	ands	r3, r2
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	bf0c      	ite	eq
 80012c8:	2301      	moveq	r3, #1
 80012ca:	2300      	movne	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d113      	bne.n	80012fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f043 0220 	orr.w	r2, r3, #32
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2220      	movs	r2, #32
 80012e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4013      	ands	r3, r2
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	429a      	cmp	r2, r3
 800131a:	d0b4      	beq.n	8001286 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	60f8      	str	r0, [r7, #12]
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001332:	e033      	b.n	800139c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 f90b 	bl	8001554 <I2C_IsErrorOccurred>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e031      	b.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800134e:	d025      	beq.n	800139c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001350:	f7ff fa1a 	bl	8000788 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	d302      	bcc.n	8001366 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d11a      	bne.n	800139c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b02      	cmp	r3, #2
 8001372:	d013      	beq.n	800139c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001378:	f043 0220 	orr.w	r2, r3, #32
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2220      	movs	r2, #32
 8001384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e007      	b.n	80013ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d1c4      	bne.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013c0:	e02f      	b.n	8001422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f8c4 	bl	8001554 <I2C_IsErrorOccurred>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e02d      	b.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013d6:	f7ff f9d7 	bl	8000788 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d302      	bcc.n	80013ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d11a      	bne.n	8001422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0320 	and.w	r3, r3, #32
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d013      	beq.n	8001422 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	f043 0220 	orr.w	r2, r3, #32
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e007      	b.n	8001432 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b20      	cmp	r3, #32
 800142e:	d1c8      	bne.n	80013c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800144c:	e071      	b.n	8001532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f87e 	bl	8001554 <I2C_IsErrorOccurred>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b20      	cmp	r3, #32
 800146e:	d13b      	bne.n	80014e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d138      	bne.n	80014e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b04      	cmp	r3, #4
 8001482:	d105      	bne.n	8001490 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	2b10      	cmp	r3, #16
 800149c:	d121      	bne.n	80014e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2210      	movs	r2, #16
 80014a4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2204      	movs	r2, #4
 80014aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2220      	movs	r2, #32
 80014b2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b24      	ldr	r3, [pc, #144]	@ (8001550 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80014c0:	400b      	ands	r3, r1
 80014c2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2220      	movs	r2, #32
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	75fb      	strb	r3, [r7, #23]
 80014e0:	e002      	b.n	80014e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80014e8:	f7ff f94e 	bl	8000788 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d302      	bcc.n	80014fe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d116      	bne.n	8001532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b04      	cmp	r3, #4
 8001510:	d00f      	beq.n	8001532 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f043 0220 	orr.w	r2, r3, #32
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b04      	cmp	r3, #4
 800153e:	d002      	beq.n	8001546 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d083      	beq.n	800144e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8001546:	7dfb      	ldrb	r3, [r7, #23]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	fe00e800 	.word	0xfe00e800

08001554 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	d068      	beq.n	8001652 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2210      	movs	r2, #16
 8001586:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001588:	e049      	b.n	800161e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d045      	beq.n	800161e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001592:	f7ff f8f9 	bl	8000788 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d302      	bcc.n	80015a8 <I2C_IsErrorOccurred+0x54>
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d13a      	bne.n	800161e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015ca:	d121      	bne.n	8001610 <I2C_IsErrorOccurred+0xbc>
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015d2:	d01d      	beq.n	8001610 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80015d4:	7cfb      	ldrb	r3, [r7, #19]
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d01a      	beq.n	8001610 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80015e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015ea:	f7ff f8cd 	bl	8000788 <HAL_GetTick>
 80015ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015f0:	e00e      	b.n	8001610 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015f2:	f7ff f8c9 	bl	8000788 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b19      	cmp	r3, #25
 80015fe:	d907      	bls.n	8001610 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f043 0320 	orr.w	r3, r3, #32
 8001606:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800160e:	e006      	b.n	800161e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0320 	and.w	r3, r3, #32
 800161a:	2b20      	cmp	r3, #32
 800161c:	d1e9      	bne.n	80015f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0320 	and.w	r3, r3, #32
 8001628:	2b20      	cmp	r3, #32
 800162a:	d003      	beq.n	8001634 <I2C_IsErrorOccurred+0xe0>
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0aa      	beq.n	800158a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001638:	2b00      	cmp	r3, #0
 800163a:	d103      	bne.n	8001644 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2220      	movs	r2, #32
 8001642:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001674:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001696:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00b      	beq.n	80016c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80016c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01c      	beq.n	8001702 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff fdaf 	bl	800122c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <I2C_IsErrorOccurred+0x1bc>)
 80016da:	400b      	ands	r3, r1
 80016dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	431a      	orrs	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001702:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001706:	4618      	mov	r0, r3
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	fe00e800 	.word	0xfe00e800

08001714 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	460b      	mov	r3, r1
 8001720:	817b      	strh	r3, [r7, #10]
 8001722:	4613      	mov	r3, r2
 8001724:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001726:	897b      	ldrh	r3, [r7, #10]
 8001728:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800172c:	7a7b      	ldrb	r3, [r7, #9]
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001734:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	4313      	orrs	r3, r2
 800173e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001742:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	6a3b      	ldr	r3, [r7, #32]
 800174c:	0d5b      	lsrs	r3, r3, #21
 800174e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <I2C_TransferConfig+0x60>)
 8001754:	430b      	orrs	r3, r1
 8001756:	43db      	mvns	r3, r3
 8001758:	ea02 0103 	and.w	r1, r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001766:	bf00      	nop
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	03ff63ff 	.word	0x03ff63ff

08001778 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b20      	cmp	r3, #32
 800178c:	d138      	bne.n	8001800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001798:	2302      	movs	r3, #2
 800179a:	e032      	b.n	8001802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2224      	movs	r2, #36	@ 0x24
 80017a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80017ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	e000      	b.n	8001802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001800:	2302      	movs	r3, #2
  }
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b20      	cmp	r3, #32
 8001822:	d139      	bne.n	8001898 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800182e:	2302      	movs	r3, #2
 8001830:	e033      	b.n	800189a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2224      	movs	r2, #36	@ 0x24
 800183e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001860:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001898:	2302      	movs	r3, #2
  }
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018ac:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40007000 	.word	0x40007000

080018c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018d2:	d130      	bne.n	8001936 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d4:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018e0:	d038      	beq.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2232      	movs	r2, #50	@ 0x32
 80018f8:	fb02 f303 	mul.w	r3, r2, r3
 80018fc:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9b      	lsrs	r3, r3, #18
 8001904:	3301      	adds	r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001908:	e002      	b.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3b01      	subs	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001910:	4b14      	ldr	r3, [pc, #80]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800191c:	d102      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0x60>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f2      	bne.n	800190a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001924:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001930:	d110      	bne.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e00f      	b.n	8001956 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001936:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800193e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001942:	d007      	beq.n	8001954 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800194c:	4a05      	ldr	r2, [pc, #20]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001952:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40007000 	.word	0x40007000
 8001968:	20000000 	.word	0x20000000
 800196c:	431bde83 	.word	0x431bde83

08001970 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	f000 bc02 	b.w	8002188 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001984:	4b96      	ldr	r3, [pc, #600]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198e:	4b94      	ldr	r3, [pc, #592]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0310 	and.w	r3, r3, #16
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80e4 	beq.w	8001b6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_RCC_OscConfig+0x4c>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	f040 808b 	bne.w	8001aca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 8087 	bne.w	8001aca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019bc:	4b88      	ldr	r3, [pc, #544]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_OscConfig+0x64>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e3d9      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	4b81      	ldr	r3, [pc, #516]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_RCC_OscConfig+0x7e>
 80019e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ec:	e005      	b.n	80019fa <HAL_RCC_OscConfig+0x8a>
 80019ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d223      	bcs.n	8001a46 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 fd54 	bl	80024b0 <RCC_SetFlashLatencyFromMSIRange>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3ba      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a12:	4b73      	ldr	r3, [pc, #460]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a72      	ldr	r2, [pc, #456]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	f043 0308 	orr.w	r3, r3, #8
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b70      	ldr	r3, [pc, #448]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	496d      	ldr	r1, [pc, #436]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	4968      	ldr	r1, [pc, #416]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e025      	b.n	8001a92 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a46:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a65      	ldr	r2, [pc, #404]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4960      	ldr	r1, [pc, #384]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a64:	4b5e      	ldr	r3, [pc, #376]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	495b      	ldr	r1, [pc, #364]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fd14 	bl	80024b0 <RCC_SetFlashLatencyFromMSIRange>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e37a      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a92:	f000 fc81 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b51      	ldr	r3, [pc, #324]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	4950      	ldr	r1, [pc, #320]	@ (8001be4 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001aae:	4a4e      	ldr	r2, [pc, #312]	@ (8001be8 <HAL_RCC_OscConfig+0x278>)
 8001ab0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ab2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bec <HAL_RCC_OscConfig+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fe16 	bl	80006e8 <HAL_InitTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d052      	beq.n	8001b6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	e35e      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d032      	beq.n	8001b38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad2:	4b43      	ldr	r3, [pc, #268]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a42      	ldr	r2, [pc, #264]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ade:	f7fe fe53 	bl	8000788 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae6:	f7fe fe4f 	bl	8000788 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e347      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af8:	4b39      	ldr	r3, [pc, #228]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b04:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a35      	ldr	r2, [pc, #212]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b33      	ldr	r3, [pc, #204]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4930      	ldr	r1, [pc, #192]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b22:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	492b      	ldr	r1, [pc, #172]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
 8001b36:	e01a      	b.n	8001b6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b38:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a28      	ldr	r2, [pc, #160]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b44:	f7fe fe20 	bl	8000788 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fe1c 	bl	8000788 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e314      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x1dc>
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d073      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_OscConfig+0x21c>
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d10e      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d10b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d063      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d15f      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e2f1      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x24c>
 8001bae:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e025      	b.n	8001c08 <HAL_RCC_OscConfig+0x298>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc4:	d114      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x280>
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a02      	ldr	r2, [pc, #8]	@ (8001be0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	e013      	b.n	8001c08 <HAL_RCC_OscConfig+0x298>
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08002bf4 	.word	0x08002bf4
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	4ba0      	ldr	r3, [pc, #640]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a9f      	ldr	r2, [pc, #636]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b9d      	ldr	r3, [pc, #628]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a9c      	ldr	r2, [pc, #624]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7fe fdba 	bl	8000788 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7fe fdb6 	bl	8000788 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	@ 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e2ae      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2a:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x2a8>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7fe fda6 	bl	8000788 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7fe fda2 	bl	8000788 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e29a      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c52:	4b88      	ldr	r3, [pc, #544]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2d0>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d060      	beq.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_OscConfig+0x310>
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d119      	bne.n	8001cae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d116      	bne.n	8001cae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	4b7c      	ldr	r3, [pc, #496]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_OscConfig+0x328>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e277      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b76      	ldr	r3, [pc, #472]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	4973      	ldr	r1, [pc, #460]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cac:	e040      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d023      	beq.n	8001cfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc2:	f7fe fd61 	bl	8000788 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7fe fd5d 	bl	8000788 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e255      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	4b65      	ldr	r3, [pc, #404]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b62      	ldr	r3, [pc, #392]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	495f      	ldr	r1, [pc, #380]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
 8001cfc:	e018      	b.n	8001d30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5c      	ldr	r2, [pc, #368]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0a:	f7fe fd3d 	bl	8000788 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d12:	f7fe fd39 	bl	8000788 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e231      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d24:	4b53      	ldr	r3, [pc, #332]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d03c      	beq.n	8001db6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d44:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7fe fd18 	bl	8000788 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7fe fd14 	bl	8000788 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e20c      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6e:	4b41      	ldr	r3, [pc, #260]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0ef      	beq.n	8001d5c <HAL_RCC_OscConfig+0x3ec>
 8001d7c:	e01b      	b.n	8001db6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d84:	4a3b      	ldr	r2, [pc, #236]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7fe fcfb 	bl	8000788 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7fe fcf7 	bl	8000788 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1ef      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da8:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ef      	bne.n	8001d96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80a6 	beq.w	8001f10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b27      	ldr	r3, [pc, #156]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	4a26      	ldr	r2, [pc, #152]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de0:	4b24      	ldr	r3, [pc, #144]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d118      	bne.n	8001e2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e08:	f7fe fcbe 	bl	8000788 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe fcba 	bl	8000788 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1b2      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_RCC_OscConfig+0x508>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4d8>
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e46:	e029      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d115      	bne.n	8001e7c <HAL_RCC_OscConfig+0x50c>
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e66:	4a03      	ldr	r2, [pc, #12]	@ (8001e74 <HAL_RCC_OscConfig+0x504>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e70:	e014      	b.n	8001e9c <HAL_RCC_OscConfig+0x52c>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	4a99      	ldr	r2, [pc, #612]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e8c:	4b96      	ldr	r3, [pc, #600]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a95      	ldr	r2, [pc, #596]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d016      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7fe fc70 	bl	8000788 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7fe fc6c 	bl	8000788 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e162      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	4b89      	ldr	r3, [pc, #548]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ed      	beq.n	8001eac <HAL_RCC_OscConfig+0x53c>
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fc59 	bl	8000788 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe fc55 	bl	8000788 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e14b      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef0:	4b7d      	ldr	r3, [pc, #500]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1ed      	bne.n	8001eda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f04:	4b78      	ldr	r3, [pc, #480]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f08:	4a77      	ldr	r2, [pc, #476]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d03c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f24:	4b70      	ldr	r3, [pc, #448]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f2a:	4a6f      	ldr	r2, [pc, #444]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f34:	f7fe fc28 	bl	8000788 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f3c:	f7fe fc24 	bl	8000788 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e11c      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f4e:	4b66      	ldr	r3, [pc, #408]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ef      	beq.n	8001f3c <HAL_RCC_OscConfig+0x5cc>
 8001f5c:	e01b      	b.n	8001f96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f5e:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f64:	4a60      	ldr	r2, [pc, #384]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fc0b 	bl	8000788 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f76:	f7fe fc07 	bl	8000788 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0ff      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f88:	4b57      	ldr	r3, [pc, #348]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ef      	bne.n	8001f76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 80f3 	beq.w	8002186 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	f040 80c9 	bne.w	800213c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001faa:	4b4f      	ldr	r3, [pc, #316]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0203 	and.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d12c      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d123      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d11b      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d113      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d109      	bne.n	8002018 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	085b      	lsrs	r3, r3, #1
 8002010:	3b01      	subs	r3, #1
 8002012:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d06b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d062      	beq.n	80020e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800201e:	4b32      	ldr	r3, [pc, #200]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0ac      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800202e:	4b2e      	ldr	r3, [pc, #184]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2d      	ldr	r2, [pc, #180]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8002034:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002038:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800203a:	f7fe fba5 	bl	8000788 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7fe fba1 	bl	8000788 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e099      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <HAL_RCC_OscConfig+0x77c>)
 8002066:	4013      	ands	r3, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002070:	3a01      	subs	r2, #1
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800207a:	0212      	lsls	r2, r2, #8
 800207c:	4311      	orrs	r1, r2
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002082:	0852      	lsrs	r2, r2, #1
 8002084:	3a01      	subs	r2, #1
 8002086:	0552      	lsls	r2, r2, #21
 8002088:	4311      	orrs	r1, r2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	3a01      	subs	r2, #1
 8002092:	0652      	lsls	r2, r2, #25
 8002094:	4311      	orrs	r1, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800209a:	06d2      	lsls	r2, r2, #27
 800209c:	430a      	orrs	r2, r1
 800209e:	4912      	ldr	r1, [pc, #72]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020a4:	4b10      	ldr	r3, [pc, #64]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0f      	ldr	r2, [pc, #60]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b0:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4a0c      	ldr	r2, [pc, #48]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 80020b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020bc:	f7fe fb64 	bl	8000788 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7fe fb60 	bl	8000788 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e058      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d6:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <HAL_RCC_OscConfig+0x778>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e2:	e050      	b.n	8002186 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e04f      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
 80020e8:	40021000 	.word	0x40021000
 80020ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d144      	bne.n	8002186 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020fc:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a23      	ldr	r2, [pc, #140]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 8002102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002106:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002108:	4b21      	ldr	r3, [pc, #132]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a20      	ldr	r2, [pc, #128]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 800210e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002112:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002114:	f7fe fb38 	bl	8000788 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe fb34 	bl	8000788 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e02c      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x7ac>
 800213a:	e024      	b.n	8002186 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d01f      	beq.n	8002182 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002142:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 8002148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe fb1b 	bl	8000788 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe fb17 	bl	8000788 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e00f      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	4905      	ldr	r1, [pc, #20]	@ (8002190 <HAL_RCC_OscConfig+0x820>)
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_RCC_OscConfig+0x824>)
 800217c:	4013      	ands	r3, r2
 800217e:	60cb      	str	r3, [r1, #12]
 8002180:	e001      	b.n	8002186 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	feeefffc 	.word	0xfeeefffc

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0e7      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b75      	ldr	r3, [pc, #468]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d910      	bls.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b72      	ldr	r3, [pc, #456]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4970      	ldr	r1, [pc, #448]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cf      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b63      	ldr	r3, [pc, #396]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4960      	ldr	r1, [pc, #384]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002206:	4313      	orrs	r3, r2
 8002208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d04c      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d107      	bne.n	800222e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221e:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d121      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0a6      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	4b54      	ldr	r3, [pc, #336]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e09a      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224e:	4b4e      	ldr	r3, [pc, #312]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e08e      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b4a      	ldr	r3, [pc, #296]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e086      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b46      	ldr	r3, [pc, #280]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4943      	ldr	r1, [pc, #268]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	4313      	orrs	r3, r2
 800227e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002280:	f7fe fa82 	bl	8000788 <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7fe fa7e 	bl	8000788 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e06e      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b3a      	ldr	r3, [pc, #232]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4b31      	ldr	r3, [pc, #196]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d208      	bcs.n	80022de <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	492b      	ldr	r1, [pc, #172]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022de:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d210      	bcs.n	800230e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 0207 	bic.w	r2, r3, #7
 80022f4:	4923      	ldr	r1, [pc, #140]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fc:	4b21      	ldr	r3, [pc, #132]	@ (8002384 <HAL_RCC_ClockConfig+0x1ec>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d001      	beq.n	800230e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e036      	b.n	800237c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4918      	ldr	r1, [pc, #96]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d009      	beq.n	800234c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	4910      	ldr	r1, [pc, #64]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234c:	f000 f824 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_RCC_ClockConfig+0x1f0>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	490b      	ldr	r1, [pc, #44]	@ (800238c <HAL_RCC_ClockConfig+0x1f4>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	4a09      	ldr	r2, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1f8>)
 800236a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_ClockConfig+0x1fc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f9b9 	bl	80006e8 <HAL_InitTick>
 8002376:	4603      	mov	r3, r0
 8002378:	72fb      	strb	r3, [r7, #11]

  return status;
 800237a:	7afb      	ldrb	r3, [r7, #11]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40022000 	.word	0x40022000
 8002388:	40021000 	.word	0x40021000
 800238c:	08002bf4 	.word	0x08002bf4
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	@ 0x24
 800239c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b3e      	ldr	r3, [pc, #248]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d005      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d121      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d11e      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023cc:	4b34      	ldr	r3, [pc, #208]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d8:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023f4:	4a2b      	ldr	r2, [pc, #172]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d102      	bne.n	8002416 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	e004      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d101      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800241c:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x114>)
 800241e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d134      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d003      	beq.n	800243e <HAL_RCC_GetSysClockFreq+0xa6>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b03      	cmp	r3, #3
 800243a:	d003      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0xac>
 800243c:	e005      	b.n	800244a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002440:	617b      	str	r3, [r7, #20]
      break;
 8002442:	e005      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <HAL_RCC_GetSysClockFreq+0x114>)
 8002446:	617b      	str	r3, [r7, #20]
      break;
 8002448:	e002      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	617b      	str	r3, [r7, #20]
      break;
 800244e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002450:	4b13      	ldr	r3, [pc, #76]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	3301      	adds	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	0e5b      	lsrs	r3, r3, #25
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	3301      	adds	r3, #1
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002490:	69bb      	ldr	r3, [r7, #24]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	@ 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08002c04 	.word	0x08002c04
 80024a8:	00f42400 	.word	0x00f42400
 80024ac:	007a1200 	.word	0x007a1200

080024b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024c8:	f7ff f9ee 	bl	80018a8 <HAL_PWREx_GetVoltageRange>
 80024cc:	6178      	str	r0, [r7, #20]
 80024ce:	e014      	b.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	@ 0x58
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024e8:	f7ff f9de 	bl	80018a8 <HAL_PWREx_GetVoltageRange>
 80024ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002500:	d10b      	bne.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b80      	cmp	r3, #128	@ 0x80
 8002506:	d919      	bls.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2ba0      	cmp	r3, #160	@ 0xa0
 800250c:	d902      	bls.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800250e:	2302      	movs	r3, #2
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	e013      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002514:	2301      	movs	r3, #1
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	e010      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b80      	cmp	r3, #128	@ 0x80
 800251e:	d902      	bls.n	8002526 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002520:	2303      	movs	r3, #3
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	e00a      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b80      	cmp	r3, #128	@ 0x80
 800252a:	d102      	bne.n	8002532 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800252c:	2302      	movs	r3, #2
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	e004      	b.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b70      	cmp	r3, #112	@ 0x70
 8002536:	d101      	bne.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002538:	2301      	movs	r3, #1
 800253a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0207 	bic.w	r2, r3, #7
 8002544:	4909      	ldr	r1, [pc, #36]	@ (800256c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800254c:	4b07      	ldr	r3, [pc, #28]	@ (800256c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40021000 	.word	0x40021000
 800256c:	40022000 	.word	0x40022000

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002578:	2300      	movs	r3, #0
 800257a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800257c:	2300      	movs	r3, #0
 800257e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002588:	2b00      	cmp	r3, #0
 800258a:	d031      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002590:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002594:	d01a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002596:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800259a:	d814      	bhi.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025a4:	d10f      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80025a6:	4b5d      	ldr	r3, [pc, #372]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a5c      	ldr	r2, [pc, #368]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b2:	e00c      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f9f0 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c4:	e003      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ca:	e000      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80025cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10b      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d4:	4b51      	ldr	r3, [pc, #324]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	494e      	ldr	r1, [pc, #312]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025ea:	e001      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 809e 	beq.w	800273a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002602:	4b46      	ldr	r3, [pc, #280]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b40      	ldr	r3, [pc, #256]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261c:	4a3f      	ldr	r2, [pc, #252]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6593      	str	r3, [r2, #88]	@ 0x58
 8002624:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002630:	2301      	movs	r3, #1
 8002632:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002634:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a39      	ldr	r2, [pc, #228]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002640:	f7fe f8a2 	bl	8000788 <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002646:	e009      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002648:	f7fe f89e 	bl	8000788 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d902      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	74fb      	strb	r3, [r7, #19]
        break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265c:	4b30      	ldr	r3, [pc, #192]	@ (8002720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ef      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d15a      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002678:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01e      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d019      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002690:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002694:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002696:	4b21      	ldr	r3, [pc, #132]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ac:	4a1b      	ldr	r2, [pc, #108]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b6:	4a19      	ldr	r2, [pc, #100]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d016      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe f85e 	bl	8000788 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ce:	e00b      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe f85a 	bl	8000788 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d902      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	74fb      	strb	r3, [r7, #19]
            break;
 80026e6:	e006      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ec      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10b      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	4904      	ldr	r1, [pc, #16]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002712:	e009      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
 8002718:	e006      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002728:	7c7b      	ldrb	r3, [r7, #17]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b9b      	ldr	r3, [pc, #620]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002732:	4a9a      	ldr	r2, [pc, #616]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002738:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002746:	4b95      	ldr	r3, [pc, #596]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274c:	f023 0203 	bic.w	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	4991      	ldr	r1, [pc, #580]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002768:	4b8c      	ldr	r3, [pc, #560]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f023 020c 	bic.w	r2, r3, #12
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	4989      	ldr	r1, [pc, #548]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278a:	4b84      	ldr	r3, [pc, #528]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	4980      	ldr	r1, [pc, #512]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027ac:	4b7b      	ldr	r3, [pc, #492]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	4978      	ldr	r1, [pc, #480]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ce:	4b73      	ldr	r3, [pc, #460]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027dc:	496f      	ldr	r1, [pc, #444]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027f0:	4b6a      	ldr	r3, [pc, #424]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	4967      	ldr	r1, [pc, #412]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002812:	4b62      	ldr	r3, [pc, #392]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	495e      	ldr	r1, [pc, #376]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002834:	4b59      	ldr	r3, [pc, #356]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002842:	4956      	ldr	r1, [pc, #344]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002856:	4b51      	ldr	r3, [pc, #324]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002864:	494d      	ldr	r1, [pc, #308]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d028      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002878:	4b48      	ldr	r3, [pc, #288]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002886:	4945      	ldr	r1, [pc, #276]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002896:	d106      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b40      	ldr	r3, [pc, #256]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a3f      	ldr	r2, [pc, #252]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]
 80028a4:	e011      	b.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028ae:	d10c      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 f872 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d028      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028d6:	4b31      	ldr	r3, [pc, #196]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e4:	492d      	ldr	r1, [pc, #180]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028f4:	d106      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f6:	4b29      	ldr	r3, [pc, #164]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a28      	ldr	r2, [pc, #160]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80028fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002900:	60d3      	str	r3, [r2, #12]
 8002902:	e011      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002908:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2101      	movs	r1, #1
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f843 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01c      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002942:	4916      	ldr	r1, [pc, #88]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800294e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002952:	d10c      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	2102      	movs	r1, #2
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f820 	bl	80029a0 <RCCEx_PLLSAI1_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002988:	4904      	ldr	r1, [pc, #16]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002990:	7cbb      	ldrb	r3, [r7, #18]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000

080029a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ae:	4b74      	ldr	r3, [pc, #464]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d018      	beq.n	80029ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029ba:	4b71      	ldr	r3, [pc, #452]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0203 	and.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d10d      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
       ||
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
       ||
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d047      	beq.n	8002a76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
 80029ea:	e044      	b.n	8002a76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d018      	beq.n	8002a26 <RCCEx_PLLSAI1_Config+0x86>
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d825      	bhi.n	8002a44 <RCCEx_PLLSAI1_Config+0xa4>
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d002      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0x62>
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d009      	beq.n	8002a14 <RCCEx_PLLSAI1_Config+0x74>
 8002a00:	e020      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a02:	4b5f      	ldr	r3, [pc, #380]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11d      	bne.n	8002a4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a12:	e01a      	b.n	8002a4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a14:	4b5a      	ldr	r3, [pc, #360]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e013      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a26:	4b56      	ldr	r3, [pc, #344]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10f      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a32:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a42:	e006      	b.n	8002a52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
      break;
 8002a48:	e004      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4a:	bf00      	nop
 8002a4c:	e002      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e000      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a5a:	4b49      	ldr	r3, [pc, #292]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	4943      	ldr	r1, [pc, #268]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d17c      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a7c:	4b40      	ldr	r3, [pc, #256]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a3f      	ldr	r2, [pc, #252]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a88:	f7fd fe7e 	bl	8000788 <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a8e:	e009      	b.n	8002aa4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a90:	f7fd fe7a 	bl	8000788 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d902      	bls.n	8002aa4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa2:	e005      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aa4:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ef      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d15f      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d110      	bne.n	8002ade <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002abc:	4b30      	ldr	r3, [pc, #192]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002ac4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6892      	ldr	r2, [r2, #8]
 8002acc:	0211      	lsls	r1, r2, #8
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	06d2      	lsls	r2, r2, #27
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	492a      	ldr	r1, [pc, #168]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
 8002adc:	e027      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d112      	bne.n	8002b0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ae4:	4b26      	ldr	r3, [pc, #152]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002aec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6892      	ldr	r2, [r2, #8]
 8002af4:	0211      	lsls	r1, r2, #8
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6912      	ldr	r2, [r2, #16]
 8002afa:	0852      	lsrs	r2, r2, #1
 8002afc:	3a01      	subs	r2, #1
 8002afe:	0552      	lsls	r2, r2, #21
 8002b00:	430a      	orrs	r2, r1
 8002b02:	491f      	ldr	r1, [pc, #124]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	610b      	str	r3, [r1, #16]
 8002b08:	e011      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b12:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6892      	ldr	r2, [r2, #8]
 8002b1a:	0211      	lsls	r1, r2, #8
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6952      	ldr	r2, [r2, #20]
 8002b20:	0852      	lsrs	r2, r2, #1
 8002b22:	3a01      	subs	r2, #1
 8002b24:	0652      	lsls	r2, r2, #25
 8002b26:	430a      	orrs	r2, r1
 8002b28:	4915      	ldr	r1, [pc, #84]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3a:	f7fd fe25 	bl	8000788 <HAL_GetTick>
 8002b3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b40:	e009      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b42:	f7fd fe21 	bl	8000788 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d902      	bls.n	8002b56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	73fb      	strb	r3, [r7, #15]
          break;
 8002b54:	e005      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b56:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ef      	beq.n	8002b42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4903      	ldr	r1, [pc, #12]	@ (8002b80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000

08002b84 <memset>:
 8002b84:	4402      	add	r2, r0
 8002b86:	4603      	mov	r3, r0
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <memset+0xa>
 8002b8c:	4770      	bx	lr
 8002b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b92:	e7f9      	b.n	8002b88 <memset+0x4>

08002b94 <__libc_init_array>:
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	4d0d      	ldr	r5, [pc, #52]	@ (8002bcc <__libc_init_array+0x38>)
 8002b98:	4c0d      	ldr	r4, [pc, #52]	@ (8002bd0 <__libc_init_array+0x3c>)
 8002b9a:	1b64      	subs	r4, r4, r5
 8002b9c:	10a4      	asrs	r4, r4, #2
 8002b9e:	2600      	movs	r6, #0
 8002ba0:	42a6      	cmp	r6, r4
 8002ba2:	d109      	bne.n	8002bb8 <__libc_init_array+0x24>
 8002ba4:	4d0b      	ldr	r5, [pc, #44]	@ (8002bd4 <__libc_init_array+0x40>)
 8002ba6:	4c0c      	ldr	r4, [pc, #48]	@ (8002bd8 <__libc_init_array+0x44>)
 8002ba8:	f000 f818 	bl	8002bdc <_init>
 8002bac:	1b64      	subs	r4, r4, r5
 8002bae:	10a4      	asrs	r4, r4, #2
 8002bb0:	2600      	movs	r6, #0
 8002bb2:	42a6      	cmp	r6, r4
 8002bb4:	d105      	bne.n	8002bc2 <__libc_init_array+0x2e>
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}
 8002bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbc:	4798      	blx	r3
 8002bbe:	3601      	adds	r6, #1
 8002bc0:	e7ee      	b.n	8002ba0 <__libc_init_array+0xc>
 8002bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc6:	4798      	blx	r3
 8002bc8:	3601      	adds	r6, #1
 8002bca:	e7f2      	b.n	8002bb2 <__libc_init_array+0x1e>
 8002bcc:	08002c34 	.word	0x08002c34
 8002bd0:	08002c34 	.word	0x08002c34
 8002bd4:	08002c34 	.word	0x08002c34
 8002bd8:	08002c38 	.word	0x08002c38

08002bdc <_init>:
 8002bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bde:	bf00      	nop
 8002be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be2:	bc08      	pop	{r3}
 8002be4:	469e      	mov	lr, r3
 8002be6:	4770      	bx	lr

08002be8 <_fini>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr
