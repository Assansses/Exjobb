
Prototyp2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040fc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004288  08004288  00005288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  080042c8  080042c8  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c8  080042c8  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080042d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000014  080042e4  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080042e4  000060f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7f7  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c30  00000000  00000000  0001183b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00013470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c5  00000000  00000000  00013ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021125  00000000  00000000  000148b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d754  00000000  00000000  000359da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce465  00000000  00000000  0004312e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f70  00000000  00000000  001115d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00114548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004270 	.word	0x08004270

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	08004270 	.word	0x08004270

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fc94 	bl	8000afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f9c7 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 faaf 	bl	800073c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 fa6d 	bl	80006bc <MX_I2C1_Init>
  MX_ADC1_Init();
 80001e2:	f000 fa07 	bl	80005f4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


   // INITIALIZE NTP5332
   HAL_Delay(50);
 80001e6:	2032      	movs	r0, #50	@ 0x32
 80001e8:	f000 fcfe 	bl	8000be8 <HAL_Delay>
   HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f6:	f002 f9d5 	bl	80025a4 <HAL_GPIO_WritePin>
   NTP_Write_eeprom(0x10, 0x3D, 0b00000101,0x00,0x01,0x00);
 80001fa:	2300      	movs	r3, #0
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	2301      	movs	r3, #1
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2300      	movs	r3, #0
 8000204:	2205      	movs	r2, #5
 8000206:	213d      	movs	r1, #61	@ 0x3d
 8000208:	2010      	movs	r0, #16
 800020a:	f000 fb13 	bl	8000834 <NTP_Write_eeprom>
   HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 0);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000218:	f002 f9c4 	bl	80025a4 <HAL_GPIO_WritePin>
   HAL_Delay(50);
 800021c:	2032      	movs	r0, #50	@ 0x32
 800021e:	f000 fce3 	bl	8000be8 <HAL_Delay>

   //ADC
   uint16_t VREFINT_CAL = *((uint16_t*)VREFINT_CAL_ADDR); //Data sheet page 39
 8000222:	4b57      	ldr	r3, [pc, #348]	@ (8000380 <main+0x1b4>)
 8000224:	881b      	ldrh	r3, [r3, #0]
 8000226:	80fb      	strh	r3, [r7, #6]




 	  //READ CAPACITOR VOLTAGE
 	  HAL_GPIO_WritePin(A_en_GPIO_Port, A_en_Pin, 1);
 8000228:	2201      	movs	r2, #1
 800022a:	2101      	movs	r1, #1
 800022c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000230:	f002 f9b8 	bl	80025a4 <HAL_GPIO_WritePin>
 	  HAL_Delay(50);
 8000234:	2032      	movs	r0, #50	@ 0x32
 8000236:	f000 fcd7 	bl	8000be8 <HAL_Delay>

 	  HAL_ADC_Start(&hadc1);
 800023a:	4852      	ldr	r0, [pc, #328]	@ (8000384 <main+0x1b8>)
 800023c:	f001 f870 	bl	8001320 <HAL_ADC_Start>

 	  if (HAL_ADC_PollForConversion(&hadc1, 2000) == HAL_OK){
 8000240:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000244:	484f      	ldr	r0, [pc, #316]	@ (8000384 <main+0x1b8>)
 8000246:	f001 f901 	bl	800144c <HAL_ADC_PollForConversion>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d11a      	bne.n	8000286 <main+0xba>

 		  adc_val = HAL_ADC_GetValue(&hadc1);
 8000250:	484c      	ldr	r0, [pc, #304]	@ (8000384 <main+0x1b8>)
 8000252:	f001 f98a 	bl	800156a <HAL_ADC_GetValue>
 8000256:	4603      	mov	r3, r0
 8000258:	4a4b      	ldr	r2, [pc, #300]	@ (8000388 <main+0x1bc>)
 800025a:	6013      	str	r3, [r2, #0]

 		  if (adc_val > 0) {
 800025c:	4b4a      	ldr	r3, [pc, #296]	@ (8000388 <main+0x1bc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d00c      	beq.n	800027e <main+0xb2>
 			  voltage = VREFINT_CAL * 3000/adc_val; //Reference sheet page 453
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800026a:	fb02 f303 	mul.w	r3, r2, r3
 800026e:	461a      	mov	r2, r3
 8000270:	4b45      	ldr	r3, [pc, #276]	@ (8000388 <main+0x1bc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	fbb2 f3f3 	udiv	r3, r2, r3
 8000278:	4a44      	ldr	r2, [pc, #272]	@ (800038c <main+0x1c0>)
 800027a:	6013      	str	r3, [r2, #0]
 800027c:	e006      	b.n	800028c <main+0xc0>

 		  } else {
 			  voltage = 0;
 800027e:	4b43      	ldr	r3, [pc, #268]	@ (800038c <main+0x1c0>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	e002      	b.n	800028c <main+0xc0>
 		  }
 	  } else {
 		  voltage = 0;
 8000286:	4b41      	ldr	r3, [pc, #260]	@ (800038c <main+0x1c0>)
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 	  }

 	  HAL_ADC_Stop(&hadc1);
 800028c:	483d      	ldr	r0, [pc, #244]	@ (8000384 <main+0x1b8>)
 800028e:	f001 f8aa 	bl	80013e6 <HAL_ADC_Stop>
 	  //HAL_Delay(500);
 	  HAL_GPIO_WritePin(A_en_GPIO_Port, A_en_Pin, 0);
 8000292:	2200      	movs	r2, #0
 8000294:	2101      	movs	r1, #1
 8000296:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800029a:	f002 f983 	bl	80025a4 <HAL_GPIO_WritePin>



 	  //SHOW VOLTAGE ON INDICATORS
 	if (voltage > 2700) {
 800029e:	4b3b      	ldr	r3, [pc, #236]	@ (800038c <main+0x1c0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f640 228c 	movw	r2, #2700	@ 0xa8c
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d906      	bls.n	80002b8 <main+0xec>
 		HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 1);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2180      	movs	r1, #128	@ 0x80
 80002ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002b2:	f002 f977 	bl	80025a4 <HAL_GPIO_WritePin>
 80002b6:	e078      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2600) {
 80002b8:	4b34      	ldr	r3, [pc, #208]	@ (800038c <main+0x1c0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f640 2228 	movw	r2, #2600	@ 0xa28
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d905      	bls.n	80002d0 <main+0x104>
 		HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, 1);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2101      	movs	r1, #1
 80002c8:	4831      	ldr	r0, [pc, #196]	@ (8000390 <main+0x1c4>)
 80002ca:	f002 f96b 	bl	80025a4 <HAL_GPIO_WritePin>
 80002ce:	e06c      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2500) {
 80002d0:	4b2e      	ldr	r3, [pc, #184]	@ (800038c <main+0x1c0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80002d8:	4293      	cmp	r3, r2
 80002da:	d905      	bls.n	80002e8 <main+0x11c>
 		HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	2102      	movs	r1, #2
 80002e0:	482b      	ldr	r0, [pc, #172]	@ (8000390 <main+0x1c4>)
 80002e2:	f002 f95f 	bl	80025a4 <HAL_GPIO_WritePin>
 80002e6:	e060      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2400) {
 80002e8:	4b28      	ldr	r3, [pc, #160]	@ (800038c <main+0x1c0>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 80002f0:	d905      	bls.n	80002fe <main+0x132>
 		HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2104      	movs	r1, #4
 80002f6:	4826      	ldr	r0, [pc, #152]	@ (8000390 <main+0x1c4>)
 80002f8:	f002 f954 	bl	80025a4 <HAL_GPIO_WritePin>
 80002fc:	e055      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2300) {
 80002fe:	4b23      	ldr	r3, [pc, #140]	@ (800038c <main+0x1c0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8000306:	4293      	cmp	r3, r2
 8000308:	d906      	bls.n	8000318 <main+0x14c>
 		HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000310:	481f      	ldr	r0, [pc, #124]	@ (8000390 <main+0x1c4>)
 8000312:	f002 f947 	bl	80025a4 <HAL_GPIO_WritePin>
 8000316:	e048      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2200) {
 8000318:	4b1c      	ldr	r3, [pc, #112]	@ (800038c <main+0x1c0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f640 0298 	movw	r2, #2200	@ 0x898
 8000320:	4293      	cmp	r3, r2
 8000322:	d906      	bls.n	8000332 <main+0x166>
 		HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800032a:	4819      	ldr	r0, [pc, #100]	@ (8000390 <main+0x1c4>)
 800032c:	f002 f93a 	bl	80025a4 <HAL_GPIO_WritePin>
 8000330:	e03b      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2100) {
 8000332:	4b16      	ldr	r3, [pc, #88]	@ (800038c <main+0x1c0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f640 0234 	movw	r2, #2100	@ 0x834
 800033a:	4293      	cmp	r3, r2
 800033c:	d906      	bls.n	800034c <main+0x180>
 		HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000344:	4812      	ldr	r0, [pc, #72]	@ (8000390 <main+0x1c4>)
 8000346:	f002 f92d 	bl	80025a4 <HAL_GPIO_WritePin>
 800034a:	e02e      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 2000) {
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <main+0x1c0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000354:	d906      	bls.n	8000364 <main+0x198>
 		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 1);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035c:	480c      	ldr	r0, [pc, #48]	@ (8000390 <main+0x1c4>)
 800035e:	f002 f921 	bl	80025a4 <HAL_GPIO_WritePin>
 8000362:	e022      	b.n	80003aa <main+0x1de>
 	} else if (voltage > 1900) {
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <main+0x1c0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f240 726c 	movw	r2, #1900	@ 0x76c
 800036c:	4293      	cmp	r3, r2
 800036e:	d911      	bls.n	8000394 <main+0x1c8>
 		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 1);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000376:	4806      	ldr	r0, [pc, #24]	@ (8000390 <main+0x1c4>)
 8000378:	f002 f914 	bl	80025a4 <HAL_GPIO_WritePin>
 800037c:	e015      	b.n	80003aa <main+0x1de>
 800037e:	bf00      	nop
 8000380:	1fff75aa 	.word	0x1fff75aa
 8000384:	20000030 	.word	0x20000030
 8000388:	20000000 	.word	0x20000000
 800038c:	200000e8 	.word	0x200000e8
 8000390:	48000400 	.word	0x48000400
 	} else if (voltage > 1800) {
 8000394:	4b6a      	ldr	r3, [pc, #424]	@ (8000540 <main+0x374>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800039c:	d905      	bls.n	80003aa <main+0x1de>
 		HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, 1);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003a4:	4867      	ldr	r0, [pc, #412]	@ (8000544 <main+0x378>)
 80003a6:	f002 f8fd 	bl	80025a4 <HAL_GPIO_WritePin>



 	  //WRITE VOLTAGE TO CHIP
 	  //Prepare data
 	  b3 = (uint8_t)((voltage/1000) % 10); //(uint8_t)(voltage>>24);
 80003aa:	4b65      	ldr	r3, [pc, #404]	@ (8000540 <main+0x374>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a66      	ldr	r2, [pc, #408]	@ (8000548 <main+0x37c>)
 80003b0:	fba2 2303 	umull	r2, r3, r2, r3
 80003b4:	0999      	lsrs	r1, r3, #6
 80003b6:	4b65      	ldr	r3, [pc, #404]	@ (800054c <main+0x380>)
 80003b8:	fba3 2301 	umull	r2, r3, r3, r1
 80003bc:	08da      	lsrs	r2, r3, #3
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	1aca      	subs	r2, r1, r3
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	4b61      	ldr	r3, [pc, #388]	@ (8000550 <main+0x384>)
 80003cc:	701a      	strb	r2, [r3, #0]
 	  b2 = (uint8_t)((voltage/100) % 10); //(uint8_t)(voltage>>16);
 80003ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000540 <main+0x374>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a60      	ldr	r2, [pc, #384]	@ (8000554 <main+0x388>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	0959      	lsrs	r1, r3, #5
 80003da:	4b5c      	ldr	r3, [pc, #368]	@ (800054c <main+0x380>)
 80003dc:	fba3 2301 	umull	r2, r3, r3, r1
 80003e0:	08da      	lsrs	r2, r3, #3
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	1aca      	subs	r2, r1, r3
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	4b5a      	ldr	r3, [pc, #360]	@ (8000558 <main+0x38c>)
 80003f0:	701a      	strb	r2, [r3, #0]
 	  b1 = (uint8_t)((voltage/10) % 10); //(uint8_t)(voltage>>8);
 80003f2:	4b53      	ldr	r3, [pc, #332]	@ (8000540 <main+0x374>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a55      	ldr	r2, [pc, #340]	@ (800054c <main+0x380>)
 80003f8:	fba2 2303 	umull	r2, r3, r2, r3
 80003fc:	08d9      	lsrs	r1, r3, #3
 80003fe:	4b53      	ldr	r3, [pc, #332]	@ (800054c <main+0x380>)
 8000400:	fba3 2301 	umull	r2, r3, r3, r1
 8000404:	08da      	lsrs	r2, r3, #3
 8000406:	4613      	mov	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4413      	add	r3, r2
 800040c:	005b      	lsls	r3, r3, #1
 800040e:	1aca      	subs	r2, r1, r3
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	4b52      	ldr	r3, [pc, #328]	@ (800055c <main+0x390>)
 8000414:	701a      	strb	r2, [r3, #0]
 	  b0 = (uint8_t)(voltage % 10); //(uint8_t)(voltage>>0);
 8000416:	4b4a      	ldr	r3, [pc, #296]	@ (8000540 <main+0x374>)
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	4b4c      	ldr	r3, [pc, #304]	@ (800054c <main+0x380>)
 800041c:	fba3 2301 	umull	r2, r3, r3, r1
 8000420:	08da      	lsrs	r2, r3, #3
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	1aca      	subs	r2, r1, r3
 800042c:	b2d2      	uxtb	r2, r2
 800042e:	4b4c      	ldr	r3, [pc, #304]	@ (8000560 <main+0x394>)
 8000430:	701a      	strb	r2, [r3, #0]

 	  //Send data


 	 HAL_Delay(50);
 8000432:	2032      	movs	r0, #50	@ 0x32
 8000434:	f000 fbd8 	bl	8000be8 <HAL_Delay>
 	 // for (uint8_t i = 0; i<=11; ++i){
 	//	 NTP_Write_eeprom(0x00, i+3, text[i][0], text[i][1], text[i][2], text[i][3]);
 	//	 HAL_Delay(50);
 	 // }

 	HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800043e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000442:	f002 f8af 	bl	80025a4 <HAL_GPIO_WritePin>
 	  HAL_Delay(50);
 8000446:	2032      	movs	r0, #50	@ 0x32
 8000448:	f000 fbce 	bl	8000be8 <HAL_Delay>
 	  NTP_Write_eeprom(0x00, 0x0C, 0x73, 0x20, b3|0x30, 0x2E);
 800044c:	4b40      	ldr	r3, [pc, #256]	@ (8000550 <main+0x384>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000454:	b2db      	uxtb	r3, r3
 8000456:	222e      	movs	r2, #46	@ 0x2e
 8000458:	9201      	str	r2, [sp, #4]
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	2320      	movs	r3, #32
 800045e:	2273      	movs	r2, #115	@ 0x73
 8000460:	210c      	movs	r1, #12
 8000462:	2000      	movs	r0, #0
 8000464:	f000 f9e6 	bl	8000834 <NTP_Write_eeprom>
 	  HAL_Delay(50); //Delay necessary
 8000468:	2032      	movs	r0, #50	@ 0x32
 800046a:	f000 fbbd 	bl	8000be8 <HAL_Delay>
 	  NTP_Write_eeprom(0x00, 0x0D, b2|0x30, b1|0x30, 0x20, 0x56);
 800046e:	4b3a      	ldr	r3, [pc, #232]	@ (8000558 <main+0x38c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000476:	b2da      	uxtb	r2, r3
 8000478:	4b38      	ldr	r3, [pc, #224]	@ (800055c <main+0x390>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2156      	movs	r1, #86	@ 0x56
 8000484:	9101      	str	r1, [sp, #4]
 8000486:	2120      	movs	r1, #32
 8000488:	9100      	str	r1, [sp, #0]
 800048a:	210d      	movs	r1, #13
 800048c:	2000      	movs	r0, #0
 800048e:	f000 f9d1 	bl	8000834 <NTP_Write_eeprom>



 	  HAL_Delay(1000);
 8000492:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000496:	f000 fba7 	bl	8000be8 <HAL_Delay>




 	//Turn off indicators
	HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2180      	movs	r1, #128	@ 0x80
 800049e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004a2:	f002 f87f 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2101      	movs	r1, #1
 80004aa:	4826      	ldr	r0, [pc, #152]	@ (8000544 <main+0x378>)
 80004ac:	f002 f87a 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2102      	movs	r1, #2
 80004b4:	4823      	ldr	r0, [pc, #140]	@ (8000544 <main+0x378>)
 80004b6:	f002 f875 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2104      	movs	r1, #4
 80004be:	4821      	ldr	r0, [pc, #132]	@ (8000544 <main+0x378>)
 80004c0:	f002 f870 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004ca:	481e      	ldr	r0, [pc, #120]	@ (8000544 <main+0x378>)
 80004cc:	f002 f86a 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004d6:	481b      	ldr	r0, [pc, #108]	@ (8000544 <main+0x378>)
 80004d8:	f002 f864 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e2:	4818      	ldr	r0, [pc, #96]	@ (8000544 <main+0x378>)
 80004e4:	f002 f85e 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004ee:	4815      	ldr	r0, [pc, #84]	@ (8000544 <main+0x378>)
 80004f0:	f002 f858 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004fa:	4812      	ldr	r0, [pc, #72]	@ (8000544 <main+0x378>)
 80004fc:	f002 f852 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D0_GPIO_Port, D0_Pin, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000506:	480f      	ldr	r0, [pc, #60]	@ (8000544 <main+0x378>)
 8000508:	f002 f84c 	bl	80025a4 <HAL_GPIO_WritePin>



 	  //ENTER STOPMODE
	HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000516:	f002 f845 	bl	80025a4 <HAL_GPIO_WritePin>
 	HAL_SuspendTick();
 800051a:	f000 fb89 	bl	8000c30 <HAL_SuspendTick>
	HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
 800051e:	2001      	movs	r0, #1
 8000520:	f002 fd44 	bl	8002fac <HAL_PWREx_EnterSTOP2Mode>
 	HAL_ResumeTick();
 8000524:	f000 fb94 	bl	8000c50 <HAL_ResumeTick>

 	HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800052e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000532:	f002 f837 	bl	80025a4 <HAL_GPIO_WritePin>
 	HAL_ADC_MspInit(&hadc1);
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <main+0x398>)
 8000538:	f000 f9d2 	bl	80008e0 <HAL_ADC_MspInit>
 	  HAL_GPIO_WritePin(A_en_GPIO_Port, A_en_Pin, 1);
 800053c:	e674      	b.n	8000228 <main+0x5c>
 800053e:	bf00      	nop
 8000540:	200000e8 	.word	0x200000e8
 8000544:	48000400 	.word	0x48000400
 8000548:	10624dd3 	.word	0x10624dd3
 800054c:	cccccccd 	.word	0xcccccccd
 8000550:	200000ec 	.word	0x200000ec
 8000554:	51eb851f 	.word	0x51eb851f
 8000558:	200000ed 	.word	0x200000ed
 800055c:	200000ee 	.word	0x200000ee
 8000560:	20000004 	.word	0x20000004
 8000564:	20000030 	.word	0x20000030

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b096      	sub	sp, #88	@ 0x58
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2244      	movs	r2, #68	@ 0x44
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fe4e 	bl	8004218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	463b      	mov	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800058a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800058e:	f002 fcb7 	bl	8002f00 <HAL_PWREx_ControlVoltageScaling>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f000 f978 	bl	800088c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800059c:	2310      	movs	r3, #16
 800059e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a8:	2360      	movs	r3, #96	@ 0x60
 80005aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fd25 	bl	8003004 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005c0:	f000 f964 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 f925 	bl	800382c <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e8:	f000 f950 	bl	800088c <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3758      	adds	r7, #88	@ 0x58
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800060c:	4a29      	ldr	r2, [pc, #164]	@ (80006b4 <MX_ADC1_Init+0xc0>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000610:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000612:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800062c:	2204      	movs	r2, #4
 800062e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000632:	2200      	movs	r2, #0
 8000634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000638:	2200      	movs	r2, #0
 800063a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000652:	2200      	movs	r2, #0
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 8000666:	2200      	movs	r2, #0
 8000668:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800066e:	f000 fd15 	bl	800109c <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000678:	f000 f908 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800067c:	4b0e      	ldr	r3, [pc, #56]	@ (80006b8 <MX_ADC1_Init+0xc4>)
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2306      	movs	r3, #6
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000688:	237f      	movs	r3, #127	@ 0x7f
 800068a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068c:	2304      	movs	r3, #4
 800068e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000694:	463b      	mov	r3, r7
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_ADC1_Init+0xbc>)
 800069a:	f000 ff73 	bl	8001584 <HAL_ADC_ConfigChannel>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80006a4:	f000 f8f2 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000030 	.word	0x20000030
 80006b4:	50040000 	.word	0x50040000
 80006b8:	80000001 	.word	0x80000001

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f001 ff8f 	bl	800261a <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 f8c3 	bl	800088c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f002 fb53 	bl	8002db4 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f8ba 	bl	800088c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f002 fb95 	bl	8002e4a <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f8b1 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000094 	.word	0x20000094
 8000734:	40005400 	.word	0x40005400
 8000738:	00100d14 	.word	0x00100d14

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a34      	ldr	r2, [pc, #208]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <MX_GPIO_Init+0xec>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a2e      	ldr	r2, [pc, #184]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a28      	ldr	r2, [pc, #160]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <MX_GPIO_Init+0xec>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_en_Pin|D9_Pin|HPD_Pin|NFC_Vcc_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f640 1181 	movw	r1, #2433	@ 0x981
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a4:	f001 fefe 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D8_Pin|D7_Pin|D6_Pin|D5_Pin
 80007a8:	2200      	movs	r2, #0
 80007aa:	f64f 4107 	movw	r1, #64519	@ 0xfc07
 80007ae:	481f      	ldr	r0, [pc, #124]	@ (800082c <MX_GPIO_Init+0xf0>)
 80007b0:	f001 fef8 	bl	80025a4 <HAL_GPIO_WritePin>
                          |D4_Pin|D3_Pin|D2_Pin|D1_Pin
                          |D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : ED_Pin */
  GPIO_InitStruct.Pin = ED_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ED_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4819      	ldr	r0, [pc, #100]	@ (8000830 <MX_GPIO_Init+0xf4>)
 80007cc:	f001 fd70 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_en_Pin D9_Pin HPD_Pin NFC_Vcc_Pin */
  GPIO_InitStruct.Pin = A_en_Pin|D9_Pin|HPD_Pin|NFC_Vcc_Pin;
 80007d0:	f640 1381 	movw	r3, #2433	@ 0x981
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ec:	f001 fd60 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D8_Pin D7_Pin D6_Pin D5_Pin
                           D4_Pin D3_Pin D2_Pin D1_Pin
                           D0_Pin */
  GPIO_InitStruct.Pin = D8_Pin|D7_Pin|D6_Pin|D5_Pin
 80007f0:	f64f 4307 	movw	r3, #64519	@ 0xfc07
 80007f4:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D3_Pin|D2_Pin|D1_Pin
                          |D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	4808      	ldr	r0, [pc, #32]	@ (800082c <MX_GPIO_Init+0xf0>)
 800080a:	f001 fd51 	bl	80022b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2028      	movs	r0, #40	@ 0x28
 8000814:	f001 fd15 	bl	8002242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000818:	2028      	movs	r0, #40	@ 0x28
 800081a:	f001 fd2e 	bl	800227a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	48000400 	.word	0x48000400
 8000830:	48000800 	.word	0x48000800

08000834 <NTP_Write_eeprom>:

/* USER CODE BEGIN 4 */

void NTP_Write_eeprom(uint8_t BL_AD1, uint8_t BL_AD0, uint8_t DATA0, uint8_t DATA1, uint8_t DATA2, uint8_t DATA3){
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b087      	sub	sp, #28
 8000838:	af02      	add	r7, sp, #8
 800083a:	4604      	mov	r4, r0
 800083c:	4608      	mov	r0, r1
 800083e:	4611      	mov	r1, r2
 8000840:	461a      	mov	r2, r3
 8000842:	4623      	mov	r3, r4
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	4603      	mov	r3, r0
 8000848:	71bb      	strb	r3, [r7, #6]
 800084a:	460b      	mov	r3, r1
 800084c:	717b      	strb	r3, [r7, #5]
 800084e:	4613      	mov	r3, r2
 8000850:	713b      	strb	r3, [r7, #4]

	uint8_t tx_buff[6] = {BL_AD1, BL_AD0, DATA0, DATA1, DATA2, DATA3};
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	723b      	strb	r3, [r7, #8]
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	727b      	strb	r3, [r7, #9]
 800085a:	797b      	ldrb	r3, [r7, #5]
 800085c:	72bb      	strb	r3, [r7, #10]
 800085e:	793b      	ldrb	r3, [r7, #4]
 8000860:	72fb      	strb	r3, [r7, #11]
 8000862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000866:	733b      	strb	r3, [r7, #12]
 8000868:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800086c:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, NTP_ADDRESS, tx_buff, 6, 2);
 800086e:	f107 0208 	add.w	r2, r7, #8
 8000872:	2302      	movs	r3, #2
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2306      	movs	r3, #6
 8000878:	21a8      	movs	r1, #168	@ 0xa8
 800087a:	4803      	ldr	r0, [pc, #12]	@ (8000888 <NTP_Write_eeprom+0x54>)
 800087c:	f001 ff68 	bl	8002750 <HAL_I2C_Master_Transmit>

}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	20000094 	.word	0x20000094

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09a      	sub	sp, #104	@ 0x68
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	225c      	movs	r2, #92	@ 0x5c
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fc91 	bl	8004218 <memset>
  if(hadc->Instance==ADC1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <HAL_ADC_MspInit+0x80>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d12a      	bne.n	8000956 <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000904:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000906:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800090a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800090c:	2301      	movs	r3, #1
 800090e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000914:	2310      	movs	r3, #16
 8000916:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000918:	2307      	movs	r3, #7
 800091a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000924:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4618      	mov	r0, r3
 8000930:	f003 f968 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800093a:	f7ff ffa7 	bl	800088c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_ADC_MspInit+0x84>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000942:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <HAL_ADC_MspInit+0x84>)
 8000944:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094a:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <HAL_ADC_MspInit+0x84>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000956:	bf00      	nop
 8000958:	3768      	adds	r7, #104	@ 0x68
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	50040000 	.word	0x50040000
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b0a0      	sub	sp, #128	@ 0x80
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	225c      	movs	r2, #92	@ 0x5c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fc45 	bl	8004218 <memset>
  if(hi2c->Instance==I2C1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1f      	ldr	r2, [pc, #124]	@ (8000a10 <HAL_I2C_MspInit+0xa8>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d137      	bne.n	8000a08 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800099c:	2300      	movs	r3, #0
 800099e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 f92d 	bl	8003c04 <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009b0:	f7ff ff6c 	bl	800088c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_I2C_MspInit+0xac>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b8:	4a16      	ldr	r2, [pc, #88]	@ (8000a14 <HAL_I2C_MspInit+0xac>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_I2C_MspInit+0xac>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009cc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d2:	2312      	movs	r3, #18
 80009d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009de:	2304      	movs	r3, #4
 80009e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f001 fc60 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_I2C_MspInit+0xac>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_I2C_MspInit+0xac>)
 80009f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_I2C_MspInit+0xac>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a08:	bf00      	nop
 8000a0a:	3780      	adds	r7, #128	@ 0x80
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40021000 	.word	0x40021000

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <MemManage_Handler+0x4>

08000a30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6e:	f000 f89b 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ED_Pin);
 8000a7a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a7e:	f001 fda9 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	@ (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	@ (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	@ (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ada:	f003 fba5 	bl	8004228 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fb75 	bl	80001cc <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000af0:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 8000af4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000af8:	200000f4 	.word	0x200000f4

08000afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_IRQHandler>

08000afe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f001 fb8f 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f80e 	bl	8000b30 <HAL_InitTick>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e001      	b.n	8000b24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b20:	f7ff feba 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b24:	79fb      	ldrb	r3, [r7, #7]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_InitTick+0x6c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d023      	beq.n	8000b8c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <HAL_InitTick+0x70>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <HAL_InitTick+0x6c>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 fb9b 	bl	8002296 <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10f      	bne.n	8000b86 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b0f      	cmp	r3, #15
 8000b6a:	d809      	bhi.n	8000b80 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295
 8000b74:	f001 fb65 	bl	8002242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba4 <HAL_InitTick+0x74>)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e007      	b.n	8000b90 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e004      	b.n	8000b90 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	e001      	b.n	8000b90 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	2000000c 	.word	0x2000000c

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000010 	.word	0x20000010
 8000bcc:	200000f0 	.word	0x200000f0

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	200000f0 	.word	0x200000f0

08000be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf0:	f7ff ffee 	bl	8000bd0 <HAL_GetTick>
 8000bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d005      	beq.n	8000c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_Delay+0x44>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c0e:	bf00      	nop
 8000c10:	f7ff ffde 	bl	8000bd0 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d8f7      	bhi.n	8000c10 <HAL_Delay+0x28>
  {
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000010 	.word	0x20000010

08000c30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_SuspendTick+0x1c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <HAL_SuspendTick+0x1c>)
 8000c3a:	f023 0302 	bic.w	r3, r3, #2
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_ResumeTick+0x1c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_ResumeTick+0x1c>)
 8000c5a:	f043 0302 	orr.w	r3, r3, #2
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	609a      	str	r2, [r3, #8]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	609a      	str	r2, [r3, #8]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b087      	sub	sp, #28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3360      	adds	r3, #96	@ 0x60
 8000cea:	461a      	mov	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <LL_ADC_SetOffset+0x44>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	4313      	orrs	r3, r2
 8000d08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d10:	bf00      	nop
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	03fff000 	.word	0x03fff000

08000d20 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3360      	adds	r3, #96	@ 0x60
 8000d2e:	461a      	mov	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	3360      	adds	r3, #96	@ 0x60
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	431a      	orrs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d76:	bf00      	nop
 8000d78:	371c      	adds	r7, #28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3330      	adds	r3, #48	@ 0x30
 8000db8:	461a      	mov	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	4413      	add	r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	211f      	movs	r1, #31
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	401a      	ands	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	0e9b      	lsrs	r3, r3, #26
 8000de0:	f003 011f 	and.w	r1, r3, #31
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f003 031f 	and.w	r3, r3, #31
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	431a      	orrs	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000df4:	bf00      	nop
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3314      	adds	r3, #20
 8000e10:	461a      	mov	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	0e5b      	lsrs	r3, r3, #25
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	0d1b      	lsrs	r3, r3, #20
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	2107      	movs	r1, #7
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	0d1b      	lsrs	r3, r3, #20
 8000e3a:	f003 031f 	and.w	r3, r3, #31
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e70:	43db      	mvns	r3, r3
 8000e72:	401a      	ands	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0318 	and.w	r3, r3, #24
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e7c:	40d9      	lsrs	r1, r3
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	400b      	ands	r3, r1
 8000e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e86:	431a      	orrs	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e8e:	bf00      	nop
 8000e90:	3714      	adds	r7, #20
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	0007ffff 	.word	0x0007ffff

08000ea0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000eb0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6093      	str	r3, [r2, #8]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ed8:	d101      	bne.n	8000ede <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000efc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000f28:	d101      	bne.n	8000f2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e000      	b.n	8000f30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f50:	f043 0201 	orr.w	r2, r3, #1
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f78:	f043 0202 	orr.w	r2, r3, #2
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <LL_ADC_IsEnabled+0x18>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <LL_ADC_IsEnabled+0x1a>
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d101      	bne.n	8000fca <LL_ADC_IsDisableOngoing+0x18>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <LL_ADC_IsDisableOngoing+0x1a>
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fec:	f043 0204 	orr.w	r2, r3, #4
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001014:	f043 0210 	orr.w	r2, r3, #16
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0304 	and.w	r3, r3, #4
 8001038:	2b04      	cmp	r3, #4
 800103a:	d101      	bne.n	8001040 <LL_ADC_REG_IsConversionOngoing+0x18>
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800105e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001062:	f043 0220 	orr.w	r2, r3, #32
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 0308 	and.w	r3, r3, #8
 8001086:	2b08      	cmp	r3, #8
 8001088:	d101      	bne.n	800108e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e126      	b.n	8001304 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d109      	bne.n	80010d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff fc0b 	bl	80008e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fef1 	bl	8000ec4 <LL_ADC_IsDeepPowerDownEnabled>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d004      	beq.n	80010f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fed7 	bl	8000ea0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff0c 	bl	8000f14 <LL_ADC_IsInternalRegulatorEnabled>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d115      	bne.n	800112e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fef0 	bl	8000eec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800110c:	4b7f      	ldr	r3, [pc, #508]	@ (800130c <HAL_ADC_Init+0x270>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	099b      	lsrs	r3, r3, #6
 8001112:	4a7f      	ldr	r2, [pc, #508]	@ (8001310 <HAL_ADC_Init+0x274>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	099b      	lsrs	r3, r3, #6
 800111a:	3301      	adds	r3, #1
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001120:	e002      	b.n	8001128 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3b01      	subs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f9      	bne.n	8001122 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff feee 	bl	8000f14 <LL_ADC_IsInternalRegulatorEnabled>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10d      	bne.n	800115a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001142:	f043 0210 	orr.w	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff62 	bl	8001028 <LL_ADC_REG_IsConversionOngoing>
 8001164:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 80bf 	bne.w	80012f2 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 80bb 	bne.w	80012f2 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001180:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001184:	f043 0202 	orr.w	r2, r3, #2
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fefb 	bl	8000f8c <LL_ADC_IsEnabled>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10b      	bne.n	80011b4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800119c:	485d      	ldr	r0, [pc, #372]	@ (8001314 <HAL_ADC_Init+0x278>)
 800119e:	f7ff fef5 	bl	8000f8c <LL_ADC_IsEnabled>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	4619      	mov	r1, r3
 80011ae:	485a      	ldr	r0, [pc, #360]	@ (8001318 <HAL_ADC_Init+0x27c>)
 80011b0:	f7ff fd5e 	bl	8000c70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7e5b      	ldrb	r3, [r3, #25]
 80011b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d106      	bne.n	80011f0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e6:	3b01      	subs	r3, #1
 80011e8:	045b      	lsls	r3, r3, #17
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d009      	beq.n	800120c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011fc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	4b42      	ldr	r3, [pc, #264]	@ (800131c <HAL_ADC_Init+0x280>)
 8001214:	4013      	ands	r3, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	69b9      	ldr	r1, [r7, #24]
 800121c:	430b      	orrs	r3, r1
 800121e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff26 	bl	8001076 <LL_ADC_INJ_IsConversionOngoing>
 800122a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d13d      	bne.n	80012ae <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d13a      	bne.n	80012ae <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800123c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001244:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001254:	f023 0302 	bic.w	r3, r3, #2
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	69b9      	ldr	r1, [r7, #24]
 800125e:	430b      	orrs	r3, r1
 8001260:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001268:	2b01      	cmp	r3, #1
 800126a:	d118      	bne.n	800129e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001276:	f023 0304 	bic.w	r3, r3, #4
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001282:	4311      	orrs	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001288:	4311      	orrs	r1, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800128e:	430a      	orrs	r2, r1
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0201 	orr.w	r2, r2, #1
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	e007      	b.n	80012ae <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d10c      	bne.n	80012d0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	f023 010f 	bic.w	r1, r3, #15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ce:	e007      	b.n	80012e0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 020f 	bic.w	r2, r2, #15
 80012de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e4:	f023 0303 	bic.w	r3, r3, #3
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80012f0:	e007      	b.n	8001302 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f6:	f043 0210 	orr.w	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001302:	7ffb      	ldrb	r3, [r7, #31]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3720      	adds	r7, #32
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000008 	.word	0x20000008
 8001310:	053e2d63 	.word	0x053e2d63
 8001314:	50040000 	.word	0x50040000
 8001318:	50040300 	.word	0x50040300
 800131c:	fff0c007 	.word	0xfff0c007

08001320 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe7b 	bl	8001028 <LL_ADC_REG_IsConversionOngoing>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d14f      	bne.n	80013d8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800133e:	2b01      	cmp	r3, #1
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Start+0x26>
 8001342:	2302      	movs	r3, #2
 8001344:	e04b      	b.n	80013de <HAL_ADC_Start+0xbe>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fdb6 	bl	8001ec0 <ADC_Enable>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d137      	bne.n	80013ce <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001362:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001366:	f023 0301 	bic.w	r3, r3, #1
 800136a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001376:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800137a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800137e:	d106      	bne.n	800138e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	f023 0206 	bic.w	r2, r3, #6
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	659a      	str	r2, [r3, #88]	@ 0x58
 800138c:	e002      	b.n	8001394 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	221c      	movs	r2, #28
 800139a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80013ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe06 	bl	8000fd8 <LL_ADC_REG_StartConversion>
 80013cc:	e006      	b.n	80013dc <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80013d6:	e001      	b.n	80013dc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013d8:	2302      	movs	r3, #2
 80013da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Stop+0x16>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e023      	b.n	8001444 <HAL_ADC_Stop+0x5e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001404:	2103      	movs	r1, #3
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fc9e 	bl	8001d48 <ADC_ConversionStop>
 800140c:	4603      	mov	r3, r0
 800140e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d111      	bne.n	800143a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fdd8 	bl	8001fcc <ADC_Disable>
 800141c:	4603      	mov	r3, r0
 800141e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d109      	bne.n	800143a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800142a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b08      	cmp	r3, #8
 800145c:	d102      	bne.n	8001464 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800145e:	2308      	movs	r3, #8
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e010      	b.n	8001486 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001476:	f043 0220 	orr.w	r2, r3, #32
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e06f      	b.n	8001562 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001482:	2304      	movs	r3, #4
 8001484:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001486:	f7ff fba3 	bl	8000bd0 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800148c:	e021      	b.n	80014d2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d01d      	beq.n	80014d2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001496:	f7ff fb9b 	bl	8000bd0 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d302      	bcc.n	80014ac <HAL_ADC_PollForConversion+0x60>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d112      	bne.n	80014d2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10b      	bne.n	80014d2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014be:	f043 0204 	orr.w	r2, r3, #4
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e047      	b.n	8001562 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	4013      	ands	r3, r2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0d6      	beq.n	800148e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc46 	bl	8000d82 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d01c      	beq.n	8001536 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e5b      	ldrb	r3, [r3, #25]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d118      	bne.n	8001536 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b08      	cmp	r3, #8
 8001510:	d111      	bne.n	8001536 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001516:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152e:	f043 0201 	orr.w	r2, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b08      	cmp	r3, #8
 8001542:	d104      	bne.n	800154e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2208      	movs	r2, #8
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e008      	b.n	8001560 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	220c      	movs	r2, #12
 800155e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0b6      	sub	sp, #216	@ 0xd8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x22>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e3bb      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x79a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2201      	movs	r2, #1
 80015aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fd38 	bl	8001028 <LL_ADC_REG_IsConversionOngoing>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 83a0 	bne.w	8001d00 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d824      	bhi.n	800161a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	3b02      	subs	r3, #2
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d81b      	bhi.n	8001612 <HAL_ADC_ConfigChannel+0x8e>
 80015da:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <HAL_ADC_ConfigChannel+0x5c>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	080015f9 	.word	0x080015f9
 80015e8:	08001601 	.word	0x08001601
 80015ec:	08001609 	.word	0x08001609
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80015f0:	230c      	movs	r3, #12
 80015f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015f6:	e010      	b.n	800161a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80015f8:	2312      	movs	r3, #18
 80015fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80015fe:	e00c      	b.n	800161a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001600:	2318      	movs	r3, #24
 8001602:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001606:	e008      	b.n	800161a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001610:	e003      	b.n	800161a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001612:	2306      	movs	r3, #6
 8001614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001618:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001628:	f7ff fbbe 	bl	8000da8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fcf9 	bl	8001028 <LL_ADC_REG_IsConversionOngoing>
 8001636:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd19 	bl	8001076 <LL_ADC_INJ_IsConversionOngoing>
 8001644:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 81a4 	bne.w	800199a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001656:	2b00      	cmp	r3, #0
 8001658:	f040 819f 	bne.w	800199a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	461a      	mov	r2, r3
 800166a:	f7ff fbc9 	bl	8000e00 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b04      	cmp	r3, #4
 800168e:	d00a      	beq.n	80016a6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6919      	ldr	r1, [r3, #16]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80016a0:	f7ff fb1a 	bl	8000cd8 <LL_ADC_SetOffset>
 80016a4:	e179      	b.n	800199a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fb37 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10a      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x14e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb2c 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	0e9b      	lsrs	r3, r3, #26
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	e01e      	b.n	8001710 <HAL_ADC_ConfigChannel+0x18c>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fb21 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001700:	2320      	movs	r3, #32
 8001702:	e004      	b.n	800170e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001704:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001708:	fab3 f383 	clz	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001718:	2b00      	cmp	r3, #0
 800171a:	d105      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1a4>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0e9b      	lsrs	r3, r3, #26
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	e018      	b.n	800175a <HAL_ADC_ConfigChannel+0x1d6>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800173c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001740:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800174c:	2320      	movs	r3, #32
 800174e:	e004      	b.n	800175a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800175a:	429a      	cmp	r2, r3
 800175c:	d106      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff faf0 	bl	8000d4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fad4 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10a      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x214>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fac9 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	0e9b      	lsrs	r3, r3, #26
 8001792:	f003 021f 	and.w	r2, r3, #31
 8001796:	e01e      	b.n	80017d6 <HAL_ADC_ConfigChannel+0x252>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fabe 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80017b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80017be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80017c6:	2320      	movs	r3, #32
 80017c8:	e004      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80017ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_ADC_ConfigChannel+0x26a>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0e9b      	lsrs	r3, r3, #26
 80017e8:	f003 031f 	and.w	r3, r3, #31
 80017ec:	e018      	b.n	8001820 <HAL_ADC_ConfigChannel+0x29c>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001802:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001806:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800180a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001812:	2320      	movs	r3, #32
 8001814:	e004      	b.n	8001820 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001816:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001820:	429a      	cmp	r2, r3
 8001822:	d106      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa8d 	bl	8000d4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2102      	movs	r1, #2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fa71 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10a      	bne.n	800185e <HAL_ADC_ConfigChannel+0x2da>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2102      	movs	r1, #2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fa66 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	e01e      	b.n	800189c <HAL_ADC_ConfigChannel+0x318>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2102      	movs	r1, #2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fa5b 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001870:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800187c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001880:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800188c:	2320      	movs	r3, #32
 800188e:	e004      	b.n	800189a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001890:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d105      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x330>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	0e9b      	lsrs	r3, r3, #26
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	e014      	b.n	80018de <HAL_ADC_ConfigChannel+0x35a>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80018bc:	fa93 f3a3 	rbit	r3, r3
 80018c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80018c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80018c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80018c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80018d0:	2320      	movs	r3, #32
 80018d2:	e004      	b.n	80018de <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80018d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80018de:	429a      	cmp	r2, r3
 80018e0:	d106      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2200      	movs	r2, #0
 80018e8:	2102      	movs	r1, #2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fa2e 	bl	8000d4c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2103      	movs	r1, #3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fa12 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10a      	bne.n	800191c <HAL_ADC_ConfigChannel+0x398>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2103      	movs	r1, #3
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fa07 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	0e9b      	lsrs	r3, r3, #26
 8001916:	f003 021f 	and.w	r2, r3, #31
 800191a:	e017      	b.n	800194c <HAL_ADC_ConfigChannel+0x3c8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2103      	movs	r1, #3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f9fc 	bl	8000d20 <LL_ADC_GetOffsetChannel>
 8001928:	4603      	mov	r3, r0
 800192a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001936:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001938:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800193e:	2320      	movs	r3, #32
 8001940:	e003      	b.n	800194a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001954:	2b00      	cmp	r3, #0
 8001956:	d105      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x3e0>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	0e9b      	lsrs	r3, r3, #26
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	e011      	b.n	8001988 <HAL_ADC_ConfigChannel+0x404>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001974:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800197c:	2320      	movs	r3, #32
 800197e:	e003      	b.n	8001988 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001980:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001988:	429a      	cmp	r2, r3
 800198a:	d106      	bne.n	800199a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2200      	movs	r2, #0
 8001992:	2103      	movs	r1, #3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f9d9 	bl	8000d4c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff faf4 	bl	8000f8c <LL_ADC_IsEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 8140 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f7ff fa4d 	bl	8000e58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	4a8f      	ldr	r2, [pc, #572]	@ (8001c00 <HAL_ADC_ConfigChannel+0x67c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	f040 8131 	bne.w	8001c2c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10b      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x46e>
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0e9b      	lsrs	r3, r3, #26
 80019e0:	3301      	adds	r3, #1
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	2b09      	cmp	r3, #9
 80019e8:	bf94      	ite	ls
 80019ea:	2301      	movls	r3, #1
 80019ec:	2300      	movhi	r3, #0
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	e019      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x4a2>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019fa:	fa93 f3a3 	rbit	r3, r3
 80019fe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001a04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001a0a:	2320      	movs	r3, #32
 8001a0c:	e003      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	bf94      	ite	ls
 8001a20:	2301      	movls	r3, #1
 8001a22:	2300      	movhi	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d079      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d107      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x4c2>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0e9b      	lsrs	r3, r3, #26
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	069b      	lsls	r3, r3, #26
 8001a40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a44:	e015      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x4ee>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a4e:	fa93 f3a3 	rbit	r3, r3
 8001a52:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a56:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001a5e:	2320      	movs	r3, #32
 8001a60:	e003      	b.n	8001a6a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a64:	fab3 f383 	clz	r3, r3
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	069b      	lsls	r3, r3, #26
 8001a6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x50e>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0e9b      	lsrs	r3, r3, #26
 8001a84:	3301      	adds	r3, #1
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	e017      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x53e>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001aaa:	2320      	movs	r3, #32
 8001aac:	e003      	b.n	8001ab6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2101      	movs	r1, #1
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	ea42 0103 	orr.w	r1, r2, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x564>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	0e9b      	lsrs	r3, r3, #26
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f003 021f 	and.w	r2, r3, #31
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	051b      	lsls	r3, r3, #20
 8001ae6:	e018      	b.n	8001b1a <HAL_ADC_ConfigChannel+0x596>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001b00:	2320      	movs	r3, #32
 8001b02:	e003      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f003 021f 	and.w	r2, r3, #31
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	e081      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x5b6>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0e9b      	lsrs	r3, r3, #26
 8001b30:	3301      	adds	r3, #1
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b38:	e015      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x5e2>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b42:	fa93 f3a3 	rbit	r3, r3
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e003      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	069b      	lsls	r3, r3, #26
 8001b62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x602>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0e9b      	lsrs	r3, r3, #26
 8001b78:	3301      	adds	r3, #1
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	e017      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x632>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	61bb      	str	r3, [r7, #24]
  return result;
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e003      	b.n	8001baa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	3301      	adds	r3, #1
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	ea42 0103 	orr.w	r1, r2, r3
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10d      	bne.n	8001be2 <HAL_ADC_ConfigChannel+0x65e>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f003 021f 	and.w	r2, r3, #31
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b1e      	subs	r3, #30
 8001bda:	051b      	lsls	r3, r3, #20
 8001bdc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001be0:	e01e      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x69c>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  return result;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001bfa:	2320      	movs	r3, #32
 8001bfc:	e006      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x688>
 8001bfe:	bf00      	nop
 8001c00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fab3 f383 	clz	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f003 021f 	and.w	r2, r3, #31
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	3b1e      	subs	r3, #30
 8001c1a:	051b      	lsls	r3, r3, #20
 8001c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7ff f8ea 	bl	8000e00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_ADC_ConfigChannel+0x7a4>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d06c      	beq.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c38:	483c      	ldr	r0, [pc, #240]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7a8>)
 8001c3a:	f7ff f83f 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 8001c3e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a3a      	ldr	r2, [pc, #232]	@ (8001d30 <HAL_ADC_ConfigChannel+0x7ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d127      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d121      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a35      	ldr	r2, [pc, #212]	@ (8001d34 <HAL_ADC_ConfigChannel+0x7b0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d157      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	482f      	ldr	r0, [pc, #188]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7a8>)
 8001c6e:	f7ff f812 	bl	8000c96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c72:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <HAL_ADC_ConfigChannel+0x7b4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	099b      	lsrs	r3, r3, #6
 8001c78:	4a30      	ldr	r2, [pc, #192]	@ (8001d3c <HAL_ADC_ConfigChannel+0x7b8>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c8c:	e002      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f9      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c9a:	e03a      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a27      	ldr	r2, [pc, #156]	@ (8001d40 <HAL_ADC_ConfigChannel+0x7bc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d113      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d34 <HAL_ADC_ConfigChannel+0x7b0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d12a      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4819      	ldr	r0, [pc, #100]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7a8>)
 8001cc8:	f7fe ffe5 	bl	8000c96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ccc:	e021      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d44 <HAL_ADC_ConfigChannel+0x7c0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d11c      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d116      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a12      	ldr	r2, [pc, #72]	@ (8001d34 <HAL_ADC_ConfigChannel+0x7b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d111      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	@ (8001d2c <HAL_ADC_ConfigChannel+0x7a8>)
 8001cfa:	f7fe ffcc 	bl	8000c96 <LL_ADC_SetCommonPathInternalCh>
 8001cfe:	e008      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d1a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	37d8      	adds	r7, #216	@ 0xd8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	80080000 	.word	0x80080000
 8001d2c:	50040300 	.word	0x50040300
 8001d30:	c7520000 	.word	0xc7520000
 8001d34:	50040000 	.word	0x50040000
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	053e2d63 	.word	0x053e2d63
 8001d40:	cb840000 	.word	0xcb840000
 8001d44:	80000001 	.word	0x80000001

08001d48 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f962 	bl	8001028 <LL_ADC_REG_IsConversionOngoing>
 8001d64:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f983 	bl	8001076 <LL_ADC_INJ_IsConversionOngoing>
 8001d70:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d103      	bne.n	8001d80 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8098 	beq.w	8001eb0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02a      	beq.n	8001de4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7e5b      	ldrb	r3, [r3, #25]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d126      	bne.n	8001de4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d122      	bne.n	8001de4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001da2:	e014      	b.n	8001dce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4a45      	ldr	r2, [pc, #276]	@ (8001ebc <ADC_ConversionStop+0x174>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d90d      	bls.n	8001dc8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e074      	b.n	8001eb2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd8:	2b40      	cmp	r3, #64	@ 0x40
 8001dda:	d1e3      	bne.n	8001da4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2240      	movs	r2, #64	@ 0x40
 8001de2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d014      	beq.n	8001e14 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f91a 	bl	8001028 <LL_ADC_REG_IsConversionOngoing>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f8d7 	bl	8000fb2 <LL_ADC_IsDisableOngoing>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d104      	bne.n	8001e14 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f8f6 	bl	8001000 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d014      	beq.n	8001e44 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f929 	bl	8001076 <LL_ADC_INJ_IsConversionOngoing>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00c      	beq.n	8001e44 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f8bf 	bl	8000fb2 <LL_ADC_IsDisableOngoing>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d104      	bne.n	8001e44 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f905 	bl	800104e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d005      	beq.n	8001e56 <ADC_ConversionStop+0x10e>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d105      	bne.n	8001e5c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001e50:	230c      	movs	r3, #12
 8001e52:	617b      	str	r3, [r7, #20]
        break;
 8001e54:	e005      	b.n	8001e62 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001e56:	2308      	movs	r3, #8
 8001e58:	617b      	str	r3, [r7, #20]
        break;
 8001e5a:	e002      	b.n	8001e62 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	617b      	str	r3, [r7, #20]
        break;
 8001e60:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001e62:	f7fe feb5 	bl	8000bd0 <HAL_GetTick>
 8001e66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e68:	e01b      	b.n	8001ea2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001e6a:	f7fe feb1 	bl	8000bd0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d914      	bls.n	8001ea2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00d      	beq.n	8001ea2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	f043 0210 	orr.w	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f043 0201 	orr.w	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e007      	b.n	8001eb2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1dc      	bne.n	8001e6a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	a33fffff 	.word	0xa33fffff

08001ec0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff f85b 	bl	8000f8c <LL_ADC_IsEnabled>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d169      	bne.n	8001fb0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	4b36      	ldr	r3, [pc, #216]	@ (8001fbc <ADC_Enable+0xfc>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00d      	beq.n	8001f06 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eee:	f043 0210 	orr.w	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e055      	b.n	8001fb2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f816 	bl	8000f3c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f10:	482b      	ldr	r0, [pc, #172]	@ (8001fc0 <ADC_Enable+0x100>)
 8001f12:	f7fe fed3 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 8001f16:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f20:	4b28      	ldr	r3, [pc, #160]	@ (8001fc4 <ADC_Enable+0x104>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	4a28      	ldr	r2, [pc, #160]	@ (8001fc8 <ADC_Enable+0x108>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	099b      	lsrs	r3, r3, #6
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f3a:	e002      	b.n	8001f42 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f9      	bne.n	8001f3c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fe42 	bl	8000bd0 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f4e:	e028      	b.n	8001fa2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f819 	bl	8000f8c <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d104      	bne.n	8001f6a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe ffe9 	bl	8000f3c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f6a:	f7fe fe31 	bl	8000bd0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d914      	bls.n	8001fa2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d00d      	beq.n	8001fa2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8a:	f043 0210 	orr.w	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e007      	b.n	8001fb2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d1cf      	bne.n	8001f50 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	8000003f 	.word	0x8000003f
 8001fc0:	50040300 	.word	0x50040300
 8001fc4:	20000008 	.word	0x20000008
 8001fc8:	053e2d63 	.word	0x053e2d63

08001fcc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe ffea 	bl	8000fb2 <LL_ADC_IsDisableOngoing>
 8001fde:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe ffd1 	bl	8000f8c <LL_ADC_IsEnabled>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d047      	beq.n	8002080 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d144      	bne.n	8002080 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030d 	and.w	r3, r3, #13
 8002000:	2b01      	cmp	r3, #1
 8002002:	d10c      	bne.n	800201e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe ffab 	bl	8000f64 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2203      	movs	r2, #3
 8002014:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002016:	f7fe fddb 	bl	8000bd0 <HAL_GetTick>
 800201a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800201c:	e029      	b.n	8002072 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002022:	f043 0210 	orr.w	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f043 0201 	orr.w	r2, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e023      	b.n	8002082 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800203a:	f7fe fdc9 	bl	8000bd0 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d914      	bls.n	8002072 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00d      	beq.n	8002072 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800205a:	f043 0210 	orr.w	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e007      	b.n	8002082 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1dc      	bne.n	800203a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	@ (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	@ (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	@ (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff29 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff3e 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff31 	bl	80020f0 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	e154      	b.n	800256a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	2101      	movs	r1, #1
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8146 	beq.w	8002564 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d005      	beq.n	80022f0 <HAL_GPIO_Init+0x40>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d130      	bne.n	8002352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4313      	orrs	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002326:	2201      	movs	r2, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4013      	ands	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0201 	and.w	r2, r3, #1
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b03      	cmp	r3, #3
 800235c:	d017      	beq.n	800238e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d123      	bne.n	80023e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	08da      	lsrs	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3208      	adds	r2, #8
 80023a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80a0 	beq.w	8002564 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002424:	4b58      	ldr	r3, [pc, #352]	@ (8002588 <HAL_GPIO_Init+0x2d8>)
 8002426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002428:	4a57      	ldr	r2, [pc, #348]	@ (8002588 <HAL_GPIO_Init+0x2d8>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002430:	4b55      	ldr	r3, [pc, #340]	@ (8002588 <HAL_GPIO_Init+0x2d8>)
 8002432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243c:	4a53      	ldr	r2, [pc, #332]	@ (800258c <HAL_GPIO_Init+0x2dc>)
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002466:	d019      	beq.n	800249c <HAL_GPIO_Init+0x1ec>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a49      	ldr	r2, [pc, #292]	@ (8002590 <HAL_GPIO_Init+0x2e0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d013      	beq.n	8002498 <HAL_GPIO_Init+0x1e8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a48      	ldr	r2, [pc, #288]	@ (8002594 <HAL_GPIO_Init+0x2e4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d00d      	beq.n	8002494 <HAL_GPIO_Init+0x1e4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a47      	ldr	r2, [pc, #284]	@ (8002598 <HAL_GPIO_Init+0x2e8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d007      	beq.n	8002490 <HAL_GPIO_Init+0x1e0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_GPIO_Init+0x2ec>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d101      	bne.n	800248c <HAL_GPIO_Init+0x1dc>
 8002488:	2304      	movs	r3, #4
 800248a:	e008      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 800248c:	2307      	movs	r3, #7
 800248e:	e006      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002490:	2303      	movs	r3, #3
 8002492:	e004      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002494:	2302      	movs	r3, #2
 8002496:	e002      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_GPIO_Init+0x1ee>
 800249c:	2300      	movs	r3, #0
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	f002 0203 	and.w	r2, r2, #3
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	4093      	lsls	r3, r2
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ae:	4937      	ldr	r1, [pc, #220]	@ (800258c <HAL_GPIO_Init+0x2dc>)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024bc:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024e0:	4a2f      	ldr	r2, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024e6:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4013      	ands	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800250a:	4a25      	ldr	r2, [pc, #148]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002510:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002534:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	f47f aea3 	bne.w	80022c0 <HAL_GPIO_Init+0x10>
  }
}
 800257a:	bf00      	nop
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40021000 	.word	0x40021000
 800258c:	40010000 	.word	0x40010000
 8002590:	48000400 	.word	0x48000400
 8002594:	48000800 	.word	0x48000800
 8002598:	48000c00 	.word	0x48000c00
 800259c:	48001000 	.word	0x48001000
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ea:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f806 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e08d      	b.n	8002748 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7fe f991 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2224      	movs	r2, #36	@ 0x24
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800266a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800267a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	e006      	b.n	80026a2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d108      	bne.n	80026bc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	e007      	b.n	80026cc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026de:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69d9      	ldr	r1, [r3, #28]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	461a      	mov	r2, r3
 800275c:	460b      	mov	r3, r1
 800275e:	817b      	strh	r3, [r7, #10]
 8002760:	4613      	mov	r3, r2
 8002762:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b20      	cmp	r3, #32
 800276e:	f040 80fd 	bne.w	800296c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_I2C_Master_Transmit+0x30>
 800277c:	2302      	movs	r3, #2
 800277e:	e0f6      	b.n	800296e <HAL_I2C_Master_Transmit+0x21e>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fa22 	bl	8000bd0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2319      	movs	r3, #25
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f914 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0e1      	b.n	800296e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2210      	movs	r2, #16
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	893a      	ldrh	r2, [r7, #8]
 80027ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2bff      	cmp	r3, #255	@ 0xff
 80027da:	d906      	bls.n	80027ea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	22ff      	movs	r2, #255	@ 0xff
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80027e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e007      	b.n	80027fa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80027f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d024      	beq.n	800284c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	b2db      	uxtb	r3, r3
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	8979      	ldrh	r1, [r7, #10]
 800283e:	4b4e      	ldr	r3, [pc, #312]	@ (8002978 <HAL_I2C_Master_Transmit+0x228>)
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fa83 	bl	8002d50 <I2C_TransferConfig>
 800284a:	e066      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	b2da      	uxtb	r2, r3
 8002852:	8979      	ldrh	r1, [r7, #10]
 8002854:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <HAL_I2C_Master_Transmit+0x228>)
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa78 	bl	8002d50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002860:	e05b      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	6a39      	ldr	r1, [r7, #32]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f907 	bl	8002a7a <I2C_WaitOnTXISFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07b      	b.n	800296e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	781a      	ldrb	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d034      	beq.n	800291a <HAL_I2C_Master_Transmit+0x1ca>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d130      	bne.n	800291a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2200      	movs	r2, #0
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f880 	bl	80029c8 <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e04d      	b.n	800296e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2bff      	cmp	r3, #255	@ 0xff
 80028da:	d90e      	bls.n	80028fa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	22ff      	movs	r2, #255	@ 0xff
 80028e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fa2c 	bl	8002d50 <I2C_TransferConfig>
 80028f8:	e00f      	b.n	800291a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002908:	b2da      	uxtb	r2, r3
 800290a:	8979      	ldrh	r1, [r7, #10]
 800290c:	2300      	movs	r3, #0
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa1b 	bl	8002d50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d19e      	bne.n	8002862 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f8ed 	bl	8002b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e01a      	b.n	800296e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2220      	movs	r2, #32
 800293e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <HAL_I2C_Master_Transmit+0x22c>)
 800294c:	400b      	ands	r3, r1
 800294e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	80002000 	.word	0x80002000
 800297c:	fe00e800 	.word	0xfe00e800

08002980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d103      	bne.n	800299e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2200      	movs	r2, #0
 800299c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d007      	beq.n	80029bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	619a      	str	r2, [r3, #24]
  }
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	603b      	str	r3, [r7, #0]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d8:	e03b      	b.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f8d6 	bl	8002b90 <I2C_IsErrorOccurred>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e041      	b.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d02d      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7fe f8eb 	bl	8000bd0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d122      	bne.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	4013      	ands	r3, r2
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d113      	bne.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d0b4      	beq.n	80029da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a86:	e033      	b.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f87f 	bl	8002b90 <I2C_IsErrorOccurred>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e031      	b.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa2:	d025      	beq.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa4:	f7fe f894 	bl	8000bd0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d302      	bcc.n	8002aba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11a      	bne.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d013      	beq.n	8002af0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e007      	b.n	8002b00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d1c4      	bne.n	8002a88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b14:	e02f      	b.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f838 	bl	8002b90 <I2C_IsErrorOccurred>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e02d      	b.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2a:	f7fe f851 	bl	8000bd0 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d11a      	bne.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d013      	beq.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e007      	b.n	8002b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d1c8      	bne.n	8002b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d068      	beq.n	8002c8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2210      	movs	r2, #16
 8002bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bc4:	e049      	b.n	8002c5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d045      	beq.n	8002c5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bce:	f7fd ffff 	bl	8000bd0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d302      	bcc.n	8002be4 <I2C_IsErrorOccurred+0x54>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d13a      	bne.n	8002c5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c06:	d121      	bne.n	8002c4c <I2C_IsErrorOccurred+0xbc>
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c0e:	d01d      	beq.n	8002c4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d01a      	beq.n	8002c4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c26:	f7fd ffd3 	bl	8000bd0 <HAL_GetTick>
 8002c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c2c:	e00e      	b.n	8002c4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c2e:	f7fd ffcf 	bl	8000bd0 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b19      	cmp	r3, #25
 8002c3a:	d907      	bls.n	8002c4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002c4a:	e006      	b.n	8002c5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d1e9      	bne.n	8002c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d003      	beq.n	8002c70 <I2C_IsErrorOccurred+0xe0>
 8002c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0aa      	beq.n	8002bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d103      	bne.n	8002c80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	f043 0308 	orr.w	r3, r3, #8
 8002cc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	f043 0302 	orr.w	r3, r3, #2
 8002cea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01c      	beq.n	8002d3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f7ff fe3b 	bl	8002980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <I2C_IsErrorOccurred+0x1bc>)
 8002d16:	400b      	ands	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3728      	adds	r7, #40	@ 0x28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d68:	7a7b      	ldrb	r3, [r7, #9]
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	0d5b      	lsrs	r3, r3, #21
 8002d8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <I2C_TransferConfig+0x60>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	43db      	mvns	r3, r3
 8002d94:	ea02 0103 	and.w	r1, r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002da2:	bf00      	nop
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	03ff63ff 	.word	0x03ff63ff

08002db4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d138      	bne.n	8002e3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e032      	b.n	8002e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	@ 0x24
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6819      	ldr	r1, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d139      	bne.n	8002ed4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e033      	b.n	8002ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2224      	movs	r2, #36	@ 0x24
 8002e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	e000      	b.n	8002ed6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ed4:	2302      	movs	r3, #2
  }
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ee8:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <HAL_PWREx_GetVoltageRange+0x18>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000

08002f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0e:	d130      	bne.n	8002f72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f10:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f1c:	d038      	beq.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1e:	4b20      	ldr	r3, [pc, #128]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f26:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2232      	movs	r2, #50	@ 0x32
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0c9b      	lsrs	r3, r3, #18
 8002f40:	3301      	adds	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f44:	e002      	b.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f58:	d102      	bne.n	8002f60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f2      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f60:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6c:	d110      	bne.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e00f      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7e:	d007      	beq.n	8002f90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f80:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f88:	4a05      	ldr	r2, [pc, #20]	@ (8002fa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8002fb6:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0307 	bic.w	r3, r3, #7
 8002fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002fcc:	f043 0304 	orr.w	r3, r3, #4
 8002fd0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002fd8:	bf30      	wfi
 8002fda:	e002      	b.n	8002fe2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002fdc:	bf40      	sev
    __WFE();
 8002fde:	bf20      	wfe
    __WFE();
 8002fe0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	4a06      	ldr	r2, [pc, #24]	@ (8003000 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8002fe8:	f023 0304 	bic.w	r3, r3, #4
 8002fec:	6113      	str	r3, [r2, #16]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40007000 	.word	0x40007000
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	f000 bc02 	b.w	800381c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003018:	4b96      	ldr	r3, [pc, #600]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003022:	4b94      	ldr	r3, [pc, #592]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80e4 	beq.w	8003202 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_RCC_OscConfig+0x4c>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	f040 808b 	bne.w	800315e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b01      	cmp	r3, #1
 800304c:	f040 8087 	bne.w	800315e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003050:	4b88      	ldr	r3, [pc, #544]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <HAL_RCC_OscConfig+0x64>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e3d9      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	4b81      	ldr	r3, [pc, #516]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_RCC_OscConfig+0x7e>
 8003078:	4b7e      	ldr	r3, [pc, #504]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003080:	e005      	b.n	800308e <HAL_RCC_OscConfig+0x8a>
 8003082:	4b7c      	ldr	r3, [pc, #496]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800308e:	4293      	cmp	r3, r2
 8003090:	d223      	bcs.n	80030da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd54 	bl	8003b44 <RCC_SetFlashLatencyFromMSIRange>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e3ba      	b.n	800381c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a6:	4b73      	ldr	r3, [pc, #460]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a72      	ldr	r2, [pc, #456]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030ac:	f043 0308 	orr.w	r3, r3, #8
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b70      	ldr	r3, [pc, #448]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	496d      	ldr	r1, [pc, #436]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	4968      	ldr	r1, [pc, #416]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	e025      	b.n	8003126 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030da:	4b66      	ldr	r3, [pc, #408]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030e0:	f043 0308 	orr.w	r3, r3, #8
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b63      	ldr	r3, [pc, #396]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4960      	ldr	r1, [pc, #384]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	495b      	ldr	r1, [pc, #364]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d109      	bne.n	8003126 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd14 	bl	8003b44 <RCC_SetFlashLatencyFromMSIRange>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e37a      	b.n	800381c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003126:	f000 fc81 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 800312a:	4602      	mov	r2, r0
 800312c:	4b51      	ldr	r3, [pc, #324]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	4950      	ldr	r1, [pc, #320]	@ (8003278 <HAL_RCC_OscConfig+0x274>)
 8003138:	5ccb      	ldrb	r3, [r1, r3]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a4e      	ldr	r2, [pc, #312]	@ (800327c <HAL_RCC_OscConfig+0x278>)
 8003144:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003146:	4b4e      	ldr	r3, [pc, #312]	@ (8003280 <HAL_RCC_OscConfig+0x27c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fd fcf0 	bl	8000b30 <HAL_InitTick>
 8003150:	4603      	mov	r3, r0
 8003152:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d052      	beq.n	8003200 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	e35e      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d032      	beq.n	80031cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003166:	4b43      	ldr	r3, [pc, #268]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a42      	ldr	r2, [pc, #264]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003172:	f7fd fd2d 	bl	8000bd0 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317a:	f7fd fd29 	bl	8000bd0 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e347      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800318c:	4b39      	ldr	r3, [pc, #228]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003198:	4b36      	ldr	r3, [pc, #216]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b33      	ldr	r3, [pc, #204]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4930      	ldr	r1, [pc, #192]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	492b      	ldr	r1, [pc, #172]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
 80031ca:	e01a      	b.n	8003202 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031cc:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a28      	ldr	r2, [pc, #160]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031d8:	f7fd fcfa 	bl	8000bd0 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031e0:	f7fd fcf6 	bl	8000bd0 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e314      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f2:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1dc>
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003200:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d073      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d005      	beq.n	8003220 <HAL_RCC_OscConfig+0x21c>
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b0c      	cmp	r3, #12
 8003218:	d10e      	bne.n	8003238 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d10b      	bne.n	8003238 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003220:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d063      	beq.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d15f      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e2f1      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003240:	d106      	bne.n	8003250 <HAL_RCC_OscConfig+0x24c>
 8003242:	4b0c      	ldr	r3, [pc, #48]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a0b      	ldr	r2, [pc, #44]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003248:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	e025      	b.n	800329c <HAL_RCC_OscConfig+0x298>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003258:	d114      	bne.n	8003284 <HAL_RCC_OscConfig+0x280>
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a05      	ldr	r2, [pc, #20]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003260:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b03      	ldr	r3, [pc, #12]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a02      	ldr	r2, [pc, #8]	@ (8003274 <HAL_RCC_OscConfig+0x270>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e013      	b.n	800329c <HAL_RCC_OscConfig+0x298>
 8003274:	40021000 	.word	0x40021000
 8003278:	08004288 	.word	0x08004288
 800327c:	20000008 	.word	0x20000008
 8003280:	2000000c 	.word	0x2000000c
 8003284:	4ba0      	ldr	r3, [pc, #640]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a9f      	ldr	r2, [pc, #636]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800328a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	4b9d      	ldr	r3, [pc, #628]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a9c      	ldr	r2, [pc, #624]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800329a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fd fc94 	bl	8000bd0 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ac:	f7fd fc90 	bl	8000bd0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	@ 0x64
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e2ae      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032be:	4b92      	ldr	r3, [pc, #584]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x2a8>
 80032ca:	e014      	b.n	80032f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fd fc80 	bl	8000bd0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d4:	f7fd fc7c 	bl	8000bd0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b64      	cmp	r3, #100	@ 0x64
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e29a      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032e6:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x2d0>
 80032f2:	e000      	b.n	80032f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d060      	beq.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d005      	beq.n	8003314 <HAL_RCC_OscConfig+0x310>
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d119      	bne.n	8003342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d116      	bne.n	8003342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003314:	4b7c      	ldr	r3, [pc, #496]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x328>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e277      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	4973      	ldr	r1, [pc, #460]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003340:	e040      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d023      	beq.n	8003392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800334a:	4b6f      	ldr	r3, [pc, #444]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6e      	ldr	r2, [pc, #440]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fd fc3b 	bl	8000bd0 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335e:	f7fd fc37 	bl	8000bd0 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e255      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003370:	4b65      	ldr	r3, [pc, #404]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b62      	ldr	r3, [pc, #392]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	061b      	lsls	r3, r3, #24
 800338a:	495f      	ldr	r1, [pc, #380]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800338c:	4313      	orrs	r3, r2
 800338e:	604b      	str	r3, [r1, #4]
 8003390:	e018      	b.n	80033c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b5d      	ldr	r3, [pc, #372]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5c      	ldr	r2, [pc, #368]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800339c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fd fc17 	bl	8000bd0 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fd fc13 	bl	8000bd0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e231      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033b8:	4b53      	ldr	r3, [pc, #332]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03c      	beq.n	800344a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01c      	beq.n	8003412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80033da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033de:	4a4a      	ldr	r2, [pc, #296]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd fbf2 	bl	8000bd0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fd fbee 	bl	8000bd0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e20c      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003402:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ef      	beq.n	80033f0 <HAL_RCC_OscConfig+0x3ec>
 8003410:	e01b      	b.n	800344a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003412:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003418:	4a3b      	ldr	r2, [pc, #236]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fd fbd5 	bl	8000bd0 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800342a:	f7fd fbd1 	bl	8000bd0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e1ef      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800343c:	4b32      	ldr	r3, [pc, #200]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800343e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ef      	bne.n	800342a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a6 	beq.w	80035a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003458:	2300      	movs	r3, #0
 800345a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800345c:	4b2a      	ldr	r3, [pc, #168]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10d      	bne.n	8003484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	4b27      	ldr	r3, [pc, #156]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346c:	4a26      	ldr	r2, [pc, #152]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	@ 0x58
 8003474:	4b24      	ldr	r3, [pc, #144]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003480:	2301      	movs	r3, #1
 8003482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003484:	4b21      	ldr	r3, [pc, #132]	@ (800350c <HAL_RCC_OscConfig+0x508>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d118      	bne.n	80034c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003490:	4b1e      	ldr	r3, [pc, #120]	@ (800350c <HAL_RCC_OscConfig+0x508>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a1d      	ldr	r2, [pc, #116]	@ (800350c <HAL_RCC_OscConfig+0x508>)
 8003496:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800349a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800349c:	f7fd fb98 	bl	8000bd0 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a4:	f7fd fb94 	bl	8000bd0 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1b2      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b6:	4b15      	ldr	r3, [pc, #84]	@ (800350c <HAL_RCC_OscConfig+0x508>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d108      	bne.n	80034dc <HAL_RCC_OscConfig+0x4d8>
 80034ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80034cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80034d2:	f043 0301 	orr.w	r3, r3, #1
 80034d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034da:	e029      	b.n	8003530 <HAL_RCC_OscConfig+0x52c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d115      	bne.n	8003510 <HAL_RCC_OscConfig+0x50c>
 80034e4:	4b08      	ldr	r3, [pc, #32]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ea:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f043 0304 	orr.w	r3, r3, #4
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034f4:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034fa:	4a03      	ldr	r2, [pc, #12]	@ (8003508 <HAL_RCC_OscConfig+0x504>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003504:	e014      	b.n	8003530 <HAL_RCC_OscConfig+0x52c>
 8003506:	bf00      	nop
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
 8003510:	4b9a      	ldr	r3, [pc, #616]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003516:	4a99      	ldr	r2, [pc, #612]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003520:	4b96      	ldr	r3, [pc, #600]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003526:	4a95      	ldr	r2, [pc, #596]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d016      	beq.n	8003566 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fd fb4a 	bl	8000bd0 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7fd fb46 	bl	8000bd0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e162      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	4b89      	ldr	r3, [pc, #548]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0ed      	beq.n	8003540 <HAL_RCC_OscConfig+0x53c>
 8003564:	e015      	b.n	8003592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd fb33 	bl	8000bd0 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fd fb2f 	bl	8000bd0 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e14b      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003584:	4b7d      	ldr	r3, [pc, #500]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1ed      	bne.n	800356e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003592:	7ffb      	ldrb	r3, [r7, #31]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003598:	4b78      	ldr	r3, [pc, #480]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	4a77      	ldr	r2, [pc, #476]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800359e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d03c      	beq.n	800362a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035b8:	4b70      	ldr	r3, [pc, #448]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80035ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035be:	4a6f      	ldr	r2, [pc, #444]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd fb02 	bl	8000bd0 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d0:	f7fd fafe 	bl	8000bd0 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e11c      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e2:	4b66      	ldr	r3, [pc, #408]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80035e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ef      	beq.n	80035d0 <HAL_RCC_OscConfig+0x5cc>
 80035f0:	e01b      	b.n	800362a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035f2:	4b62      	ldr	r3, [pc, #392]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80035f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035f8:	4a60      	ldr	r2, [pc, #384]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003602:	f7fd fae5 	bl	8000bd0 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800360a:	f7fd fae1 	bl	8000bd0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0ff      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800361c:	4b57      	ldr	r3, [pc, #348]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800361e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ef      	bne.n	800360a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80f3 	beq.w	800381a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	2b02      	cmp	r3, #2
 800363a:	f040 80c9 	bne.w	80037d0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800363e:	4b4f      	ldr	r3, [pc, #316]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	429a      	cmp	r2, r3
 8003650:	d12c      	bne.n	80036ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365c:	3b01      	subs	r3, #1
 800365e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d123      	bne.n	80036ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d11b      	bne.n	80036ac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d113      	bne.n	80036ac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d109      	bne.n	80036ac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d06b      	beq.n	8003784 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d062      	beq.n	8003778 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036b2:	4b32      	ldr	r3, [pc, #200]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0ac      	b.n	800381c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036c2:	4b2e      	ldr	r3, [pc, #184]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80036c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ce:	f7fd fa7f 	bl	8000bd0 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fd fa7b 	bl	8000bd0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e099      	b.n	800381c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e8:	4b24      	ldr	r3, [pc, #144]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f4:	4b21      	ldr	r3, [pc, #132]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	4b21      	ldr	r3, [pc, #132]	@ (8003780 <HAL_RCC_OscConfig+0x77c>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003704:	3a01      	subs	r2, #1
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	4311      	orrs	r1, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800370e:	0212      	lsls	r2, r2, #8
 8003710:	4311      	orrs	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003716:	0852      	lsrs	r2, r2, #1
 8003718:	3a01      	subs	r2, #1
 800371a:	0552      	lsls	r2, r2, #21
 800371c:	4311      	orrs	r1, r2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003722:	0852      	lsrs	r2, r2, #1
 8003724:	3a01      	subs	r2, #1
 8003726:	0652      	lsls	r2, r2, #25
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800372e:	06d2      	lsls	r2, r2, #27
 8003730:	430a      	orrs	r2, r1
 8003732:	4912      	ldr	r1, [pc, #72]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003734:	4313      	orrs	r3, r2
 8003736:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003738:	4b10      	ldr	r3, [pc, #64]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0f      	ldr	r2, [pc, #60]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800373e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003742:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003744:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800374a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800374e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003750:	f7fd fa3e 	bl	8000bd0 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd fa3a 	bl	8000bd0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e058      	b.n	800381c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800376a:	4b04      	ldr	r3, [pc, #16]	@ (800377c <HAL_RCC_OscConfig+0x778>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003776:	e050      	b.n	800381a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e04f      	b.n	800381c <HAL_RCC_OscConfig+0x818>
 800377c:	40021000 	.word	0x40021000
 8003780:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003784:	4b27      	ldr	r3, [pc, #156]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d144      	bne.n	800381a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003790:	4b24      	ldr	r3, [pc, #144]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a23      	ldr	r2, [pc, #140]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800379c:	4b21      	ldr	r3, [pc, #132]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4a20      	ldr	r2, [pc, #128]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 80037a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037a8:	f7fd fa12 	bl	8000bd0 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7fd fa0e 	bl	8000bd0 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e02c      	b.n	800381c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x7ac>
 80037ce:	e024      	b.n	800381a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d01f      	beq.n	8003816 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b13      	ldr	r3, [pc, #76]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 80037dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e2:	f7fd f9f5 	bl	8000bd0 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ea:	f7fd f9f1 	bl	8000bd0 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e00f      	b.n	800381c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1f0      	bne.n	80037ea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	4905      	ldr	r1, [pc, #20]	@ (8003824 <HAL_RCC_OscConfig+0x820>)
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCC_OscConfig+0x824>)
 8003810:	4013      	ands	r3, r2
 8003812:	60cb      	str	r3, [r1, #12]
 8003814:	e001      	b.n	800381a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3720      	adds	r7, #32
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	feeefffc 	.word	0xfeeefffc

0800382c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0e7      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003840:	4b75      	ldr	r3, [pc, #468]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d910      	bls.n	8003870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b72      	ldr	r3, [pc, #456]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 0207 	bic.w	r2, r3, #7
 8003856:	4970      	ldr	r1, [pc, #448]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e0cf      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	4b66      	ldr	r3, [pc, #408]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003888:	429a      	cmp	r2, r3
 800388a:	d908      	bls.n	800389e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b63      	ldr	r3, [pc, #396]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4960      	ldr	r1, [pc, #384]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d04c      	beq.n	8003944 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d121      	bne.n	8003902 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0a6      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d107      	bne.n	80038da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ca:	4b54      	ldr	r3, [pc, #336]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d115      	bne.n	8003902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e09a      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038e2:	4b4e      	ldr	r3, [pc, #312]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e08e      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e086      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b46      	ldr	r3, [pc, #280]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4943      	ldr	r1, [pc, #268]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003914:	f7fd f95c 	bl	8000bd0 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fd f958 	bl	8000bd0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e06e      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b3a      	ldr	r3, [pc, #232]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	4b31      	ldr	r3, [pc, #196]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800395c:	429a      	cmp	r2, r3
 800395e:	d208      	bcs.n	8003972 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b2e      	ldr	r3, [pc, #184]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	492b      	ldr	r1, [pc, #172]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003972:	4b29      	ldr	r3, [pc, #164]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d210      	bcs.n	80039a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f023 0207 	bic.w	r2, r3, #7
 8003988:	4923      	ldr	r1, [pc, #140]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	4313      	orrs	r3, r2
 800398e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003990:	4b21      	ldr	r3, [pc, #132]	@ (8003a18 <HAL_RCC_ClockConfig+0x1ec>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e036      	b.n	8003a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d008      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ae:	4b1b      	ldr	r3, [pc, #108]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	4918      	ldr	r1, [pc, #96]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039cc:	4b13      	ldr	r3, [pc, #76]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4910      	ldr	r1, [pc, #64]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039e0:	f000 f824 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <HAL_RCC_ClockConfig+0x1f0>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	490b      	ldr	r1, [pc, #44]	@ (8003a20 <HAL_RCC_ClockConfig+0x1f4>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1f8>)
 80039fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1fc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fd f893 	bl	8000b30 <HAL_InitTick>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08004288 	.word	0x08004288
 8003a24:	20000008 	.word	0x20000008
 8003a28:	2000000c 	.word	0x2000000c

08003a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a44:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0303 	and.w	r3, r3, #3
 8003a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x34>
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d121      	bne.n	8003a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d11e      	bne.n	8003a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a60:	4b34      	ldr	r3, [pc, #208]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	61fb      	str	r3, [r7, #28]
 8003a7a:	e005      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a88:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d102      	bne.n	8003aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003aa4:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	e004      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ab0:	4b23      	ldr	r3, [pc, #140]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d134      	bne.n	8003b24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aba:	4b1e      	ldr	r3, [pc, #120]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d003      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ad0:	e005      	b.n	8003ade <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad4:	617b      	str	r3, [r7, #20]
      break;
 8003ad6:	e005      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ada:	617b      	str	r3, [r7, #20]
      break;
 8003adc:	e002      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	617b      	str	r3, [r7, #20]
      break;
 8003ae2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ae4:	4b13      	ldr	r3, [pc, #76]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	3301      	adds	r3, #1
 8003af0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003af2:	4b10      	ldr	r3, [pc, #64]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	fb03 f202 	mul.w	r2, r3, r2
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	0e5b      	lsrs	r3, r3, #25
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	3301      	adds	r3, #1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b24:	69bb      	ldr	r3, [r7, #24]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	@ 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000
 8003b38:	08004298 	.word	0x08004298
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	007a1200 	.word	0x007a1200

08003b44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b5c:	f7ff f9c2 	bl	8002ee4 <HAL_PWREx_GetVoltageRange>
 8003b60:	6178      	str	r0, [r7, #20]
 8003b62:	e014      	b.n	8003b8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b25      	ldr	r3, [pc, #148]	@ (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b70:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b7c:	f7ff f9b2 	bl	8002ee4 <HAL_PWREx_GetVoltageRange>
 8003b80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b82:	4b1e      	ldr	r3, [pc, #120]	@ (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	4a1d      	ldr	r2, [pc, #116]	@ (8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b94:	d10b      	bne.n	8003bae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b80      	cmp	r3, #128	@ 0x80
 8003b9a:	d919      	bls.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ba0:	d902      	bls.n	8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	e013      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ba8:	2301      	movs	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	e010      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b80      	cmp	r3, #128	@ 0x80
 8003bb2:	d902      	bls.n	8003bba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	e00a      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b80      	cmp	r3, #128	@ 0x80
 8003bbe:	d102      	bne.n	8003bc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	e004      	b.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b70      	cmp	r3, #112	@ 0x70
 8003bca:	d101      	bne.n	8003bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bcc:	2301      	movs	r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 0207 	bic.w	r2, r3, #7
 8003bd8:	4909      	ldr	r1, [pc, #36]	@ (8003c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003be0:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40022000 	.word	0x40022000

08003c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c10:	2300      	movs	r3, #0
 8003c12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d031      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c28:	d01a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003c2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003c2e:	d814      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003c38:	d10f      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c46:	e00c      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f9f0 	bl	8004034 <RCCEx_PLLSAI1_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003c60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10b      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c68:	4b51      	ldr	r3, [pc, #324]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	494e      	ldr	r1, [pc, #312]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7cfb      	ldrb	r3, [r7, #19]
 8003c82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 809e 	beq.w	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c92:	2300      	movs	r3, #0
 8003c94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c96:	4b46      	ldr	r3, [pc, #280]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cac:	4b40      	ldr	r3, [pc, #256]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc8:	4b3a      	ldr	r3, [pc, #232]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a39      	ldr	r2, [pc, #228]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd4:	f7fc ff7c 	bl	8000bd0 <HAL_GetTick>
 8003cd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fc ff78 	bl	8000bd0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d902      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	74fb      	strb	r3, [r7, #19]
        break;
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf0:	4b30      	ldr	r3, [pc, #192]	@ (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ef      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d15a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d02:	4b2b      	ldr	r3, [pc, #172]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01e      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d019      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d1e:	4b24      	ldr	r3, [pc, #144]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2a:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	4a1f      	ldr	r2, [pc, #124]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d40:	4a1b      	ldr	r2, [pc, #108]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d4a:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d016      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fc ff38 	bl	8000bd0 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d62:	e00b      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fc ff34 	bl	8000bd0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d902      	bls.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	74fb      	strb	r3, [r7, #19]
            break;
 8003d7a:	e006      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ec      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003d8a:	7cfb      	ldrb	r3, [r7, #19]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d90:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	4904      	ldr	r1, [pc, #16]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
 8003dac:	e006      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dbc:	7c7b      	ldrb	r3, [r7, #17]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b9b      	ldr	r3, [pc, #620]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	4a9a      	ldr	r2, [pc, #616]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dda:	4b95      	ldr	r3, [pc, #596]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de0:	f023 0203 	bic.w	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4991      	ldr	r1, [pc, #580]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f023 020c 	bic.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0a:	4989      	ldr	r1, [pc, #548]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e1e:	4b84      	ldr	r3, [pc, #528]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	4980      	ldr	r1, [pc, #512]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e40:	4b7b      	ldr	r3, [pc, #492]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4e:	4978      	ldr	r1, [pc, #480]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e62:	4b73      	ldr	r3, [pc, #460]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e70:	496f      	ldr	r1, [pc, #444]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e84:	4b6a      	ldr	r3, [pc, #424]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	4967      	ldr	r1, [pc, #412]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea6:	4b62      	ldr	r3, [pc, #392]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	495e      	ldr	r1, [pc, #376]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00a      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec8:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed6:	4956      	ldr	r1, [pc, #344]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003eea:	4b51      	ldr	r3, [pc, #324]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	494d      	ldr	r1, [pc, #308]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d028      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f0c:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1a:	4945      	ldr	r1, [pc, #276]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2c:	4b40      	ldr	r3, [pc, #256]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a3f      	ldr	r2, [pc, #252]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f36:	60d3      	str	r3, [r2, #12]
 8003f38:	e011      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f42:	d10c      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f872 	bl	8004034 <RCCEx_PLLSAI1_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d028      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f6a:	4b31      	ldr	r3, [pc, #196]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f78:	492d      	ldr	r1, [pc, #180]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f88:	d106      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f8a:	4b29      	ldr	r3, [pc, #164]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	4a28      	ldr	r2, [pc, #160]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003f90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f94:	60d3      	str	r3, [r2, #12]
 8003f96:	e011      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fa0:	d10c      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 f843 	bl	8004034 <RCCEx_PLLSAI1_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fb2:	7cfb      	ldrb	r3, [r7, #19]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003fb8:	7cfb      	ldrb	r3, [r7, #19]
 8003fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01c      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fc8:	4b19      	ldr	r3, [pc, #100]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd6:	4916      	ldr	r1, [pc, #88]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fe2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fe6:	d10c      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 f820 	bl	8004034 <RCCEx_PLLSAI1_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800400e:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004014:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	4904      	ldr	r1, [pc, #16]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004024:	7cbb      	ldrb	r3, [r7, #18]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000

08004034 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004042:	4b74      	ldr	r3, [pc, #464]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d018      	beq.n	8004080 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800404e:	4b71      	ldr	r3, [pc, #452]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f003 0203 	and.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d10d      	bne.n	800407a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
       ||
 8004062:	2b00      	cmp	r3, #0
 8004064:	d009      	beq.n	800407a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004066:	4b6b      	ldr	r3, [pc, #428]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
       ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d047      	beq.n	800410a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
 800407e:	e044      	b.n	800410a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b03      	cmp	r3, #3
 8004086:	d018      	beq.n	80040ba <RCCEx_PLLSAI1_Config+0x86>
 8004088:	2b03      	cmp	r3, #3
 800408a:	d825      	bhi.n	80040d8 <RCCEx_PLLSAI1_Config+0xa4>
 800408c:	2b01      	cmp	r3, #1
 800408e:	d002      	beq.n	8004096 <RCCEx_PLLSAI1_Config+0x62>
 8004090:	2b02      	cmp	r3, #2
 8004092:	d009      	beq.n	80040a8 <RCCEx_PLLSAI1_Config+0x74>
 8004094:	e020      	b.n	80040d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004096:	4b5f      	ldr	r3, [pc, #380]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11d      	bne.n	80040de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a6:	e01a      	b.n	80040de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d116      	bne.n	80040e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b8:	e013      	b.n	80040e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040ba:	4b56      	ldr	r3, [pc, #344]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040c6:	4b53      	ldr	r3, [pc, #332]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040d6:	e006      	b.n	80040e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e004      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040de:	bf00      	nop
 80040e0:	e002      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040e2:	bf00      	nop
 80040e4:	e000      	b.n	80040e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10d      	bne.n	800410a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ee:	4b49      	ldr	r3, [pc, #292]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	430b      	orrs	r3, r1
 8004104:	4943      	ldr	r1, [pc, #268]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004106:	4313      	orrs	r3, r2
 8004108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d17c      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004110:	4b40      	ldr	r3, [pc, #256]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a3f      	ldr	r2, [pc, #252]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800411a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411c:	f7fc fd58 	bl	8000bd0 <HAL_GetTick>
 8004120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004122:	e009      	b.n	8004138 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004124:	f7fc fd54 	bl	8000bd0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d902      	bls.n	8004138 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	73fb      	strb	r3, [r7, #15]
        break;
 8004136:	e005      	b.n	8004144 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004138:	4b36      	ldr	r3, [pc, #216]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1ef      	bne.n	8004124 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d15f      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d110      	bne.n	8004172 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004150:	4b30      	ldr	r3, [pc, #192]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004158:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6892      	ldr	r2, [r2, #8]
 8004160:	0211      	lsls	r1, r2, #8
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68d2      	ldr	r2, [r2, #12]
 8004166:	06d2      	lsls	r2, r2, #27
 8004168:	430a      	orrs	r2, r1
 800416a:	492a      	ldr	r1, [pc, #168]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800416c:	4313      	orrs	r3, r2
 800416e:	610b      	str	r3, [r1, #16]
 8004170:	e027      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d112      	bne.n	800419e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004178:	4b26      	ldr	r3, [pc, #152]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004180:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6892      	ldr	r2, [r2, #8]
 8004188:	0211      	lsls	r1, r2, #8
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6912      	ldr	r2, [r2, #16]
 800418e:	0852      	lsrs	r2, r2, #1
 8004190:	3a01      	subs	r2, #1
 8004192:	0552      	lsls	r2, r2, #21
 8004194:	430a      	orrs	r2, r1
 8004196:	491f      	ldr	r1, [pc, #124]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004198:	4313      	orrs	r3, r2
 800419a:	610b      	str	r3, [r1, #16]
 800419c:	e011      	b.n	80041c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800419e:	4b1d      	ldr	r3, [pc, #116]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6892      	ldr	r2, [r2, #8]
 80041ae:	0211      	lsls	r1, r2, #8
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6952      	ldr	r2, [r2, #20]
 80041b4:	0852      	lsrs	r2, r2, #1
 80041b6:	3a01      	subs	r2, #1
 80041b8:	0652      	lsls	r2, r2, #25
 80041ba:	430a      	orrs	r2, r1
 80041bc:	4915      	ldr	r1, [pc, #84]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041c2:	4b14      	ldr	r3, [pc, #80]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a13      	ldr	r2, [pc, #76]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fc fcff 	bl	8000bd0 <HAL_GetTick>
 80041d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041d4:	e009      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041d6:	f7fc fcfb 	bl	8000bd0 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d902      	bls.n	80041ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	73fb      	strb	r3, [r7, #15]
          break;
 80041e8:	e005      	b.n	80041f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0ef      	beq.n	80041d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041fc:	4b05      	ldr	r3, [pc, #20]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	4903      	ldr	r1, [pc, #12]	@ (8004214 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004206:	4313      	orrs	r3, r2
 8004208:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000

08004218 <memset>:
 8004218:	4402      	add	r2, r0
 800421a:	4603      	mov	r3, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <__libc_init_array>:
 8004228:	b570      	push	{r4, r5, r6, lr}
 800422a:	4d0d      	ldr	r5, [pc, #52]	@ (8004260 <__libc_init_array+0x38>)
 800422c:	4c0d      	ldr	r4, [pc, #52]	@ (8004264 <__libc_init_array+0x3c>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	2600      	movs	r6, #0
 8004234:	42a6      	cmp	r6, r4
 8004236:	d109      	bne.n	800424c <__libc_init_array+0x24>
 8004238:	4d0b      	ldr	r5, [pc, #44]	@ (8004268 <__libc_init_array+0x40>)
 800423a:	4c0c      	ldr	r4, [pc, #48]	@ (800426c <__libc_init_array+0x44>)
 800423c:	f000 f818 	bl	8004270 <_init>
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	2600      	movs	r6, #0
 8004246:	42a6      	cmp	r6, r4
 8004248:	d105      	bne.n	8004256 <__libc_init_array+0x2e>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004250:	4798      	blx	r3
 8004252:	3601      	adds	r6, #1
 8004254:	e7ee      	b.n	8004234 <__libc_init_array+0xc>
 8004256:	f855 3b04 	ldr.w	r3, [r5], #4
 800425a:	4798      	blx	r3
 800425c:	3601      	adds	r6, #1
 800425e:	e7f2      	b.n	8004246 <__libc_init_array+0x1e>
 8004260:	080042c8 	.word	0x080042c8
 8004264:	080042c8 	.word	0x080042c8
 8004268:	080042c8 	.word	0x080042c8
 800426c:	080042cc 	.word	0x080042cc

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr
