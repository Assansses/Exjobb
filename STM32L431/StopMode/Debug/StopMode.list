
StopMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cbc  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  00004018  2**0
                  CONTENTS
  4 .ARM          00000000  08002e88  08002e88  00004018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e88  08002e88  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e88  08002e88  00003e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e8c  08002e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08002e90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000018  08002ea8  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002ea8  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d17  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b13  00000000  00000000  0000dd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0000f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000782  00000000  00000000  00010260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f897  00000000  00000000  000109e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be4c  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bdd5c  00000000  00000000  0003c0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9e21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  000f9e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000fc5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002e30 	.word	0x08002e30

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	08002e30 	.word	0x08002e30

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fab4 	bl	800073e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f88b 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f915 	bl	8000408 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001de:	f000 f8d3 	bl	8000388 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001e8:	483c      	ldr	r0, [pc, #240]	@ (80002dc <main+0x110>)
 80001ea:	f000 fded 	bl	8000dc8 <HAL_GPIO_WritePin>



  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001f8:	f000 fde6 	bl	8000dc8 <HAL_GPIO_WritePin>


  //tx_buffer = {0x00, 0x02, 0xAA, 0xBB, 0xCC, 0xDD};
  HAL_I2C_Master_Transmit(&hi2c1, NTP_ADDRESS, tx_buffer, 6, 2); //HaL_MAX_DELAY
 80001fc:	2302      	movs	r3, #2
 80001fe:	9300      	str	r3, [sp, #0]
 8000200:	2306      	movs	r3, #6
 8000202:	4a37      	ldr	r2, [pc, #220]	@ (80002e0 <main+0x114>)
 8000204:	21a8      	movs	r1, #168	@ 0xa8
 8000206:	4837      	ldr	r0, [pc, #220]	@ (80002e4 <main+0x118>)
 8000208:	f000 fec4 	bl	8000f94 <HAL_I2C_Master_Transmit>
  HAL_Delay(2);// Mer än 1. Oklart varför
 800020c:	2002      	movs	r0, #2
 800020e:	f000 fb0b 	bl	8000828 <HAL_Delay>

  //rx_address = {0x00, 0x02};
  HAL_I2C_Master_Transmit(&hi2c1, NTP_ADDRESS, rx_address, 2, 2);
 8000212:	2302      	movs	r3, #2
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2302      	movs	r3, #2
 8000218:	4a33      	ldr	r2, [pc, #204]	@ (80002e8 <main+0x11c>)
 800021a:	21a8      	movs	r1, #168	@ 0xa8
 800021c:	4831      	ldr	r0, [pc, #196]	@ (80002e4 <main+0x118>)
 800021e:	f000 feb9 	bl	8000f94 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, NTP_ADDRESS, rx_buffer, 4, 1);
 8000222:	2301      	movs	r3, #1
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2304      	movs	r3, #4
 8000228:	4a30      	ldr	r2, [pc, #192]	@ (80002ec <main+0x120>)
 800022a:	21a8      	movs	r1, #168	@ 0xa8
 800022c:	482d      	ldr	r0, [pc, #180]	@ (80002e4 <main+0x118>)
 800022e:	f000 ffc9 	bl	80011c4 <HAL_I2C_Master_Receive>

  //*/

  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023c:	f000 fdc4 	bl	8000dc8 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000246:	4825      	ldr	r0, [pc, #148]	@ (80002dc <main+0x110>)
 8000248:	f000 fdbe 	bl	8000dc8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000252:	4822      	ldr	r0, [pc, #136]	@ (80002dc <main+0x110>)
 8000254:	f000 fdb8 	bl	8000dc8 <HAL_GPIO_WritePin>

  HAL_SuspendTick();
 8000258:	f000 fb0a 	bl	8000870 <HAL_SuspendTick>
  HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
 800025c:	2001      	movs	r0, #1
 800025e:	f001 fc4f 	bl	8001b00 <HAL_PWREx_EnterSTOP2Mode>
  HAL_ResumeTick();
 8000262:	f000 fb15 	bl	8000890 <HAL_ResumeTick>
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800026c:	481b      	ldr	r0, [pc, #108]	@ (80002dc <main+0x110>)
 800026e:	f000 fdab 	bl	8000dc8 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);


  rx_address[0] = 0x00;
 8000272:	4b1d      	ldr	r3, [pc, #116]	@ (80002e8 <main+0x11c>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
  rx_address[1] = 0x01;
 8000278:	4b1b      	ldr	r3, [pc, #108]	@ (80002e8 <main+0x11c>)
 800027a:	2201      	movs	r2, #1
 800027c:	705a      	strb	r2, [r3, #1]
		  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
	  } else {
		  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
	  }
	  // */
	  for( int i = 0 ; i < 10 ; ++i) {
 800027e:	2300      	movs	r3, #0
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	e005      	b.n	8000290 <main+0xc4>
		  //HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
		  HAL_Delay(200);
 8000284:	20c8      	movs	r0, #200	@ 0xc8
 8000286:	f000 facf 	bl	8000828 <HAL_Delay>
	  for( int i = 0 ; i < 10 ; ++i) {
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b09      	cmp	r3, #9
 8000294:	ddf6      	ble.n	8000284 <main+0xb8>
	  }


	  HAL_I2C_Master_Transmit(&hi2c1, NTP_ADDRESS, rx_address, 2, 2);
 8000296:	2302      	movs	r3, #2
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2302      	movs	r3, #2
 800029c:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <main+0x11c>)
 800029e:	21a8      	movs	r1, #168	@ 0xa8
 80002a0:	4810      	ldr	r0, [pc, #64]	@ (80002e4 <main+0x118>)
 80002a2:	f000 fe77 	bl	8000f94 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, NTP_ADDRESS, rx_buffer, 4, 1);
 80002a6:	2301      	movs	r3, #1
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2304      	movs	r3, #4
 80002ac:	4a0f      	ldr	r2, [pc, #60]	@ (80002ec <main+0x120>)
 80002ae:	21a8      	movs	r1, #168	@ 0xa8
 80002b0:	480c      	ldr	r0, [pc, #48]	@ (80002e4 <main+0x118>)
 80002b2:	f000 ff87 	bl	80011c4 <HAL_I2C_Master_Receive>
	  if (rx_buffer[0] == 0x00){
 80002b6:	4b0d      	ldr	r3, [pc, #52]	@ (80002ec <main+0x120>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d105      	bne.n	80002ca <main+0xfe>
		  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80002be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002c2:	4806      	ldr	r0, [pc, #24]	@ (80002dc <main+0x110>)
 80002c4:	f000 fd98 	bl	8000df8 <HAL_GPIO_TogglePin>
 80002c8:	e7d9      	b.n	800027e <main+0xb2>
	  } else {

		  HAL_SuspendTick();
 80002ca:	f000 fad1 	bl	8000870 <HAL_SuspendTick>
		  HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
 80002ce:	2001      	movs	r0, #1
 80002d0:	f001 fc16 	bl	8001b00 <HAL_PWREx_EnterSTOP2Mode>
		  HAL_ResumeTick();
 80002d4:	f000 fadc 	bl	8000890 <HAL_ResumeTick>
	  for( int i = 0 ; i < 10 ; ++i) {
 80002d8:	e7d1      	b.n	800027e <main+0xb2>
 80002da:	bf00      	nop
 80002dc:	48000400 	.word	0x48000400
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000034 	.word	0x20000034
 80002e8:	20000008 	.word	0x20000008
 80002ec:	20000088 	.word	0x20000088

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	@ 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2244      	movs	r2, #68	@ 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fd6a 	bl	8002dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000312:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000316:	f001 fb9d 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000320:	f000 f90c 	bl	800053c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000324:	2310      	movs	r3, #16
 8000326:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000330:	2360      	movs	r3, #96	@ 0x60
 8000332:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000334:	2300      	movs	r3, #0
 8000336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0314 	add.w	r3, r7, #20
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fc41 	bl	8001bc4 <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000348:	f000 f8f8 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000360:	463b      	mov	r3, r7
 8000362:	2100      	movs	r1, #0
 8000364:	4618      	mov	r0, r3
 8000366:	f002 f841 	bl	80023ec <HAL_RCC_ClockConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000370:	f000 f8e4 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN SystemClock_Config 0 */
  SCB->VTOR = FLASH_BASE | 0x00000000U;
 8000374:	4b03      	ldr	r3, [pc, #12]	@ (8000384 <SystemClock_Config+0x94>)
 8000376:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800037a:	609a      	str	r2, [r3, #8]
  /* USER CODE END SystemClock_Config 0 */
}
 800037c:	bf00      	nop
 800037e:	3758      	adds	r7, #88	@ 0x58
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_I2C1_Init+0x74>)
 800038e:	4a1c      	ldr	r2, [pc, #112]	@ (8000400 <MX_I2C1_Init+0x78>)
 8000390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_I2C1_Init+0x74>)
 8000394:	4a1b      	ldr	r2, [pc, #108]	@ (8000404 <MX_I2C1_Init+0x7c>)
 8000396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c2:	480e      	ldr	r0, [pc, #56]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003c4:	f000 fd4a 	bl	8000e5c <HAL_I2C_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ce:	f000 f8b5 	bl	800053c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d2:	2100      	movs	r1, #0
 80003d4:	4809      	ldr	r0, [pc, #36]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003d6:	f001 fa91 	bl	80018fc <HAL_I2CEx_ConfigAnalogFilter>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e0:	f000 f8ac 	bl	800053c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e4:	2100      	movs	r1, #0
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003e8:	f001 fad3 	bl	8001992 <HAL_I2CEx_ConfigDigitalFilter>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f8a3 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000034 	.word	0x20000034
 8000400:	40005400 	.word	0x40005400
 8000404:	00100d14 	.word	0x00100d14

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 030c 	add.w	r3, r7, #12
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b35      	ldr	r3, [pc, #212]	@ (80004f4 <MX_GPIO_Init+0xec>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a34      	ldr	r2, [pc, #208]	@ (80004f4 <MX_GPIO_Init+0xec>)
 8000424:	f043 0304 	orr.w	r3, r3, #4
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4b32      	ldr	r3, [pc, #200]	@ (80004f4 <MX_GPIO_Init+0xec>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0304 	and.w	r3, r3, #4
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b2f      	ldr	r3, [pc, #188]	@ (80004f4 <MX_GPIO_Init+0xec>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a2e      	ldr	r2, [pc, #184]	@ (80004f4 <MX_GPIO_Init+0xec>)
 800043c:	f043 0302 	orr.w	r3, r3, #2
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4b2c      	ldr	r3, [pc, #176]	@ (80004f4 <MX_GPIO_Init+0xec>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f003 0302 	and.w	r3, r3, #2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b29      	ldr	r3, [pc, #164]	@ (80004f4 <MX_GPIO_Init+0xec>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a28      	ldr	r2, [pc, #160]	@ (80004f4 <MX_GPIO_Init+0xec>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045a:	4b26      	ldr	r3, [pc, #152]	@ (80004f4 <MX_GPIO_Init+0xec>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800046c:	4822      	ldr	r0, [pc, #136]	@ (80004f8 <MX_GPIO_Init+0xf0>)
 800046e:	f000 fcab 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NFC_Vcc_GPIO_Port, NFC_Vcc_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800047c:	f000 fca4 	bl	8000dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ED_Pin */
  GPIO_InitStruct.Pin = ED_Pin;
 8000480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000486:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800048a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ED_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	4819      	ldr	r0, [pc, #100]	@ (80004fc <MX_GPIO_Init+0xf4>)
 8000498:	f000 fb1c 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
 800049c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ae:	f107 030c 	add.w	r3, r7, #12
 80004b2:	4619      	mov	r1, r3
 80004b4:	4810      	ldr	r0, [pc, #64]	@ (80004f8 <MX_GPIO_Init+0xf0>)
 80004b6:	f000 fb0d 	bl	8000ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFC_Vcc_Pin */
  GPIO_InitStruct.Pin = NFC_Vcc_Pin;
 80004ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c0:	2301      	movs	r3, #1
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NFC_Vcc_GPIO_Port, &GPIO_InitStruct);
 80004cc:	f107 030c 	add.w	r3, r7, #12
 80004d0:	4619      	mov	r1, r3
 80004d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004d6:	f000 fafd 	bl	8000ad4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	2100      	movs	r1, #0
 80004de:	2028      	movs	r0, #40	@ 0x28
 80004e0:	f000 fac1 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004e4:	2028      	movs	r0, #40	@ 0x28
 80004e6:	f000 fada 	bl	8000a9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000400 	.word	0x48000400
 80004fc:	48000800 	.word	0x48000800

08000500 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]

	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000510:	4809      	ldr	r0, [pc, #36]	@ (8000538 <HAL_GPIO_EXTI_Callback+0x38>)
 8000512:	f000 fc59 	bl	8000dc8 <HAL_GPIO_WritePin>
	if(GPIO_Pin == GPIO_PIN_13) {
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800051c:	d106      	bne.n	800052c <HAL_GPIO_EXTI_Callback+0x2c>
		HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <HAL_GPIO_EXTI_Callback+0x38>)
 8000526:	f000 fc4f 	bl	8000dc8 <HAL_GPIO_WritePin>
	  } else {
	      __NOP();
	  }

}
 800052a:	e000      	b.n	800052e <HAL_GPIO_EXTI_Callback+0x2e>
	      __NOP();
 800052c:	bf00      	nop
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	48000400 	.word	0x48000400

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <Error_Handler+0x8>

08000548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800054e:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <HAL_MspInit+0x50>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000552:	4a11      	ldr	r2, [pc, #68]	@ (8000598 <HAL_MspInit+0x50>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6613      	str	r3, [r2, #96]	@ 0x60
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <HAL_MspInit+0x50>)
 800055c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <HAL_MspInit+0x50>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <HAL_MspInit+0x50>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000570:	6593      	str	r3, [r2, #88]	@ 0x58
 8000572:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <HAL_MspInit+0x50>)
 8000574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2001      	movs	r0, #1
 8000584:	f000 fa6f 	bl	8000a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000588:	2001      	movs	r0, #1
 800058a:	f000 fa88 	bl	8000a9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0a0      	sub	sp, #128	@ 0x80
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	225c      	movs	r2, #92	@ 0x5c
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fc0b 	bl	8002dd8 <memset>
  if(hi2c->Instance==I2C1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000644 <HAL_I2C_MspInit+0xa8>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d137      	bne.n	800063c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005cc:	2340      	movs	r3, #64	@ 0x40
 80005ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 f8f3 	bl	80027c4 <HAL_RCCEx_PeriphCLKConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80005e4:	f7ff ffaa 	bl	800053c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <HAL_I2C_MspInit+0xac>)
 80005ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ec:	4a16      	ldr	r2, [pc, #88]	@ (8000648 <HAL_I2C_MspInit+0xac>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_I2C_MspInit+0xac>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000600:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000604:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000606:	2312      	movs	r3, #18
 8000608:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000612:	2304      	movs	r3, #4
 8000614:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800061a:	4619      	mov	r1, r3
 800061c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000620:	f000 fa58 	bl	8000ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000624:	4b08      	ldr	r3, [pc, #32]	@ (8000648 <HAL_I2C_MspInit+0xac>)
 8000626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000628:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <HAL_I2C_MspInit+0xac>)
 800062a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800062e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000630:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <HAL_I2C_MspInit+0xac>)
 8000632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800063c:	bf00      	nop
 800063e:	3780      	adds	r7, #128	@ 0x80
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40005400 	.word	0x40005400
 8000648:	40021000 	.word	0x40021000

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <NMI_Handler+0x4>

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <MemManage_Handler+0x4>

08000664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <UsageFault_Handler+0x4>

08000674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a2:	f000 f8a1 	bl	80007e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}

080006aa <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80006ae:	f001 fa53 	bl	8001b58 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ED_Pin);
 80006ba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006be:	f000 fbb5 	bl	8000e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <SystemInit+0x20>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d2:	4a05      	ldr	r2, [pc, #20]	@ (80006e8 <SystemInit+0x20>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000724 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f0:	f7ff ffea 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	@ (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	@ (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f002 fb65 	bl	8002de8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071e:	f7ff fd55 	bl	80001cc <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000724:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000730:	08002e90 	.word	0x08002e90
  ldr r2, =_sbss
 8000734:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000738:	20000090 	.word	0x20000090

0800073c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_IRQHandler>

0800073e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f981 	bl	8000a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074e:	200f      	movs	r0, #15
 8000750:	f000 f80e 	bl	8000770 <HAL_InitTick>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d002      	beq.n	8000760 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	e001      	b.n	8000764 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000760:	f7ff fef2 	bl	8000548 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000764:	79fb      	ldrb	r3, [r7, #7]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <HAL_InitTick+0x6c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d023      	beq.n	80007cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <HAL_InitTick+0x70>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <HAL_InitTick+0x6c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f98d 	bl	8000aba <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10f      	bne.n	80007c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d809      	bhi.n	80007c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ac:	2200      	movs	r2, #0
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295
 80007b4:	f000 f957 	bl	8000a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b8:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <HAL_InitTick+0x74>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e007      	b.n	80007d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80007c0:	2301      	movs	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	e004      	b.n	80007d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73fb      	strb	r3, [r7, #15]
 80007ca:	e001      	b.n	80007d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007cc:	2301      	movs	r3, #1
 80007ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000014 	.word	0x20000014
 80007e0:	2000000c 	.word	0x2000000c
 80007e4:	20000010 	.word	0x20000010

080007e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_IncTick+0x20>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <HAL_IncTick+0x24>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4413      	add	r3, r2
 80007f8:	4a04      	ldr	r2, [pc, #16]	@ (800080c <HAL_IncTick+0x24>)
 80007fa:	6013      	str	r3, [r2, #0]
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000014 	.word	0x20000014
 800080c:	2000008c 	.word	0x2000008c

08000810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  return uwTick;
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <HAL_GetTick+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
}
 8000818:	4618      	mov	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	2000008c 	.word	0x2000008c

08000828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000830:	f7ff ffee 	bl	8000810 <HAL_GetTick>
 8000834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000840:	d005      	beq.n	800084e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000842:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <HAL_Delay+0x44>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	461a      	mov	r2, r3
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	4413      	add	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084e:	bf00      	nop
 8000850:	f7ff ffde 	bl	8000810 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8f7      	bhi.n	8000850 <HAL_Delay+0x28>
  {
  }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000014 	.word	0x20000014

08000870 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <HAL_SuspendTick+0x1c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	@ (800088c <HAL_SuspendTick+0x1c>)
 800087a:	f023 0302 	bic.w	r3, r3, #2
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000e010 	.word	0xe000e010

08000890 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_ResumeTick+0x1c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a04      	ldr	r2, [pc, #16]	@ (80008ac <HAL_ResumeTick+0x1c>)
 800089a:	f043 0302 	orr.w	r3, r3, #2
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e010 	.word	0xe000e010

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	2b00      	cmp	r3, #0
 8000924:	db0b      	blt.n	800093e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f003 021f 	and.w	r2, r3, #31
 800092c:	4907      	ldr	r1, [pc, #28]	@ (800094c <__NVIC_EnableIRQ+0x38>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2001      	movs	r0, #1
 8000936:	fa00 f202 	lsl.w	r2, r0, r2
 800093a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	db0a      	blt.n	800097a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	490c      	ldr	r1, [pc, #48]	@ (800099c <__NVIC_SetPriority+0x4c>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	0112      	lsls	r2, r2, #4
 8000970:	b2d2      	uxtb	r2, r2
 8000972:	440b      	add	r3, r1
 8000974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000978:	e00a      	b.n	8000990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4908      	ldr	r1, [pc, #32]	@ (80009a0 <__NVIC_SetPriority+0x50>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	f003 030f 	and.w	r3, r3, #15
 8000986:	3b04      	subs	r3, #4
 8000988:	0112      	lsls	r2, r2, #4
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	440b      	add	r3, r1
 800098e:	761a      	strb	r2, [r3, #24]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b089      	sub	sp, #36	@ 0x24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f003 0307 	and.w	r3, r3, #7
 80009b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f1c3 0307 	rsb	r3, r3, #7
 80009be:	2b04      	cmp	r3, #4
 80009c0:	bf28      	it	cs
 80009c2:	2304      	movcs	r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3304      	adds	r3, #4
 80009ca:	2b06      	cmp	r3, #6
 80009cc:	d902      	bls.n	80009d4 <NVIC_EncodePriority+0x30>
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3b03      	subs	r3, #3
 80009d2:	e000      	b.n	80009d6 <NVIC_EncodePriority+0x32>
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d8:	f04f 32ff 	mov.w	r2, #4294967295
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	401a      	ands	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43d9      	mvns	r1, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	4313      	orrs	r3, r2
         );
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	@ 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00f      	b.n	8000a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <SysTick_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a2a:	210f      	movs	r1, #15
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f7ff ff8e 	bl	8000950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <SysTick_Config+0x40>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <SysTick_Config+0x40>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a58:	6878      	ldr	r0, [r7, #4]
 8000a5a:	f7ff ff29 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a78:	f7ff ff3e 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	6978      	ldr	r0, [r7, #20]
 8000a84:	f7ff ff8e 	bl	80009a4 <NVIC_EncodePriority>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff5d 	bl	8000950 <__NVIC_SetPriority>
}
 8000a96:	bf00      	nop
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff31 	bl	8000914 <__NVIC_EnableIRQ>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ffa2 	bl	8000a0c <SysTick_Config>
 8000ac8:	4603      	mov	r3, r0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b087      	sub	sp, #28
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae2:	e154      	b.n	8000d8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 8146 	beq.w	8000d88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d005      	beq.n	8000b14 <HAL_GPIO_Init+0x40>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d130      	bne.n	8000b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	fa02 f303 	lsl.w	r3, r2, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	f003 0201 	and.w	r2, r3, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d017      	beq.n	8000bb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689a      	ldr	r2, [r3, #8]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 0303 	and.w	r3, r3, #3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d123      	bne.n	8000c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	08da      	lsrs	r2, r3, #3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3208      	adds	r2, #8
 8000bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	220f      	movs	r2, #15
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	6939      	ldr	r1, [r7, #16]
 8000c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0203 	and.w	r2, r3, #3
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80a0 	beq.w	8000d88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c48:	4b58      	ldr	r3, [pc, #352]	@ (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4c:	4a57      	ldr	r2, [pc, #348]	@ (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c54:	4b55      	ldr	r3, [pc, #340]	@ (8000dac <HAL_GPIO_Init+0x2d8>)
 8000c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c60:	4a53      	ldr	r2, [pc, #332]	@ (8000db0 <HAL_GPIO_Init+0x2dc>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c8a:	d019      	beq.n	8000cc0 <HAL_GPIO_Init+0x1ec>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a49      	ldr	r2, [pc, #292]	@ (8000db4 <HAL_GPIO_Init+0x2e0>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d013      	beq.n	8000cbc <HAL_GPIO_Init+0x1e8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a48      	ldr	r2, [pc, #288]	@ (8000db8 <HAL_GPIO_Init+0x2e4>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d00d      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a47      	ldr	r2, [pc, #284]	@ (8000dbc <HAL_GPIO_Init+0x2e8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d007      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e0>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a46      	ldr	r2, [pc, #280]	@ (8000dc0 <HAL_GPIO_Init+0x2ec>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d101      	bne.n	8000cb0 <HAL_GPIO_Init+0x1dc>
 8000cac:	2304      	movs	r3, #4
 8000cae:	e008      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	e006      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	e004      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <HAL_GPIO_Init+0x1ee>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	0092      	lsls	r2, r2, #2
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cd2:	4937      	ldr	r1, [pc, #220]	@ (8000db0 <HAL_GPIO_Init+0x2dc>)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce0:	4b38      	ldr	r3, [pc, #224]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d04:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d2e:	4a25      	ldr	r2, [pc, #148]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d34:	4b23      	ldr	r3, [pc, #140]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d58:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_GPIO_Init+0x2f0>)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa22 f303 	lsr.w	r3, r2, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f47f aea3 	bne.w	8000ae4 <HAL_GPIO_Init+0x10>
  }
}
 8000d9e:	bf00      	nop
 8000da0:	bf00      	nop
 8000da2:	371c      	adds	r7, #28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	48000400 	.word	0x48000400
 8000db8:	48000800 	.word	0x48000800
 8000dbc:	48000c00 	.word	0x48000c00
 8000dc0:	48001000 	.word	0x48001000
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	807b      	strh	r3, [r7, #2]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dd8:	787b      	ldrb	r3, [r7, #1]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000de4:	e002      	b.n	8000dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	041a      	lsls	r2, r3, #16
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43d9      	mvns	r1, r3
 8000e16:	887b      	ldrh	r3, [r7, #2]
 8000e18:	400b      	ands	r3, r1
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fb58 	bl	8000500 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e08d      	b.n	8000f8a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d106      	bne.n	8000e88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fb8a 	bl	800059c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000eac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ebc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d107      	bne.n	8000ed6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	e006      	b.n	8000ee4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000ee2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d108      	bne.n	8000efe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	e007      	b.n	8000f0e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000f0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f20:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68da      	ldr	r2, [r3, #12]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f30:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69d9      	ldr	r1, [r3, #28]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 0201 	orr.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2220      	movs	r2, #32
 8000f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	817b      	strh	r3, [r7, #10]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b20      	cmp	r3, #32
 8000fb2:	f040 80fd 	bne.w	80011b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d101      	bne.n	8000fc4 <HAL_I2C_Master_Transmit+0x30>
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e0f6      	b.n	80011b2 <HAL_I2C_Master_Transmit+0x21e>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000fcc:	f7ff fc20 	bl	8000810 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2319      	movs	r3, #25
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 fa0a 	bl	80013f8 <I2C_WaitOnFlagUntilTimeout>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0e1      	b.n	80011b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2221      	movs	r2, #33	@ 0x21
 8000ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	893a      	ldrh	r2, [r7, #8]
 800100e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800101a:	b29b      	uxth	r3, r3
 800101c:	2bff      	cmp	r3, #255	@ 0xff
 800101e:	d906      	bls.n	800102e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	22ff      	movs	r2, #255	@ 0xff
 8001024:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e007      	b.n	800103e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001032:	b29a      	uxth	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800103c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001042:	2b00      	cmp	r3, #0
 8001044:	d024      	beq.n	8001090 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001060:	b29b      	uxth	r3, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	b29a      	uxth	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800106e:	3b01      	subs	r3, #1
 8001070:	b29a      	uxth	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800107a:	b2db      	uxtb	r3, r3
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	8979      	ldrh	r1, [r7, #10]
 8001082:	4b4e      	ldr	r3, [pc, #312]	@ (80011bc <HAL_I2C_Master_Transmit+0x228>)
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f000 fc05 	bl	8001898 <I2C_TransferConfig>
 800108e:	e066      	b.n	800115e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001094:	b2da      	uxtb	r2, r3
 8001096:	8979      	ldrh	r1, [r7, #10]
 8001098:	4b48      	ldr	r3, [pc, #288]	@ (80011bc <HAL_I2C_Master_Transmit+0x228>)
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 fbfa 	bl	8001898 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80010a4:	e05b      	b.n	800115e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	6a39      	ldr	r1, [r7, #32]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f9fd 	bl	80014aa <I2C_WaitOnTXISFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e07b      	b.n	80011b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	b29a      	uxth	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010e2:	3b01      	subs	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d034      	beq.n	800115e <HAL_I2C_Master_Transmit+0x1ca>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d130      	bne.n	800115e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	2200      	movs	r2, #0
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f000 f976 	bl	80013f8 <I2C_WaitOnFlagUntilTimeout>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e04d      	b.n	80011b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800111a:	b29b      	uxth	r3, r3
 800111c:	2bff      	cmp	r3, #255	@ 0xff
 800111e:	d90e      	bls.n	800113e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	22ff      	movs	r2, #255	@ 0xff
 8001124:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800112a:	b2da      	uxtb	r2, r3
 800112c:	8979      	ldrh	r1, [r7, #10]
 800112e:	2300      	movs	r3, #0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fbae 	bl	8001898 <I2C_TransferConfig>
 800113c:	e00f      	b.n	800115e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800114c:	b2da      	uxtb	r2, r3
 800114e:	8979      	ldrh	r1, [r7, #10]
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fb9d 	bl	8001898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001162:	b29b      	uxth	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d19e      	bne.n	80010a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f9e3 	bl	8001538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e01a      	b.n	80011b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2220      	movs	r2, #32
 8001182:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <HAL_I2C_Master_Transmit+0x22c>)
 8001190:	400b      	ands	r3, r1
 8001192:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2220      	movs	r2, #32
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	e000      	b.n	80011b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80011b0:	2302      	movs	r3, #2
  }
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	80002000 	.word	0x80002000
 80011c0:	fe00e800 	.word	0xfe00e800

080011c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	461a      	mov	r2, r3
 80011d0:	460b      	mov	r3, r1
 80011d2:	817b      	strh	r3, [r7, #10]
 80011d4:	4613      	mov	r3, r2
 80011d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b20      	cmp	r3, #32
 80011e2:	f040 80db 	bne.w	800139c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_I2C_Master_Receive+0x30>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e0d4      	b.n	800139e <HAL_I2C_Master_Receive+0x1da>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011fc:	f7ff fb08 	bl	8000810 <HAL_GetTick>
 8001200:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2319      	movs	r3, #25
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f8f2 	bl	80013f8 <I2C_WaitOnFlagUntilTimeout>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0bf      	b.n	800139e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2222      	movs	r2, #34	@ 0x22
 8001222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2210      	movs	r2, #16
 800122a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	893a      	ldrh	r2, [r7, #8]
 800123e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124a:	b29b      	uxth	r3, r3
 800124c:	2bff      	cmp	r3, #255	@ 0xff
 800124e:	d90e      	bls.n	800126e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2201      	movs	r2, #1
 8001254:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800125a:	b2da      	uxtb	r2, r3
 800125c:	8979      	ldrh	r1, [r7, #10]
 800125e:	4b52      	ldr	r3, [pc, #328]	@ (80013a8 <HAL_I2C_Master_Receive+0x1e4>)
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f000 fb16 	bl	8001898 <I2C_TransferConfig>
 800126c:	e06d      	b.n	800134a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001272:	b29a      	uxth	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800127c:	b2da      	uxtb	r2, r3
 800127e:	8979      	ldrh	r1, [r7, #10]
 8001280:	4b49      	ldr	r3, [pc, #292]	@ (80013a8 <HAL_I2C_Master_Receive+0x1e4>)
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f000 fb05 	bl	8001898 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800128e:	e05c      	b.n	800134a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	6a39      	ldr	r1, [r7, #32]
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 f993 	bl	80015c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e07c      	b.n	800139e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c0:	3b01      	subs	r3, #1
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	3b01      	subs	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d034      	beq.n	800134a <HAL_I2C_Master_Receive+0x186>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d130      	bne.n	800134a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2200      	movs	r2, #0
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f880 	bl	80013f8 <I2C_WaitOnFlagUntilTimeout>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e04d      	b.n	800139e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001306:	b29b      	uxth	r3, r3
 8001308:	2bff      	cmp	r3, #255	@ 0xff
 800130a:	d90e      	bls.n	800132a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	22ff      	movs	r2, #255	@ 0xff
 8001310:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001316:	b2da      	uxtb	r2, r3
 8001318:	8979      	ldrh	r1, [r7, #10]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 fab8 	bl	8001898 <I2C_TransferConfig>
 8001328:	e00f      	b.n	800134a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132e:	b29a      	uxth	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001338:	b2da      	uxtb	r2, r3
 800133a:	8979      	ldrh	r1, [r7, #10]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 faa7 	bl	8001898 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d19d      	bne.n	8001290 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	6a39      	ldr	r1, [r7, #32]
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 f8ed 	bl	8001538 <I2C_WaitOnSTOPFlagUntilTimeout>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e01a      	b.n	800139e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2220      	movs	r2, #32
 800136e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6859      	ldr	r1, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <HAL_I2C_Master_Receive+0x1e8>)
 800137c:	400b      	ands	r3, r1
 800137e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2220      	movs	r2, #32
 8001384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	e000      	b.n	800139e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800139c:	2302      	movs	r3, #2
  }
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	80002400 	.word	0x80002400
 80013ac:	fe00e800 	.word	0xfe00e800

080013b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d103      	bne.n	80013ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d007      	beq.n	80013ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	619a      	str	r2, [r3, #24]
  }
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	4613      	mov	r3, r2
 8001406:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001408:	e03b      	b.n	8001482 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f962 	bl	80016d8 <I2C_IsErrorOccurred>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e041      	b.n	80014a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001424:	d02d      	beq.n	8001482 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001426:	f7ff f9f3 	bl	8000810 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d302      	bcc.n	800143c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d122      	bne.n	8001482 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	4013      	ands	r3, r2
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	bf0c      	ite	eq
 800144c:	2301      	moveq	r3, #1
 800144e:	2300      	movne	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	429a      	cmp	r2, r3
 8001458:	d113      	bne.n	8001482 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	f043 0220 	orr.w	r2, r3, #32
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2220      	movs	r2, #32
 800146a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	699a      	ldr	r2, [r3, #24]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4013      	ands	r3, r2
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	429a      	cmp	r2, r3
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	429a      	cmp	r2, r3
 800149e:	d0b4      	beq.n	800140a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014b6:	e033      	b.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 f90b 	bl	80016d8 <I2C_IsErrorOccurred>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e031      	b.n	8001530 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d2:	d025      	beq.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d4:	f7ff f99c 	bl	8000810 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d302      	bcc.n	80014ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11a      	bne.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d013      	beq.n	8001520 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fc:	f043 0220 	orr.w	r2, r3, #32
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e007      	b.n	8001530 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d1c4      	bne.n	80014b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001544:	e02f      	b.n	80015a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f8c4 	bl	80016d8 <I2C_IsErrorOccurred>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e02d      	b.n	80015b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800155a:	f7ff f959 	bl	8000810 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	429a      	cmp	r2, r3
 8001568:	d302      	bcc.n	8001570 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d11a      	bne.n	80015a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0320 	and.w	r3, r3, #32
 800157a:	2b20      	cmp	r3, #32
 800157c:	d013      	beq.n	80015a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f043 0220 	orr.w	r2, r3, #32
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2220      	movs	r2, #32
 800158e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e007      	b.n	80015b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d1c8      	bne.n	8001546 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015cc:	2300      	movs	r3, #0
 80015ce:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80015d0:	e071      	b.n	80016b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f87e 	bl	80016d8 <I2C_IsErrorOccurred>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d13b      	bne.n	800166c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d138      	bne.n	800166c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d105      	bne.n	8001614 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	2b10      	cmp	r3, #16
 8001620:	d121      	bne.n	8001666 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2210      	movs	r2, #16
 8001628:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2204      	movs	r2, #4
 800162e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2220      	movs	r2, #32
 8001636:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6859      	ldr	r1, [r3, #4]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8001644:	400b      	ands	r3, r1
 8001646:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	75fb      	strb	r3, [r7, #23]
 8001664:	e002      	b.n	800166c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800166c:	f7ff f8d0 	bl	8000810 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	429a      	cmp	r2, r3
 800167a:	d302      	bcc.n	8001682 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d119      	bne.n	80016b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d116      	bne.n	80016b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b04      	cmp	r3, #4
 8001694:	d00f      	beq.n	80016b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f043 0220 	orr.w	r2, r3, #32
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2220      	movs	r2, #32
 80016a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d002      	beq.n	80016ca <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d083      	beq.n	80015d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	fe00e800 	.word	0xfe00e800

080016d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d068      	beq.n	80017d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2210      	movs	r2, #16
 800170a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800170c:	e049      	b.n	80017a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001714:	d045      	beq.n	80017a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001716:	f7ff f87b 	bl	8000810 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	429a      	cmp	r2, r3
 8001724:	d302      	bcc.n	800172c <I2C_IsErrorOccurred+0x54>
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d13a      	bne.n	80017a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800173e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800174a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800174e:	d121      	bne.n	8001794 <I2C_IsErrorOccurred+0xbc>
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001756:	d01d      	beq.n	8001794 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b20      	cmp	r3, #32
 800175c:	d01a      	beq.n	8001794 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800176c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800176e:	f7ff f84f 	bl	8000810 <HAL_GetTick>
 8001772:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001774:	e00e      	b.n	8001794 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001776:	f7ff f84b 	bl	8000810 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b19      	cmp	r3, #25
 8001782:	d907      	bls.n	8001794 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001784:	6a3b      	ldr	r3, [r7, #32]
 8001786:	f043 0320 	orr.w	r3, r3, #32
 800178a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001792:	e006      	b.n	80017a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0320 	and.w	r3, r3, #32
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d1e9      	bne.n	8001776 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d003      	beq.n	80017b8 <I2C_IsErrorOccurred+0xe0>
 80017b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0aa      	beq.n	800170e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80017b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d103      	bne.n	80017c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2220      	movs	r2, #32
 80017c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00b      	beq.n	8001800 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800181a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800182c:	6a3b      	ldr	r3, [r7, #32]
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800183c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001844:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff fdaf 	bl	80013b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <I2C_IsErrorOccurred+0x1bc>)
 800185e:	400b      	ands	r3, r1
 8001860:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	431a      	orrs	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2220      	movs	r2, #32
 8001872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001886:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800188a:	4618      	mov	r0, r3
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	fe00e800 	.word	0xfe00e800

08001898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	817b      	strh	r3, [r7, #10]
 80018a6:	4613      	mov	r3, r2
 80018a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018b0:	7a7b      	ldrb	r3, [r7, #9]
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	0d5b      	lsrs	r3, r3, #21
 80018d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80018d6:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <I2C_TransferConfig+0x60>)
 80018d8:	430b      	orrs	r3, r1
 80018da:	43db      	mvns	r3, r3
 80018dc:	ea02 0103 	and.w	r1, r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80018ea:	bf00      	nop
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	03ff63ff 	.word	0x03ff63ff

080018fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b20      	cmp	r3, #32
 8001910:	d138      	bne.n	8001984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800191c:	2302      	movs	r3, #2
 800191e:	e032      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2224      	movs	r2, #36	@ 0x24
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800194e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6819      	ldr	r1, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	e000      	b.n	8001986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001984:	2302      	movs	r3, #2
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001992:	b480      	push	{r7}
 8001994:	b085      	sub	sp, #20
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d139      	bne.n	8001a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e033      	b.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2224      	movs	r2, #36	@ 0x24
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e000      	b.n	8001a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a1c:	2302      	movs	r3, #2
  }
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a62:	d130      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a70:	d038      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2232      	movs	r2, #50	@ 0x32
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a98:	e002      	b.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aac:	d102      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f2      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac0:	d110      	bne.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e00f      	b.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d007      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001adc:	4a05      	ldr	r2, [pc, #20]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	431bde83 	.word	0x431bde83

08001b00 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0307 	bic.w	r3, r3, #7
 8001b12:	4a0f      	ldr	r2, [pc, #60]	@ (8001b50 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001b2c:	bf30      	wfi
 8001b2e:	e002      	b.n	8001b36 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001b30:	bf40      	sev
    __WFE();
 8001b32:	bf20      	wfe
    __WFE();
 8001b34:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6113      	str	r3, [r2, #16]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40007000 	.word	0x40007000
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_PWREx_PVD_PVM_IRQHandler+0x4c>)
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001b68:	f7ff ff5f 	bl	8001a2a <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba4 <HAL_PWREx_PVD_PVM_IRQHandler+0x4c>)
 8001b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b72:	615a      	str	r2, [r3, #20]

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_PWREx_PVD_PVM_IRQHandler+0x4c>)
 8001b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b78:	f003 0320 	and.w	r3, r3, #32
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8001b80:	f000 f812 	bl	8001ba8 <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <HAL_PWREx_PVD_PVM_IRQHandler+0x4c>)
 8001b86:	2220      	movs	r2, #32
 8001b88:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 8001b8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_PWREx_PVD_PVM_IRQHandler+0x4c>)
 8001b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d004      	beq.n	8001ba0 <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 8001b96:	f000 f80e 	bl	8001bb6 <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 8001b9a:	4b02      	ldr	r3, [pc, #8]	@ (8001ba4 <HAL_PWREx_PVD_PVM_IRQHandler+0x4c>)
 8001b9c:	2240      	movs	r2, #64	@ 0x40
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40010400 	.word	0x40010400

08001ba8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f000 bc02 	b.w	80023dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd8:	4b96      	ldr	r3, [pc, #600]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001be2:	4b94      	ldr	r3, [pc, #592]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80e4 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d007      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4c>
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2b0c      	cmp	r3, #12
 8001c04:	f040 808b 	bne.w	8001d1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f040 8087 	bne.w	8001d1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c10:	4b88      	ldr	r3, [pc, #544]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_RCC_OscConfig+0x64>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e3d9      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	4b81      	ldr	r3, [pc, #516]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_RCC_OscConfig+0x7e>
 8001c38:	4b7e      	ldr	r3, [pc, #504]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c40:	e005      	b.n	8001c4e <HAL_RCC_OscConfig+0x8a>
 8001c42:	4b7c      	ldr	r3, [pc, #496]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c48:	091b      	lsrs	r3, r3, #4
 8001c4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d223      	bcs.n	8001c9a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd54 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e3ba      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c66:	4b73      	ldr	r3, [pc, #460]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a72      	ldr	r2, [pc, #456]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b70      	ldr	r3, [pc, #448]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	496d      	ldr	r1, [pc, #436]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c84:	4b6b      	ldr	r3, [pc, #428]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	4968      	ldr	r1, [pc, #416]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
 8001c98:	e025      	b.n	8001ce6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9a:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a65      	ldr	r2, [pc, #404]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b63      	ldr	r3, [pc, #396]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4960      	ldr	r1, [pc, #384]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	495b      	ldr	r1, [pc, #364]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fd14 	bl	8002704 <RCC_SetFlashLatencyFromMSIRange>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e37a      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce6:	f000 fc81 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b51      	ldr	r3, [pc, #324]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4950      	ldr	r1, [pc, #320]	@ (8001e38 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	5ccb      	ldrb	r3, [r1, r3]
 8001cfa:	f003 031f 	and.w	r3, r3, #31
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a4e      	ldr	r2, [pc, #312]	@ (8001e3c <HAL_RCC_OscConfig+0x278>)
 8001d04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fd30 	bl	8000770 <HAL_InitTick>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d052      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	e35e      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d032      	beq.n	8001d8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d26:	4b43      	ldr	r3, [pc, #268]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a42      	ldr	r2, [pc, #264]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d32:	f7fe fd6d 	bl	8000810 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3a:	f7fe fd69 	bl	8000810 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e347      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d4c:	4b39      	ldr	r3, [pc, #228]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d58:	4b36      	ldr	r3, [pc, #216]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a35      	ldr	r2, [pc, #212]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	f043 0308 	orr.w	r3, r3, #8
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b33      	ldr	r3, [pc, #204]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4930      	ldr	r1, [pc, #192]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d76:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	492b      	ldr	r1, [pc, #172]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
 8001d8a:	e01a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d8c:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a28      	ldr	r2, [pc, #160]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d98:	f7fe fd3a 	bl	8000810 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da0:	f7fe fd36 	bl	8000810 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e314      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1dc>
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d073      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d005      	beq.n	8001de0 <HAL_RCC_OscConfig+0x21c>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d10e      	bne.n	8001df8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d10b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d063      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d15f      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e2f1      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_OscConfig+0x24c>
 8001e02:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e025      	b.n	8001e5c <HAL_RCC_OscConfig+0x298>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e18:	d114      	bne.n	8001e44 <HAL_RCC_OscConfig+0x280>
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a05      	ldr	r2, [pc, #20]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a02      	ldr	r2, [pc, #8]	@ (8001e34 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e013      	b.n	8001e5c <HAL_RCC_OscConfig+0x298>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08002e48 	.word	0x08002e48
 8001e3c:	2000000c 	.word	0x2000000c
 8001e40:	20000010 	.word	0x20000010
 8001e44:	4ba0      	ldr	r3, [pc, #640]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a9f      	ldr	r2, [pc, #636]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b9d      	ldr	r3, [pc, #628]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a9c      	ldr	r2, [pc, #624]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe fcd4 	bl	8000810 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7fe fcd0 	bl	8000810 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	@ 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e2ae      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7e:	4b92      	ldr	r3, [pc, #584]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2a8>
 8001e8a:	e014      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fcc0 	bl	8000810 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe fcbc 	bl	8000810 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e29a      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ea6:	4b88      	ldr	r3, [pc, #544]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f0      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2d0>
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d060      	beq.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x310>
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d119      	bne.n	8001f02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d116      	bne.n	8001f02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	4b7c      	ldr	r3, [pc, #496]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x328>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e277      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b76      	ldr	r3, [pc, #472]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	4973      	ldr	r1, [pc, #460]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f00:	e040      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d023      	beq.n	8001f52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6e      	ldr	r2, [pc, #440]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe fc7b 	bl	8000810 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1e:	f7fe fc77 	bl	8000810 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e255      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f30:	4b65      	ldr	r3, [pc, #404]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f3c:	4b62      	ldr	r3, [pc, #392]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	061b      	lsls	r3, r3, #24
 8001f4a:	495f      	ldr	r1, [pc, #380]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e018      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f52:	4b5d      	ldr	r3, [pc, #372]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a5c      	ldr	r2, [pc, #368]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fc57 	bl	8000810 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe fc53 	bl	8000810 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e231      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f78:	4b53      	ldr	r3, [pc, #332]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03c      	beq.n	800200a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f98:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7fe fc32 	bl	8000810 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe fc2e 	bl	8000810 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e20c      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fc2:	4b41      	ldr	r3, [pc, #260]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x3ec>
 8001fd0:	e01b      	b.n	800200a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fc15 	bl	8000810 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe fc11 	bl	8000810 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e1ef      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ffc:	4b32      	ldr	r3, [pc, #200]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ef      	bne.n	8001fea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 80a6 	beq.w	8002164 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800201c:	4b2a      	ldr	r3, [pc, #168]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002028:	4b27      	ldr	r3, [pc, #156]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800202a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202c:	4a26      	ldr	r2, [pc, #152]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800202e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002032:	6593      	str	r3, [r2, #88]	@ 0x58
 8002034:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8002036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002040:	2301      	movs	r3, #1
 8002042:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002044:	4b21      	ldr	r3, [pc, #132]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204c:	2b00      	cmp	r3, #0
 800204e:	d118      	bne.n	8002082 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002050:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1d      	ldr	r2, [pc, #116]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800205a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205c:	f7fe fbd8 	bl	8000810 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002064:	f7fe fbd4 	bl	8000810 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e1b2      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <HAL_RCC_OscConfig+0x508>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_RCC_OscConfig+0x4d8>
 800208a:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800209a:	e029      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d115      	bne.n	80020d0 <HAL_RCC_OscConfig+0x50c>
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a03      	ldr	r2, [pc, #12]	@ (80020c8 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020c4:	e014      	b.n	80020f0 <HAL_RCC_OscConfig+0x52c>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40007000 	.word	0x40007000
 80020d0:	4b9a      	ldr	r3, [pc, #616]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	4a99      	ldr	r2, [pc, #612]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020e0:	4b96      	ldr	r3, [pc, #600]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	4a95      	ldr	r2, [pc, #596]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d016      	beq.n	8002126 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7fe fb8a 	bl	8000810 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7fe fb86 	bl	8000810 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e162      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	4b89      	ldr	r3, [pc, #548]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ed      	beq.n	8002100 <HAL_RCC_OscConfig+0x53c>
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe fb73 	bl	8000810 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fb6f 	bl	8000810 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e14b      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	4b7d      	ldr	r3, [pc, #500]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1ed      	bne.n	800212e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b78      	ldr	r3, [pc, #480]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215c:	4a77      	ldr	r2, [pc, #476]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 800215e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002162:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0320 	and.w	r3, r3, #32
 800216c:	2b00      	cmp	r3, #0
 800216e:	d03c      	beq.n	80021ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01c      	beq.n	80021b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002178:	4b70      	ldr	r3, [pc, #448]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 800217a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800217e:	4a6f      	ldr	r2, [pc, #444]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fb42 	bl	8000810 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002190:	f7fe fb3e 	bl	8000810 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e11c      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021a2:	4b66      	ldr	r3, [pc, #408]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80021a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ef      	beq.n	8002190 <HAL_RCC_OscConfig+0x5cc>
 80021b0:	e01b      	b.n	80021ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b2:	4b62      	ldr	r3, [pc, #392]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80021b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021b8:	4a60      	ldr	r2, [pc, #384]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7fe fb25 	bl	8000810 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ca:	f7fe fb21 	bl	8000810 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0ff      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021dc:	4b57      	ldr	r3, [pc, #348]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80021de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ef      	bne.n	80021ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80f3 	beq.w	80023da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	f040 80c9 	bne.w	8002390 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021fe:	4b4f      	ldr	r3, [pc, #316]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0203 	and.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	429a      	cmp	r2, r3
 8002210:	d12c      	bne.n	800226c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	3b01      	subs	r3, #1
 800221e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d123      	bne.n	800226c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d11b      	bne.n	800226c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d113      	bne.n	800226c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d109      	bne.n	800226c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	085b      	lsrs	r3, r3, #1
 8002264:	3b01      	subs	r3, #1
 8002266:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d06b      	beq.n	8002344 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d062      	beq.n	8002338 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002272:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0ac      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002282:	4b2e      	ldr	r3, [pc, #184]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2d      	ldr	r2, [pc, #180]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002288:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800228e:	f7fe fabf 	bl	8000810 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fabb 	bl	8000810 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e099      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a8:	4b24      	ldr	r3, [pc, #144]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b4:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	4b21      	ldr	r3, [pc, #132]	@ (8002340 <HAL_RCC_OscConfig+0x77c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022c4:	3a01      	subs	r2, #1
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	4311      	orrs	r1, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022ce:	0212      	lsls	r2, r2, #8
 80022d0:	4311      	orrs	r1, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022d6:	0852      	lsrs	r2, r2, #1
 80022d8:	3a01      	subs	r2, #1
 80022da:	0552      	lsls	r2, r2, #21
 80022dc:	4311      	orrs	r1, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022e2:	0852      	lsrs	r2, r2, #1
 80022e4:	3a01      	subs	r2, #1
 80022e6:	0652      	lsls	r2, r2, #25
 80022e8:	4311      	orrs	r1, r2
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022ee:	06d2      	lsls	r2, r2, #27
 80022f0:	430a      	orrs	r2, r1
 80022f2:	4912      	ldr	r1, [pc, #72]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0f      	ldr	r2, [pc, #60]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 80022fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002302:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a0c      	ldr	r2, [pc, #48]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800230e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002310:	f7fe fa7e 	bl	8000810 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe fa7a 	bl	8000810 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e058      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_RCC_OscConfig+0x778>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002336:	e050      	b.n	80023da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e04f      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
 800233c:	40021000 	.word	0x40021000
 8002340:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b27      	ldr	r3, [pc, #156]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d144      	bne.n	80023da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002350:	4b24      	ldr	r3, [pc, #144]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800235c:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4a20      	ldr	r2, [pc, #128]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002366:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002368:	f7fe fa52 	bl	8000810 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fa4e 	bl	8000810 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e02c      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	4b18      	ldr	r3, [pc, #96]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x7ac>
 800238e:	e024      	b.n	80023da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b0c      	cmp	r3, #12
 8002394:	d01f      	beq.n	80023d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 800239c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fa35 	bl	8000810 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fa31 	bl	8000810 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e00f      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f0      	bne.n	80023aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4905      	ldr	r1, [pc, #20]	@ (80023e4 <HAL_RCC_OscConfig+0x820>)
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x824>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
 80023d4:	e001      	b.n	80023da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	feeefffc 	.word	0xfeeefffc

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0e7      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b75      	ldr	r3, [pc, #468]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b72      	ldr	r3, [pc, #456]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0207 	bic.w	r2, r3, #7
 8002416:	4970      	ldr	r1, [pc, #448]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b6e      	ldr	r3, [pc, #440]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0cf      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002448:	429a      	cmp	r2, r3
 800244a:	d908      	bls.n	800245e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244c:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4960      	ldr	r1, [pc, #384]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d04c      	beq.n	8002504 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b5a      	ldr	r3, [pc, #360]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d121      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0a6      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248a:	4b54      	ldr	r3, [pc, #336]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e09a      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a2:	4b4e      	ldr	r3, [pc, #312]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e08e      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b2:	4b4a      	ldr	r3, [pc, #296]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e086      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4943      	ldr	r1, [pc, #268]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d4:	f7fe f99c 	bl	8000810 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe f998 	bl	8000810 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e06e      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800251c:	429a      	cmp	r2, r3
 800251e:	d208      	bcs.n	8002532 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	492b      	ldr	r1, [pc, #172]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002532:	4b29      	ldr	r3, [pc, #164]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d210      	bcs.n	8002562 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 0207 	bic.w	r2, r3, #7
 8002548:	4923      	ldr	r1, [pc, #140]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002550:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d001      	beq.n	8002562 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e036      	b.n	80025d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256e:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4918      	ldr	r1, [pc, #96]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d009      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4910      	ldr	r1, [pc, #64]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 800259c:	4313      	orrs	r3, r2
 800259e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a0:	f000 f824 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	490b      	ldr	r1, [pc, #44]	@ (80025e0 <HAL_RCC_ClockConfig+0x1f4>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c0:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1fc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe f8d3 	bl	8000770 <HAL_InitTick>
 80025ca:	4603      	mov	r3, r0
 80025cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ce:	7afb      	ldrb	r3, [r7, #11]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	08002e48 	.word	0x08002e48
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	20000010 	.word	0x20000010

080025ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	@ 0x24
 80025f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fa:	4b3e      	ldr	r3, [pc, #248]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002604:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x34>
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d121      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d11e      	bne.n	800265e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002620:	4b34      	ldr	r3, [pc, #208]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d107      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800262c:	4b31      	ldr	r3, [pc, #196]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e005      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800263c:	4b2d      	ldr	r3, [pc, #180]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002648:	4a2b      	ldr	r2, [pc, #172]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002650:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10d      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d102      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002664:	4b25      	ldr	r3, [pc, #148]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	e004      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d101      	bne.n	8002674 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002670:	4b23      	ldr	r3, [pc, #140]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x114>)
 8002672:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b0c      	cmp	r3, #12
 8002678:	d134      	bne.n	80026e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800267a:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0xa6>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d003      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0xac>
 8002690:	e005      	b.n	800269e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002692:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002694:	617b      	str	r3, [r7, #20]
      break;
 8002696:	e005      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002698:	4b19      	ldr	r3, [pc, #100]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x114>)
 800269a:	617b      	str	r3, [r7, #20]
      break;
 800269c:	e002      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	617b      	str	r3, [r7, #20]
      break;
 80026a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a4:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	3301      	adds	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026b2:	4b10      	ldr	r3, [pc, #64]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	fb03 f202 	mul.w	r2, r3, r2
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	0e5b      	lsrs	r3, r3, #25
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	3301      	adds	r3, #1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026e4:	69bb      	ldr	r3, [r7, #24]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	@ 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08002e58 	.word	0x08002e58
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	007a1200 	.word	0x007a1200

08002704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002710:	4b2a      	ldr	r3, [pc, #168]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800271c:	f7ff f98c 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 8002720:	6178      	str	r0, [r7, #20]
 8002722:	e014      	b.n	800274e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	4a24      	ldr	r2, [pc, #144]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002730:	4b22      	ldr	r3, [pc, #136]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800273c:	f7ff f97c 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 8002740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002754:	d10b      	bne.n	800276e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b80      	cmp	r3, #128	@ 0x80
 800275a:	d919      	bls.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002760:	d902      	bls.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002762:	2302      	movs	r3, #2
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	e013      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	e010      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	@ 0x80
 8002772:	d902      	bls.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002774:	2303      	movs	r3, #3
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e00a      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b80      	cmp	r3, #128	@ 0x80
 800277e:	d102      	bne.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002780:	2302      	movs	r3, #2
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e004      	b.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b70      	cmp	r3, #112	@ 0x70
 800278a:	d101      	bne.n	8002790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800278c:	2301      	movs	r3, #1
 800278e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002790:	4b0b      	ldr	r3, [pc, #44]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 0207 	bic.w	r2, r3, #7
 8002798:	4909      	ldr	r1, [pc, #36]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a0:	4b07      	ldr	r3, [pc, #28]	@ (80027c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40022000 	.word	0x40022000

080027c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d0:	2300      	movs	r3, #0
 80027d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d031      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027e8:	d01a      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80027ee:	d814      	bhi.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d009      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80027f8:	d10f      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002806:	e00c      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f9f0 	bl	8002bf4 <RCCEx_PLLSAI1_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002818:	e003      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	74fb      	strb	r3, [r7, #19]
      break;
 800281e:	e000      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002828:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	494e      	ldr	r1, [pc, #312]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800283e:	e001      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 809e 	beq.w	800298e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002856:	4b46      	ldr	r3, [pc, #280]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00d      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286c:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	4a3f      	ldr	r2, [pc, #252]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002876:	6593      	str	r3, [r2, #88]	@ 0x58
 8002878:	4b3d      	ldr	r3, [pc, #244]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002884:	2301      	movs	r3, #1
 8002886:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002888:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a39      	ldr	r2, [pc, #228]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002894:	f7fd ffbc 	bl	8000810 <HAL_GetTick>
 8002898:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800289a:	e009      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fd ffb8 	bl	8000810 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d902      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	74fb      	strb	r3, [r7, #19]
        break;
 80028ae:	e005      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028b0:	4b30      	ldr	r3, [pc, #192]	@ (8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ef      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d15a      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01e      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d019      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028de:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028ea:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002900:	4a1b      	ldr	r2, [pc, #108]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800290a:	4a19      	ldr	r2, [pc, #100]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fd ff78 	bl	8000810 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002922:	e00b      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fd ff74 	bl	8000810 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d902      	bls.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	74fb      	strb	r3, [r7, #19]
            break;
 800293a:	e006      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ec      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002956:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	4904      	ldr	r1, [pc, #16]	@ (8002970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002966:	e009      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297c:	7c7b      	ldrb	r3, [r7, #17]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b9b      	ldr	r3, [pc, #620]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	4a9a      	ldr	r2, [pc, #616]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299a:	4b95      	ldr	r3, [pc, #596]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a0:	f023 0203 	bic.w	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4991      	ldr	r1, [pc, #580]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029bc:	4b8c      	ldr	r3, [pc, #560]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	f023 020c 	bic.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	4989      	ldr	r1, [pc, #548]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029de:	4b84      	ldr	r3, [pc, #528]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	4980      	ldr	r1, [pc, #512]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a00:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0e:	4978      	ldr	r1, [pc, #480]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a22:	4b73      	ldr	r3, [pc, #460]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a30:	496f      	ldr	r1, [pc, #444]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a44:	4b6a      	ldr	r3, [pc, #424]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4967      	ldr	r1, [pc, #412]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a66:	4b62      	ldr	r3, [pc, #392]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	495e      	ldr	r1, [pc, #376]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a88:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a96:	4956      	ldr	r1, [pc, #344]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aaa:	4b51      	ldr	r3, [pc, #324]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	494d      	ldr	r1, [pc, #308]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d028      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002acc:	4b48      	ldr	r3, [pc, #288]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ada:	4945      	ldr	r1, [pc, #276]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aea:	d106      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aec:	4b40      	ldr	r3, [pc, #256]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a3f      	ldr	r2, [pc, #252]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002af6:	60d3      	str	r3, [r2, #12]
 8002af8:	e011      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2101      	movs	r1, #1
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f872 	bl	8002bf4 <RCCEx_PLLSAI1_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d028      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b2a:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b30:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b38:	492d      	ldr	r1, [pc, #180]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	4a28      	ldr	r2, [pc, #160]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b54:	60d3      	str	r3, [r2, #12]
 8002b56:	e011      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f843 	bl	8002bf4 <RCCEx_PLLSAI1_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b88:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b8e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b96:	4916      	ldr	r1, [pc, #88]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3304      	adds	r3, #4
 8002bac:	2102      	movs	r1, #2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f820 	bl	8002bf4 <RCCEx_PLLSAI1_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bce:	4b08      	ldr	r3, [pc, #32]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bdc:	4904      	ldr	r1, [pc, #16]	@ (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002be4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c02:	4b74      	ldr	r3, [pc, #464]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d018      	beq.n	8002c40 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c0e:	4b71      	ldr	r3, [pc, #452]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0203 	and.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d10d      	bne.n	8002c3a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
       ||
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c26:	4b6b      	ldr	r3, [pc, #428]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
       ||
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d047      	beq.n	8002cca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e044      	b.n	8002cca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d018      	beq.n	8002c7a <RCCEx_PLLSAI1_Config+0x86>
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d825      	bhi.n	8002c98 <RCCEx_PLLSAI1_Config+0xa4>
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d002      	beq.n	8002c56 <RCCEx_PLLSAI1_Config+0x62>
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d009      	beq.n	8002c68 <RCCEx_PLLSAI1_Config+0x74>
 8002c54:	e020      	b.n	8002c98 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c56:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d11d      	bne.n	8002c9e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c66:	e01a      	b.n	8002c9e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c68:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c78:	e013      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c7a:	4b56      	ldr	r3, [pc, #344]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c86:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c96:	e006      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e004      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ca6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cae:	4b49      	ldr	r3, [pc, #292]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	4943      	ldr	r1, [pc, #268]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d17c      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cd0:	4b40      	ldr	r3, [pc, #256]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fd fd98 	bl	8000810 <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce2:	e009      	b.n	8002cf8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce4:	f7fd fd94 	bl	8000810 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cf6:	e005      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf8:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ef      	bne.n	8002ce4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d15f      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d110      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d10:	4b30      	ldr	r3, [pc, #192]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002d18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	6892      	ldr	r2, [r2, #8]
 8002d20:	0211      	lsls	r1, r2, #8
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68d2      	ldr	r2, [r2, #12]
 8002d26:	06d2      	lsls	r2, r2, #27
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	492a      	ldr	r1, [pc, #168]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	610b      	str	r3, [r1, #16]
 8002d30:	e027      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d112      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d38:	4b26      	ldr	r3, [pc, #152]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6892      	ldr	r2, [r2, #8]
 8002d48:	0211      	lsls	r1, r2, #8
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6912      	ldr	r2, [r2, #16]
 8002d4e:	0852      	lsrs	r2, r2, #1
 8002d50:	3a01      	subs	r2, #1
 8002d52:	0552      	lsls	r2, r2, #21
 8002d54:	430a      	orrs	r2, r1
 8002d56:	491f      	ldr	r1, [pc, #124]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	610b      	str	r3, [r1, #16]
 8002d5c:	e011      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d66:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6892      	ldr	r2, [r2, #8]
 8002d6e:	0211      	lsls	r1, r2, #8
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6952      	ldr	r2, [r2, #20]
 8002d74:	0852      	lsrs	r2, r2, #1
 8002d76:	3a01      	subs	r2, #1
 8002d78:	0652      	lsls	r2, r2, #25
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	4915      	ldr	r1, [pc, #84]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d82:	4b14      	ldr	r3, [pc, #80]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8e:	f7fd fd3f 	bl	8000810 <HAL_GetTick>
 8002d92:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d94:	e009      	b.n	8002daa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d96:	f7fd fd3b 	bl	8000810 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d902      	bls.n	8002daa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	73fb      	strb	r3, [r7, #15]
          break;
 8002da8:	e005      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002daa:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ef      	beq.n	8002d96 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d106      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	4903      	ldr	r1, [pc, #12]	@ (8002dd4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <memset>:
 8002dd8:	4402      	add	r2, r0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d100      	bne.n	8002de2 <memset+0xa>
 8002de0:	4770      	bx	lr
 8002de2:	f803 1b01 	strb.w	r1, [r3], #1
 8002de6:	e7f9      	b.n	8002ddc <memset+0x4>

08002de8 <__libc_init_array>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	4d0d      	ldr	r5, [pc, #52]	@ (8002e20 <__libc_init_array+0x38>)
 8002dec:	4c0d      	ldr	r4, [pc, #52]	@ (8002e24 <__libc_init_array+0x3c>)
 8002dee:	1b64      	subs	r4, r4, r5
 8002df0:	10a4      	asrs	r4, r4, #2
 8002df2:	2600      	movs	r6, #0
 8002df4:	42a6      	cmp	r6, r4
 8002df6:	d109      	bne.n	8002e0c <__libc_init_array+0x24>
 8002df8:	4d0b      	ldr	r5, [pc, #44]	@ (8002e28 <__libc_init_array+0x40>)
 8002dfa:	4c0c      	ldr	r4, [pc, #48]	@ (8002e2c <__libc_init_array+0x44>)
 8002dfc:	f000 f818 	bl	8002e30 <_init>
 8002e00:	1b64      	subs	r4, r4, r5
 8002e02:	10a4      	asrs	r4, r4, #2
 8002e04:	2600      	movs	r6, #0
 8002e06:	42a6      	cmp	r6, r4
 8002e08:	d105      	bne.n	8002e16 <__libc_init_array+0x2e>
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
 8002e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e10:	4798      	blx	r3
 8002e12:	3601      	adds	r6, #1
 8002e14:	e7ee      	b.n	8002df4 <__libc_init_array+0xc>
 8002e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1a:	4798      	blx	r3
 8002e1c:	3601      	adds	r6, #1
 8002e1e:	e7f2      	b.n	8002e06 <__libc_init_array+0x1e>
 8002e20:	08002e88 	.word	0x08002e88
 8002e24:	08002e88 	.word	0x08002e88
 8002e28:	08002e88 	.word	0x08002e88
 8002e2c:	08002e8c 	.word	0x08002e8c

08002e30 <_init>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	bf00      	nop
 8002e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e36:	bc08      	pop	{r3}
 8002e38:	469e      	mov	lr, r3
 8002e3a:	4770      	bx	lr

08002e3c <_fini>:
 8002e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3e:	bf00      	nop
 8002e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e42:	bc08      	pop	{r3}
 8002e44:	469e      	mov	lr, r3
 8002e46:	4770      	bx	lr
