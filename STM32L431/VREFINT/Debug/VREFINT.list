
VREFINT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ee4  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003070  08003070  00004070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b0  080030b0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b0  080030b0  000040b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030b4  080030b4  000040b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  080030c4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  080030c4  0000509c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008267  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001701  00000000  00000000  0000d2a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000e9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063a  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207be  00000000  00000000  0000f842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008f53  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb274  00000000  00000000  00038f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001041c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002148  00000000  00000000  0010420c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00106354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003058 	.word	0x08003058

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003058 	.word	0x08003058

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fa25 	bl	800061e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f86a 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f918 	bl	800040c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001dc:	f000 f8b2 	bl	8000344 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(A_en_GPIO_Port, A_en_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2101      	movs	r1, #1
 80001e4:	482b      	ldr	r0, [pc, #172]	@ (8000294 <main+0xc8>)
 80001e6:	f001 fd85 	bl	8001cf4 <HAL_GPIO_WritePin>
  (void)HAL_ADC_Start(&hadc1);
 80001ea:	482b      	ldr	r0, [pc, #172]	@ (8000298 <main+0xcc>)
 80001ec:	f000 fdba 	bl	8000d64 <HAL_ADC_Start>
  adc_val = HAL_ADC_GetValue(&hadc1);
 80001f0:	4829      	ldr	r0, [pc, #164]	@ (8000298 <main+0xcc>)
 80001f2:	f000 fea9 	bl	8000f48 <HAL_ADC_GetValue>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a28      	ldr	r2, [pc, #160]	@ (800029c <main+0xd0>)
 80001fa:	6013      	str	r3, [r2, #0]

  VREFINT_CAL = *((uint16_t*)0x1FFF75AA); //Data sheet page 39
 80001fc:	4b28      	ldr	r3, [pc, #160]	@ (80002a0 <main+0xd4>)
 80001fe:	881a      	ldrh	r2, [r3, #0]
 8000200:	4b28      	ldr	r3, [pc, #160]	@ (80002a4 <main+0xd8>)
 8000202:	801a      	strh	r2, [r3, #0]
  if (adc_val > 0) {
 8000204:	4b25      	ldr	r3, [pc, #148]	@ (800029c <main+0xd0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d00e      	beq.n	800022a <main+0x5e>
	  voltage = VREFINT_CAL * 3000/adc_val; //Reference sheet page 453
 800020c:	4b25      	ldr	r3, [pc, #148]	@ (80002a4 <main+0xd8>)
 800020e:	881b      	ldrh	r3, [r3, #0]
 8000210:	461a      	mov	r2, r3
 8000212:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	461a      	mov	r2, r3
 800021c:	4b1f      	ldr	r3, [pc, #124]	@ (800029c <main+0xd0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	fbb2 f3f3 	udiv	r3, r2, r3
 8000224:	4a20      	ldr	r2, [pc, #128]	@ (80002a8 <main+0xdc>)
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	e002      	b.n	8000230 <main+0x64>
  } else { voltage = 0;}
 800022a:	4b1f      	ldr	r3, [pc, #124]	@ (80002a8 <main+0xdc>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  (void)HAL_ADC_Start(&hadc1);
 8000230:	4819      	ldr	r0, [pc, #100]	@ (8000298 <main+0xcc>)
 8000232:	f000 fd97 	bl	8000d64 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8000236:	2164      	movs	r1, #100	@ 0x64
 8000238:	4817      	ldr	r0, [pc, #92]	@ (8000298 <main+0xcc>)
 800023a:	f000 fdf6 	bl	8000e2a <HAL_ADC_PollForConversion>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d120      	bne.n	8000286 <main+0xba>
	  	 	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000244:	4814      	ldr	r0, [pc, #80]	@ (8000298 <main+0xcc>)
 8000246:	f000 fe7f 	bl	8000f48 <HAL_ADC_GetValue>
 800024a:	4603      	mov	r3, r0
 800024c:	4a13      	ldr	r2, [pc, #76]	@ (800029c <main+0xd0>)
 800024e:	6013      	str	r3, [r2, #0]
	  	 	if (adc_val > 0) {
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <main+0xd0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d00e      	beq.n	8000276 <main+0xaa>
	  	 		  voltage = VREFINT_CAL * 3000/adc_val; //Reference sheet page 453
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <main+0xd8>)
 800025a:	881b      	ldrh	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000262:	fb02 f303 	mul.w	r3, r2, r3
 8000266:	461a      	mov	r2, r3
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <main+0xd0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4a0d      	ldr	r2, [pc, #52]	@ (80002a8 <main+0xdc>)
 8000272:	6013      	str	r3, [r2, #0]
 8000274:	e002      	b.n	800027c <main+0xb0>
	  	 	  } else { voltage = 0;}
 8000276:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <main+0xdc>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]

	  	 	  HAL_Delay(1000);
 800027c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000280:	f000 fa42 	bl	8000708 <HAL_Delay>
 8000284:	e7d4      	b.n	8000230 <main+0x64>
	  	} else {HAL_Delay(10);
 8000286:	200a      	movs	r0, #10
 8000288:	f000 fa3e 	bl	8000708 <HAL_Delay>
	  	voltage = 10;}
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <main+0xdc>)
 800028e:	220a      	movs	r2, #10
 8000290:	601a      	str	r2, [r3, #0]
	  (void)HAL_ADC_Start(&hadc1);
 8000292:	e7cd      	b.n	8000230 <main+0x64>
 8000294:	48000400 	.word	0x48000400
 8000298:	20000028 	.word	0x20000028
 800029c:	2000008c 	.word	0x2000008c
 80002a0:	1fff75aa 	.word	0x1fff75aa
 80002a4:	20000094 	.word	0x20000094
 80002a8:	20000090 	.word	0x20000090

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b096      	sub	sp, #88	@ 0x58
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	2244      	movs	r2, #68	@ 0x44
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fea0 	bl	8003000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80002d2:	f001 fd35 	bl	8001d40 <HAL_PWREx_ControlVoltageScaling>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002dc:	f000 f8c6 	bl	800046c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002e0:	2310      	movs	r3, #16
 80002e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002e4:	2301      	movs	r3, #1
 80002e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002ec:	2360      	movs	r3, #96	@ 0x60
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0314 	add.w	r3, r7, #20
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fd77 	bl	8001dec <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000304:	f000 f8b2 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031c:	463b      	mov	r3, r7
 800031e:	2100      	movs	r1, #0
 8000320:	4618      	mov	r0, r3
 8000322:	f002 f977 	bl	8002614 <HAL_RCC_ClockConfig>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800032c:	f000 f89e 	bl	800046c <Error_Handler>
  }
  SCB->VTOR = FLASH_BASE | 0x00000000U;
 8000330:	4b03      	ldr	r3, [pc, #12]	@ (8000340 <SystemClock_Config+0x94>)
 8000332:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000336:	609a      	str	r2, [r3, #8]
}
 8000338:	bf00      	nop
 800033a:	3758      	adds	r7, #88	@ 0x58
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034a:	463b      	mov	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
 8000358:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800035a:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <MX_ADC1_Init+0xbc>)
 800035c:	4a29      	ldr	r2, [pc, #164]	@ (8000404 <MX_ADC1_Init+0xc0>)
 800035e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000360:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <MX_ADC1_Init+0xbc>)
 8000362:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000366:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_ADC1_Init+0xbc>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_ADC1_Init+0xbc>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000374:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <MX_ADC1_Init+0xbc>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <MX_ADC1_Init+0xbc>)
 800037c:	2204      	movs	r2, #4
 800037e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000380:	4b1f      	ldr	r3, [pc, #124]	@ (8000400 <MX_ADC1_Init+0xbc>)
 8000382:	2200      	movs	r2, #0
 8000384:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000386:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_ADC1_Init+0xbc>)
 8000388:	2201      	movs	r2, #1
 800038a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <MX_ADC1_Init+0xbc>)
 800038e:	2201      	movs	r2, #1
 8000390:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_ADC1_Init+0xbc>)
 8000394:	2200      	movs	r2, #0
 8000396:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039a:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_ADC1_Init+0xbc>)
 800039c:	2200      	movs	r2, #0
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a0:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_ADC1_Init+0xbc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003a6:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <MX_ADC1_Init+0xbc>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003ae:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <MX_ADC1_Init+0xbc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003b4:	4b12      	ldr	r3, [pc, #72]	@ (8000400 <MX_ADC1_Init+0xbc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003bc:	4810      	ldr	r0, [pc, #64]	@ (8000400 <MX_ADC1_Init+0xbc>)
 80003be:	f000 fb8f 	bl	8000ae0 <HAL_ADC_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80003c8:	f000 f850 	bl	800046c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <MX_ADC1_Init+0xc4>)
 80003ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d0:	2306      	movs	r3, #6
 80003d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003d8:	237f      	movs	r3, #127	@ 0x7f
 80003da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003dc:	2304      	movs	r3, #4
 80003de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003e4:	463b      	mov	r3, r7
 80003e6:	4619      	mov	r1, r3
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_ADC1_Init+0xbc>)
 80003ea:	f000 fdbb 	bl	8000f64 <HAL_ADC_ConfigChannel>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80003f4:	f000 f83a 	bl	800046c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000028 	.word	0x20000028
 8000404:	50040000 	.word	0x50040000
 8000408:	80000001 	.word	0x80000001

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	60da      	str	r2, [r3, #12]
 800041e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b10      	ldr	r3, [pc, #64]	@ (8000464 <MX_GPIO_Init+0x58>)
 8000422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000424:	4a0f      	ldr	r2, [pc, #60]	@ (8000464 <MX_GPIO_Init+0x58>)
 8000426:	f043 0302 	orr.w	r3, r3, #2
 800042a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <MX_GPIO_Init+0x58>)
 800042e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000430:	f003 0302 	and.w	r3, r3, #2
 8000434:	603b      	str	r3, [r7, #0]
 8000436:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(A_en_GPIO_Port, A_en_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2101      	movs	r1, #1
 800043c:	480a      	ldr	r0, [pc, #40]	@ (8000468 <MX_GPIO_Init+0x5c>)
 800043e:	f001 fc59 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : A_en_Pin */
  GPIO_InitStruct.Pin = A_en_Pin;
 8000442:	2301      	movs	r3, #1
 8000444:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000446:	2301      	movs	r3, #1
 8000448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	2300      	movs	r3, #0
 8000450:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A_en_GPIO_Port, &GPIO_InitStruct);
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	4619      	mov	r1, r3
 8000456:	4804      	ldr	r0, [pc, #16]	@ (8000468 <MX_GPIO_Init+0x5c>)
 8000458:	f001 fad2 	bl	8001a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045c:	bf00      	nop
 800045e:	3718      	adds	r7, #24
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	48000400 	.word	0x48000400

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <Error_Handler+0x8>

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	@ (80004bc <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000482:	4a0e      	ldr	r2, [pc, #56]	@ (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6613      	str	r3, [r2, #96]	@ 0x60
 800048a:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	@ (80004bc <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800049a:	4a08      	ldr	r2, [pc, #32]	@ (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b09a      	sub	sp, #104	@ 0x68
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c8:	f107 030c 	add.w	r3, r7, #12
 80004cc:	225c      	movs	r2, #92	@ 0x5c
 80004ce:	2100      	movs	r1, #0
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 fd95 	bl	8003000 <memset>
  if(hadc->Instance==ADC1)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a19      	ldr	r2, [pc, #100]	@ (8000540 <HAL_ADC_MspInit+0x80>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d12a      	bne.n	8000536 <HAL_ADC_MspInit+0x76>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80004e4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80004e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80004ec:	2301      	movs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80004f0:	2301      	movs	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80004f4:	2310      	movs	r3, #16
 80004f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80004f8:	2307      	movs	r3, #7
 80004fa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80004fc:	2302      	movs	r3, #2
 80004fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000500:	2302      	movs	r3, #2
 8000502:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000508:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050a:	f107 030c 	add.w	r3, r7, #12
 800050e:	4618      	mov	r0, r3
 8000510:	f002 fa6c 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 800051a:	f7ff ffa7 	bl	800046c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <HAL_ADC_MspInit+0x84>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a08      	ldr	r2, [pc, #32]	@ (8000544 <HAL_ADC_MspInit+0x84>)
 8000524:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <HAL_ADC_MspInit+0x84>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000536:	bf00      	nop
 8000538:	3768      	adds	r7, #104	@ 0x68
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	50040000 	.word	0x50040000
 8000544:	40021000 	.word	0x40021000

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <NMI_Handler+0x4>

08000550 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <MemManage_Handler+0x4>

08000560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <BusFault_Handler+0x4>

08000568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <UsageFault_Handler+0x4>

08000570 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800059e:	f000 f893 	bl	80006c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <SystemInit+0x20>)
 80005ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005b2:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <SystemInit+0x20>)
 80005b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000604 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d0:	f7ff ffea 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490d      	ldr	r1, [pc, #52]	@ (800060c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000618 <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fa:	f002 fd09 	bl	8003010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005fe:	f7ff fde5 	bl	80001cc <main>

08000602 <LoopForever>:

LoopForever:
    b LoopForever
 8000602:	e7fe      	b.n	8000602 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000604:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800060c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000610:	080030b8 	.word	0x080030b8
  ldr r2, =_sbss
 8000614:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000618:	2000009c 	.word	0x2000009c

0800061c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800061c:	e7fe      	b.n	800061c <ADC1_IRQHandler>

0800061e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f001 f9b5 	bl	8001998 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800062e:	200f      	movs	r0, #15
 8000630:	f000 f80e 	bl	8000650 <HAL_InitTick>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	e001      	b.n	8000644 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000640:	f7ff ff1a 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000644:	79fb      	ldrb	r3, [r7, #7]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <HAL_InitTick+0x6c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d023      	beq.n	80006ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000664:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <HAL_InitTick+0x70>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <HAL_InitTick+0x6c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
 8000676:	fbb2 f3f3 	udiv	r3, r2, r3
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f9b3 	bl	80019e6 <HAL_SYSTICK_Config>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10f      	bne.n	80006a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d809      	bhi.n	80006a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800068c:	2200      	movs	r2, #0
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	f04f 30ff 	mov.w	r0, #4294967295
 8000694:	f001 f98b 	bl	80019ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000698:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <HAL_InitTick+0x74>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	e007      	b.n	80006b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e004      	b.n	80006b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006a6:	2301      	movs	r3, #1
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e001      	b.n	80006b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006ac:	2301      	movs	r3, #1
 80006ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000000 	.word	0x20000000
 80006c4:	20000004 	.word	0x20000004

080006c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <HAL_IncTick+0x20>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <HAL_IncTick+0x24>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	4a04      	ldr	r2, [pc, #16]	@ (80006ec <HAL_IncTick+0x24>)
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000098 	.word	0x20000098

080006f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return uwTick;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <HAL_GetTick+0x14>)
 80006f6:	681b      	ldr	r3, [r3, #0]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	20000098 	.word	0x20000098

08000708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000710:	f7ff ffee 	bl	80006f0 <HAL_GetTick>
 8000714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000720:	d005      	beq.n	800072e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <HAL_Delay+0x44>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	4413      	add	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800072e:	bf00      	nop
 8000730:	f7ff ffde 	bl	80006f0 <HAL_GetTick>
 8000734:	4602      	mov	r2, r0
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	429a      	cmp	r2, r3
 800073e:	d8f7      	bhi.n	8000730 <HAL_Delay+0x28>
  {
  }
}
 8000740:	bf00      	nop
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000008 	.word	0x20000008

08000750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	609a      	str	r2, [r3, #8]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	431a      	orrs	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	609a      	str	r2, [r3, #8]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3360      	adds	r3, #96	@ 0x60
 80007ca:	461a      	mov	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <LL_ADC_SetOffset+0x44>)
 80007da:	4013      	ands	r3, r2
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	430a      	orrs	r2, r1
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80007f0:	bf00      	nop
 80007f2:	371c      	adds	r7, #28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	03fff000 	.word	0x03fff000

08000800 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3360      	adds	r3, #96	@ 0x60
 800080e:	461a      	mov	r2, r3
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800082c:	b480      	push	{r7}
 800082e:	b087      	sub	sp, #28
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	3360      	adds	r3, #96	@ 0x60
 800083c:	461a      	mov	r2, r3
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	431a      	orrs	r2, r3
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000856:	bf00      	nop
 8000858:	371c      	adds	r7, #28
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	3330      	adds	r3, #48	@ 0x30
 8000898:	461a      	mov	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	f003 030c 	and.w	r3, r3, #12
 80008a4:	4413      	add	r3, r2
 80008a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	f003 031f 	and.w	r3, r3, #31
 80008b2:	211f      	movs	r1, #31
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	401a      	ands	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	0e9b      	lsrs	r3, r3, #26
 80008c0:	f003 011f 	and.w	r1, r3, #31
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	f003 031f 	and.w	r3, r3, #31
 80008ca:	fa01 f303 	lsl.w	r3, r1, r3
 80008ce:	431a      	orrs	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80008d4:	bf00      	nop
 80008d6:	371c      	adds	r7, #28
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3314      	adds	r3, #20
 80008f0:	461a      	mov	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	0e5b      	lsrs	r3, r3, #25
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	4413      	add	r3, r2
 80008fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	0d1b      	lsrs	r3, r3, #20
 8000908:	f003 031f 	and.w	r3, r3, #31
 800090c:	2107      	movs	r1, #7
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	401a      	ands	r2, r3
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	0d1b      	lsrs	r3, r3, #20
 800091a:	f003 031f 	and.w	r3, r3, #31
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	fa01 f303 	lsl.w	r3, r1, r3
 8000924:	431a      	orrs	r2, r3
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800092a:	bf00      	nop
 800092c:	371c      	adds	r7, #28
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000950:	43db      	mvns	r3, r3
 8000952:	401a      	ands	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0318 	and.w	r3, r3, #24
 800095a:	4908      	ldr	r1, [pc, #32]	@ (800097c <LL_ADC_SetChannelSingleDiff+0x44>)
 800095c:	40d9      	lsrs	r1, r3
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	400b      	ands	r3, r1
 8000962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000966:	431a      	orrs	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	0007ffff 	.word	0x0007ffff

08000980 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	689b      	ldr	r3, [r3, #8]
 800098c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000990:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	6093      	str	r3, [r2, #8]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009b8:	d101      	bne.n	80009be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80009ba:	2301      	movs	r3, #1
 80009bc:	e000      	b.n	80009c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80009be:	2300      	movs	r3, #0
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80009dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000a08:	d101      	bne.n	8000a0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a30:	f043 0201 	orr.w	r2, r3, #1
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d101      	bne.n	8000a5c <LL_ADC_IsEnabled+0x18>
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <LL_ADC_IsEnabled+0x1a>
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a7e:	f043 0204 	orr.w	r2, r3, #4
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d101      	bne.n	8000aaa <LL_ADC_REG_IsConversionOngoing+0x18>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	d101      	bne.n	8000ad0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e126      	b.n	8000d48 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d109      	bne.n	8000b1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fcd9 	bl	80004c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff3f 	bl	80009a4 <LL_ADC_IsDeepPowerDownEnabled>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff25 	bl	8000980 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff ff5a 	bl	80009f4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d115      	bne.n	8000b72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff3e 	bl	80009cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000b50:	4b7f      	ldr	r3, [pc, #508]	@ (8000d50 <HAL_ADC_Init+0x270>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	099b      	lsrs	r3, r3, #6
 8000b56:	4a7f      	ldr	r2, [pc, #508]	@ (8000d54 <HAL_ADC_Init+0x274>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	099b      	lsrs	r3, r3, #6
 8000b5e:	3301      	adds	r3, #1
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b64:	e002      	b.n	8000b6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f9      	bne.n	8000b66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff3c 	bl	80009f4 <LL_ADC_IsInternalRegulatorEnabled>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d10d      	bne.n	8000b9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b86:	f043 0210 	orr.w	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	f043 0201 	orr.w	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff75 	bl	8000a92 <LL_ADC_REG_IsConversionOngoing>
 8000ba8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 80bf 	bne.w	8000d36 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 80bb 	bne.w	8000d36 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bc4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000bc8:	f043 0202 	orr.w	r2, r3, #2
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff35 	bl	8000a44 <LL_ADC_IsEnabled>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d10b      	bne.n	8000bf8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000be0:	485d      	ldr	r0, [pc, #372]	@ (8000d58 <HAL_ADC_Init+0x278>)
 8000be2:	f7ff ff2f 	bl	8000a44 <LL_ADC_IsEnabled>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d105      	bne.n	8000bf8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	485a      	ldr	r0, [pc, #360]	@ (8000d5c <HAL_ADC_Init+0x27c>)
 8000bf4:	f7ff fdac 	bl	8000750 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7e5b      	ldrb	r3, [r3, #25]
 8000bfc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c02:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000c08:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000c0e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c16:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d106      	bne.n	8000c34 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	045b      	lsls	r3, r3, #17
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d009      	beq.n	8000c50 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c40:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c48:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	4b42      	ldr	r3, [pc, #264]	@ (8000d60 <HAL_ADC_Init+0x280>)
 8000c58:	4013      	ands	r3, r2
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6812      	ldr	r2, [r2, #0]
 8000c5e:	69b9      	ldr	r1, [r7, #24]
 8000c60:	430b      	orrs	r3, r1
 8000c62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff25 	bl	8000ab8 <LL_ADC_INJ_IsConversionOngoing>
 8000c6e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d13d      	bne.n	8000cf2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d13a      	bne.n	8000cf2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c80:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000c88:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000c98:	f023 0302 	bic.w	r3, r3, #2
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6812      	ldr	r2, [r2, #0]
 8000ca0:	69b9      	ldr	r1, [r7, #24]
 8000ca2:	430b      	orrs	r3, r1
 8000ca4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d118      	bne.n	8000ce2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	691b      	ldr	r3, [r3, #16]
 8000cb6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000cba:	f023 0304 	bic.w	r3, r3, #4
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000cc6:	4311      	orrs	r1, r2
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000ccc:	4311      	orrs	r1, r2
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 0201 	orr.w	r2, r2, #1
 8000cde:	611a      	str	r2, [r3, #16]
 8000ce0:	e007      	b.n	8000cf2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0201 	bic.w	r2, r2, #1
 8000cf0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10c      	bne.n	8000d14 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d00:	f023 010f 	bic.w	r1, r3, #15
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d12:	e007      	b.n	8000d24 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 020f 	bic.w	r2, r2, #15
 8000d22:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d28:	f023 0303 	bic.w	r3, r3, #3
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d34:	e007      	b.n	8000d46 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d3a:	f043 0210 	orr.w	r2, r3, #16
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000d46:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3720      	adds	r7, #32
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	053e2d63 	.word	0x053e2d63
 8000d58:	50040000 	.word	0x50040000
 8000d5c:	50040300 	.word	0x50040300
 8000d60:	fff0c007 	.word	0xfff0c007

08000d64 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe8e 	bl	8000a92 <LL_ADC_REG_IsConversionOngoing>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14f      	bne.n	8000e1c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <HAL_ADC_Start+0x26>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e04b      	b.n	8000e22 <HAL_ADC_Start+0xbe>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 fcc8 	bl	8001728 <ADC_Enable>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d137      	bne.n	8000e12 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000da6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000daa:	f023 0301 	bic.w	r3, r3, #1
 8000dae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000dc2:	d106      	bne.n	8000dd2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc8:	f023 0206 	bic.w	r2, r3, #6
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8000dd0:	e002      	b.n	8000dd8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	221c      	movs	r2, #28
 8000dde:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dfa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dfe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fe2d 	bl	8000a6a <LL_ADC_REG_StartConversion>
 8000e10:	e006      	b.n	8000e20 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000e1a:	e001      	b.n	8000e20 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	d102      	bne.n	8000e42 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e010      	b.n	8000e64 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d007      	beq.n	8000e60 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e54:	f043 0220 	orr.w	r2, r3, #32
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e06f      	b.n	8000f40 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8000e60:	2304      	movs	r3, #4
 8000e62:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e64:	f7ff fc44 	bl	80006f0 <HAL_GetTick>
 8000e68:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000e6a:	e021      	b.n	8000eb0 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	d01d      	beq.n	8000eb0 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8000e74:	f7ff fc3c 	bl	80006f0 <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	683a      	ldr	r2, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d302      	bcc.n	8000e8a <HAL_ADC_PollForConversion+0x60>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d112      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10b      	bne.n	8000eb0 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e9c:	f043 0204 	orr.w	r2, r3, #4
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e047      	b.n	8000f40 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0d6      	beq.n	8000e6c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ec2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fcc7 	bl	8000862 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d01c      	beq.n	8000f14 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7e5b      	ldrb	r3, [r3, #25]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d118      	bne.n	8000f14 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d111      	bne.n	8000f14 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d105      	bne.n	8000f14 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d104      	bne.n	8000f2c <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2208      	movs	r2, #8
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	e008      	b.n	8000f3e <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b6      	sub	sp, #216	@ 0xd8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_ConfigChannel+0x22>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e3bb      	b.n	80016fe <HAL_ADC_ConfigChannel+0x79a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fd7d 	bl	8000a92 <LL_ADC_REG_IsConversionOngoing>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 83a0 	bne.w	80016e0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d824      	bhi.n	8000ffa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	3b02      	subs	r3, #2
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d81b      	bhi.n	8000ff2 <HAL_ADC_ConfigChannel+0x8e>
 8000fba:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc0 <HAL_ADC_ConfigChannel+0x5c>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fd1 	.word	0x08000fd1
 8000fc4:	08000fd9 	.word	0x08000fd9
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000fe9 	.word	0x08000fe9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000fd0:	230c      	movs	r3, #12
 8000fd2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000fd6:	e010      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000fd8:	2312      	movs	r3, #18
 8000fda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000fde:	e00c      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000fe0:	2318      	movs	r3, #24
 8000fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000fe6:	e008      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000ff0:	e003      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000ff2:	2306      	movs	r3, #6
 8000ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000ff8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001008:	f7ff fc3e 	bl	8000888 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fd3e 	bl	8000a92 <LL_ADC_REG_IsConversionOngoing>
 8001016:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fd4a 	bl	8000ab8 <LL_ADC_INJ_IsConversionOngoing>
 8001024:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800102c:	2b00      	cmp	r3, #0
 800102e:	f040 81a4 	bne.w	800137a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001036:	2b00      	cmp	r3, #0
 8001038:	f040 819f 	bne.w	800137a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	6819      	ldr	r1, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	461a      	mov	r2, r3
 800104a:	f7ff fc49 	bl	80008e0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	08db      	lsrs	r3, r3, #3
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	2b04      	cmp	r3, #4
 800106e:	d00a      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6919      	ldr	r1, [r3, #16]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001080:	f7ff fb9a 	bl	80007b8 <LL_ADC_SetOffset>
 8001084:	e179      	b.n	800137a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fbb7 	bl	8000800 <LL_ADC_GetOffsetChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10a      	bne.n	80010b2 <HAL_ADC_ConfigChannel+0x14e>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fbac 	bl	8000800 <LL_ADC_GetOffsetChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	0e9b      	lsrs	r3, r3, #26
 80010ac:	f003 021f 	and.w	r2, r3, #31
 80010b0:	e01e      	b.n	80010f0 <HAL_ADC_ConfigChannel+0x18c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fba1 	bl	8000800 <LL_ADC_GetOffsetChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80010d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80010e0:	2320      	movs	r3, #32
 80010e2:	e004      	b.n	80010ee <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80010e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010e8:	fab3 f383 	clz	r3, r3
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x1a4>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	0e9b      	lsrs	r3, r3, #26
 8001102:	f003 031f 	and.w	r3, r3, #31
 8001106:	e018      	b.n	800113a <HAL_ADC_ConfigChannel+0x1d6>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001114:	fa93 f3a3 	rbit	r3, r3
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800111c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001124:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800112c:	2320      	movs	r3, #32
 800112e:	e004      	b.n	800113a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001130:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800113a:	429a      	cmp	r2, r3
 800113c:	d106      	bne.n	800114c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb70 	bl	800082c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fb54 	bl	8000800 <LL_ADC_GetOffsetChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x214>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fb49 	bl	8000800 <LL_ADC_GetOffsetChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	0e9b      	lsrs	r3, r3, #26
 8001172:	f003 021f 	and.w	r2, r3, #31
 8001176:	e01e      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x252>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fb3e 	bl	8000800 <LL_ADC_GetOffsetChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800118e:	fa93 f3a3 	rbit	r3, r3
 8001192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800119e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80011a6:	2320      	movs	r3, #32
 80011a8:	e004      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80011aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x26a>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0e9b      	lsrs	r3, r3, #26
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	e018      	b.n	8001200 <HAL_ADC_ConfigChannel+0x29c>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011da:	fa93 f3a3 	rbit	r3, r3
 80011de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80011e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80011e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80011ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80011f2:	2320      	movs	r3, #32
 80011f4:	e004      	b.n	8001200 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80011f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001200:	429a      	cmp	r2, r3
 8001202:	d106      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	2101      	movs	r1, #1
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fb0d 	bl	800082c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff faf1 	bl	8000800 <LL_ADC_GetOffsetChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <HAL_ADC_ConfigChannel+0x2da>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2102      	movs	r1, #2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fae6 	bl	8000800 <LL_ADC_GetOffsetChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	0e9b      	lsrs	r3, r3, #26
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	e01e      	b.n	800127c <HAL_ADC_ConfigChannel+0x318>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2102      	movs	r1, #2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fadb 	bl	8000800 <LL_ADC_GetOffsetChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800125c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001260:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001264:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001268:	2b00      	cmp	r3, #0
 800126a:	d101      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800126c:	2320      	movs	r3, #32
 800126e:	e004      	b.n	800127a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001274:	fab3 f383 	clz	r3, r3
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001284:	2b00      	cmp	r3, #0
 8001286:	d105      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x330>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0e9b      	lsrs	r3, r3, #26
 800128e:	f003 031f 	and.w	r3, r3, #31
 8001292:	e014      	b.n	80012be <HAL_ADC_ConfigChannel+0x35a>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800129c:	fa93 f3a3 	rbit	r3, r3
 80012a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80012a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80012a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80012b0:	2320      	movs	r3, #32
 80012b2:	e004      	b.n	80012be <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80012b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80012be:	429a      	cmp	r2, r3
 80012c0:	d106      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	2102      	movs	r1, #2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff faae 	bl	800082c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2103      	movs	r1, #3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fa92 	bl	8000800 <LL_ADC_GetOffsetChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10a      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x398>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2103      	movs	r1, #3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fa87 	bl	8000800 <LL_ADC_GetOffsetChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	0e9b      	lsrs	r3, r3, #26
 80012f6:	f003 021f 	and.w	r2, r3, #31
 80012fa:	e017      	b.n	800132c <HAL_ADC_ConfigChannel+0x3c8>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2103      	movs	r1, #3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fa7c 	bl	8000800 <LL_ADC_GetOffsetChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001316:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800131e:	2320      	movs	r3, #32
 8001320:	e003      	b.n	800132a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001324:	fab3 f383 	clz	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x3e0>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0e9b      	lsrs	r3, r3, #26
 800133e:	f003 031f 	and.w	r3, r3, #31
 8001342:	e011      	b.n	8001368 <HAL_ADC_ConfigChannel+0x404>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001354:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800135c:	2320      	movs	r3, #32
 800135e:	e003      	b.n	8001368 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001360:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001368:	429a      	cmp	r2, r3
 800136a:	d106      	bne.n	800137a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	2103      	movs	r1, #3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fa59 	bl	800082c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fb60 	bl	8000a44 <LL_ADC_IsEnabled>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8140 	bne.w	800160c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	461a      	mov	r2, r3
 800139a:	f7ff facd 	bl	8000938 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	4a8f      	ldr	r2, [pc, #572]	@ (80015e0 <HAL_ADC_ConfigChannel+0x67c>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	f040 8131 	bne.w	800160c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10b      	bne.n	80013d2 <HAL_ADC_ConfigChannel+0x46e>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	0e9b      	lsrs	r3, r3, #26
 80013c0:	3301      	adds	r3, #1
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	2b09      	cmp	r3, #9
 80013c8:	bf94      	ite	ls
 80013ca:	2301      	movls	r3, #1
 80013cc:	2300      	movhi	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	e019      	b.n	8001406 <HAL_ADC_ConfigChannel+0x4a2>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013da:	fa93 f3a3 	rbit	r3, r3
 80013de:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80013e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80013e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80013ea:	2320      	movs	r3, #32
 80013ec:	e003      	b.n	80013f6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80013ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2b09      	cmp	r3, #9
 80013fe:	bf94      	ite	ls
 8001400:	2301      	movls	r3, #1
 8001402:	2300      	movhi	r3, #0
 8001404:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001406:	2b00      	cmp	r3, #0
 8001408:	d079      	beq.n	80014fe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x4c2>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	0e9b      	lsrs	r3, r3, #26
 800141c:	3301      	adds	r3, #1
 800141e:	069b      	lsls	r3, r3, #26
 8001420:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001424:	e015      	b.n	8001452 <HAL_ADC_ConfigChannel+0x4ee>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001436:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800143e:	2320      	movs	r3, #32
 8001440:	e003      	b.n	800144a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001442:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	069b      	lsls	r3, r3, #26
 800144e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800145a:	2b00      	cmp	r3, #0
 800145c:	d109      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x50e>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0e9b      	lsrs	r3, r3, #26
 8001464:	3301      	adds	r3, #1
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	e017      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x53e>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800147a:	fa93 f3a3 	rbit	r3, r3
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800148a:	2320      	movs	r3, #32
 800148c:	e003      	b.n	8001496 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800148e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	3301      	adds	r3, #1
 8001498:	f003 031f 	and.w	r3, r3, #31
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	ea42 0103 	orr.w	r1, r2, r3
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10a      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x564>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	0e9b      	lsrs	r3, r3, #26
 80014b8:	3301      	adds	r3, #1
 80014ba:	f003 021f 	and.w	r2, r3, #31
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	051b      	lsls	r3, r3, #20
 80014c6:	e018      	b.n	80014fa <HAL_ADC_ConfigChannel+0x596>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80014d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80014da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80014e0:	2320      	movs	r3, #32
 80014e2:	e003      	b.n	80014ec <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80014e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	f003 021f 	and.w	r2, r3, #31
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014fa:	430b      	orrs	r3, r1
 80014fc:	e081      	b.n	8001602 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001506:	2b00      	cmp	r3, #0
 8001508:	d107      	bne.n	800151a <HAL_ADC_ConfigChannel+0x5b6>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	0e9b      	lsrs	r3, r3, #26
 8001510:	3301      	adds	r3, #1
 8001512:	069b      	lsls	r3, r3, #26
 8001514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001518:	e015      	b.n	8001546 <HAL_ADC_ConfigChannel+0x5e2>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800152c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001532:	2320      	movs	r3, #32
 8001534:	e003      	b.n	800153e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001538:	fab3 f383 	clz	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	3301      	adds	r3, #1
 8001540:	069b      	lsls	r3, r3, #26
 8001542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x602>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	0e9b      	lsrs	r3, r3, #26
 8001558:	3301      	adds	r3, #1
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	e017      	b.n	8001596 <HAL_ADC_ConfigChannel+0x632>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	fa93 f3a3 	rbit	r3, r3
 8001572:	61bb      	str	r3, [r7, #24]
  return result;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800157e:	2320      	movs	r3, #32
 8001580:	e003      	b.n	800158a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	ea42 0103 	orr.w	r1, r2, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10d      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x65e>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	0e9b      	lsrs	r3, r3, #26
 80015ac:	3301      	adds	r3, #1
 80015ae:	f003 021f 	and.w	r2, r3, #31
 80015b2:	4613      	mov	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	3b1e      	subs	r3, #30
 80015ba:	051b      	lsls	r3, r3, #20
 80015bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015c0:	e01e      	b.n	8001600 <HAL_ADC_ConfigChannel+0x69c>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	60fb      	str	r3, [r7, #12]
  return result;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d104      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80015da:	2320      	movs	r3, #32
 80015dc:	e006      	b.n	80015ec <HAL_ADC_ConfigChannel+0x688>
 80015de:	bf00      	nop
 80015e0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f003 021f 	and.w	r2, r3, #31
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	3b1e      	subs	r3, #30
 80015fa:	051b      	lsls	r3, r3, #20
 80015fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001600:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff f96a 	bl	80008e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b3d      	ldr	r3, [pc, #244]	@ (8001708 <HAL_ADC_ConfigChannel+0x7a4>)
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d06c      	beq.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001618:	483c      	ldr	r0, [pc, #240]	@ (800170c <HAL_ADC_ConfigChannel+0x7a8>)
 800161a:	f7ff f8bf 	bl	800079c <LL_ADC_GetCommonPathInternalCh>
 800161e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a3a      	ldr	r2, [pc, #232]	@ (8001710 <HAL_ADC_ConfigChannel+0x7ac>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d127      	bne.n	800167c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800162c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d121      	bne.n	800167c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a35      	ldr	r2, [pc, #212]	@ (8001714 <HAL_ADC_ConfigChannel+0x7b0>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d157      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001642:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001646:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800164a:	4619      	mov	r1, r3
 800164c:	482f      	ldr	r0, [pc, #188]	@ (800170c <HAL_ADC_ConfigChannel+0x7a8>)
 800164e:	f7ff f892 	bl	8000776 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001652:	4b31      	ldr	r3, [pc, #196]	@ (8001718 <HAL_ADC_ConfigChannel+0x7b4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	4a30      	ldr	r2, [pc, #192]	@ (800171c <HAL_ADC_ConfigChannel+0x7b8>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	099b      	lsrs	r3, r3, #6
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800166c:	e002      	b.n	8001674 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	3b01      	subs	r3, #1
 8001672:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f9      	bne.n	800166e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800167a:	e03a      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a27      	ldr	r2, [pc, #156]	@ (8001720 <HAL_ADC_ConfigChannel+0x7bc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d113      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001686:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800168a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10d      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1f      	ldr	r2, [pc, #124]	@ (8001714 <HAL_ADC_ConfigChannel+0x7b0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d12a      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800169c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016a4:	4619      	mov	r1, r3
 80016a6:	4819      	ldr	r0, [pc, #100]	@ (800170c <HAL_ADC_ConfigChannel+0x7a8>)
 80016a8:	f7ff f865 	bl	8000776 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80016ac:	e021      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001724 <HAL_ADC_ConfigChannel+0x7c0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d11c      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80016b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d116      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <HAL_ADC_ConfigChannel+0x7b0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d111      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80016d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <HAL_ADC_ConfigChannel+0x7a8>)
 80016da:	f7ff f84c 	bl	8000776 <LL_ADC_SetCommonPathInternalCh>
 80016de:	e008      	b.n	80016f2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e4:	f043 0220 	orr.w	r2, r3, #32
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80016fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	37d8      	adds	r7, #216	@ 0xd8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	80080000 	.word	0x80080000
 800170c:	50040300 	.word	0x50040300
 8001710:	c7520000 	.word	0xc7520000
 8001714:	50040000 	.word	0x50040000
 8001718:	20000000 	.word	0x20000000
 800171c:	053e2d63 	.word	0x053e2d63
 8001720:	cb840000 	.word	0xcb840000
 8001724:	80000001 	.word	0x80000001

08001728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f983 	bl	8000a44 <LL_ADC_IsEnabled>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d169      	bne.n	8001818 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <ADC_Enable+0xfc>)
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00d      	beq.n	800176e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001756:	f043 0210 	orr.w	r2, r3, #16
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e055      	b.n	800181a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff f952 	bl	8000a1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001778:	482b      	ldr	r0, [pc, #172]	@ (8001828 <ADC_Enable+0x100>)
 800177a:	f7ff f80f 	bl	800079c <LL_ADC_GetCommonPathInternalCh>
 800177e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001780:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <ADC_Enable+0x104>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <ADC_Enable+0x108>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017a2:	e002      	b.n	80017aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80017b0:	f7fe ff9e 	bl	80006f0 <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017b6:	e028      	b.n	800180a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f941 	bl	8000a44 <LL_ADC_IsEnabled>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff f925 	bl	8000a1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017d2:	f7fe ff8d 	bl	80006f0 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d914      	bls.n	800180a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d00d      	beq.n	800180a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f2:	f043 0210 	orr.w	r2, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e007      	b.n	800181a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b01      	cmp	r3, #1
 8001816:	d1cf      	bne.n	80017b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	8000003f 	.word	0x8000003f
 8001828:	50040300 	.word	0x50040300
 800182c:	20000000 	.word	0x20000000
 8001830:	053e2d63 	.word	0x053e2d63

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	db0a      	blt.n	80018c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <__NVIC_SetPriority+0x4c>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	0112      	lsls	r2, r2, #4
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	440b      	add	r3, r1
 80018bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c0:	e00a      	b.n	80018d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4908      	ldr	r1, [pc, #32]	@ (80018e8 <__NVIC_SetPriority+0x50>)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	3b04      	subs	r3, #4
 80018d0:	0112      	lsls	r2, r2, #4
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	440b      	add	r3, r1
 80018d6:	761a      	strb	r2, [r3, #24]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	@ 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f1c3 0307 	rsb	r3, r3, #7
 8001906:	2b04      	cmp	r3, #4
 8001908:	bf28      	it	cs
 800190a:	2304      	movcs	r3, #4
 800190c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3304      	adds	r3, #4
 8001912:	2b06      	cmp	r3, #6
 8001914:	d902      	bls.n	800191c <NVIC_EncodePriority+0x30>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3b03      	subs	r3, #3
 800191a:	e000      	b.n	800191e <NVIC_EncodePriority+0x32>
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	401a      	ands	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001934:	f04f 31ff 	mov.w	r1, #4294967295
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	43d9      	mvns	r1, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	4313      	orrs	r3, r2
         );
}
 8001946:	4618      	mov	r0, r3
 8001948:	3724      	adds	r7, #36	@ 0x24
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001964:	d301      	bcc.n	800196a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001966:	2301      	movs	r3, #1
 8001968:	e00f      	b.n	800198a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <SysTick_Config+0x40>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001972:	210f      	movs	r1, #15
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
 8001978:	f7ff ff8e 	bl	8001898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800197c:	4b05      	ldr	r3, [pc, #20]	@ (8001994 <SysTick_Config+0x40>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001982:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <SysTick_Config+0x40>)
 8001984:	2207      	movs	r2, #7
 8001986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	e000e010 	.word	0xe000e010

08001998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ff47 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff5c 	bl	800187c <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff8e 	bl	80018ec <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5d 	bl	8001898 <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ffb0 	bl	8001954 <SysTick_Config>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	e154      	b.n	8001cba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8146 	beq.w	8001cb4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_GPIO_Init+0x40>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d130      	bne.n	8001aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a76:	2201      	movs	r2, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	f003 0201 	and.w	r2, r3, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d017      	beq.n	8001ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d123      	bne.n	8001b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	6939      	ldr	r1, [r7, #16]
 8001b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0203 	and.w	r2, r3, #3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a0 	beq.w	8001cb4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b74:	4b58      	ldr	r3, [pc, #352]	@ (8001cd8 <HAL_GPIO_Init+0x2d8>)
 8001b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b78:	4a57      	ldr	r2, [pc, #348]	@ (8001cd8 <HAL_GPIO_Init+0x2d8>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b80:	4b55      	ldr	r3, [pc, #340]	@ (8001cd8 <HAL_GPIO_Init+0x2d8>)
 8001b82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b8c:	4a53      	ldr	r2, [pc, #332]	@ (8001cdc <HAL_GPIO_Init+0x2dc>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bb6:	d019      	beq.n	8001bec <HAL_GPIO_Init+0x1ec>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a49      	ldr	r2, [pc, #292]	@ (8001ce0 <HAL_GPIO_Init+0x2e0>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1e8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a48      	ldr	r2, [pc, #288]	@ (8001ce4 <HAL_GPIO_Init+0x2e4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1e4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a47      	ldr	r2, [pc, #284]	@ (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1e0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a46      	ldr	r2, [pc, #280]	@ (8001cec <HAL_GPIO_Init+0x2ec>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1dc>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e008      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001bdc:	2307      	movs	r3, #7
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be0:	2303      	movs	r3, #3
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x1ee>
 8001bec:	2300      	movs	r3, #0
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfe:	4937      	ldr	r1, [pc, #220]	@ (8001cdc <HAL_GPIO_Init+0x2dc>)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c0c:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c30:	4a2f      	ldr	r2, [pc, #188]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c36:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c5a:	4a25      	ldr	r2, [pc, #148]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c60:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c84:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f aea3 	bne.w	8001a10 <HAL_GPIO_Init+0x10>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	40010400 	.word	0x40010400

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d10:	e002      	b.n	8001d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d28:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40007000 	.word	0x40007000

08001d40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d4e:	d130      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d5c:	d038      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5e:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2232      	movs	r2, #50	@ 0x32
 8001d74:	fb02 f303 	mul.w	r3, r2, r3
 8001d78:	4a1b      	ldr	r2, [pc, #108]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9b      	lsrs	r3, r3, #18
 8001d80:	3301      	adds	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d84:	e002      	b.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d98:	d102      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f2      	bne.n	8001d86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dac:	d110      	bne.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e00f      	b.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dbe:	d007      	beq.n	8001dd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc0:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dc8:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40007000 	.word	0x40007000
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f000 bc02 	b.w	8002604 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e00:	4b96      	ldr	r3, [pc, #600]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0a:	4b94      	ldr	r3, [pc, #592]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80e4 	beq.w	8001fea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4c>
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	f040 808b 	bne.w	8001f46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	f040 8087 	bne.w	8001f46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e38:	4b88      	ldr	r3, [pc, #544]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x64>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e3d9      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	4b81      	ldr	r3, [pc, #516]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d004      	beq.n	8001e6a <HAL_RCC_OscConfig+0x7e>
 8001e60:	4b7e      	ldr	r3, [pc, #504]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e68:	e005      	b.n	8001e76 <HAL_RCC_OscConfig+0x8a>
 8001e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d223      	bcs.n	8001ec2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fd54 	bl	800292c <RCC_SetFlashLatencyFromMSIRange>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e3ba      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8e:	4b73      	ldr	r3, [pc, #460]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a72      	ldr	r2, [pc, #456]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e94:	f043 0308 	orr.w	r3, r3, #8
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b70      	ldr	r3, [pc, #448]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	496d      	ldr	r1, [pc, #436]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eac:	4b6b      	ldr	r3, [pc, #428]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	4968      	ldr	r1, [pc, #416]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
 8001ec0:	e025      	b.n	8001f0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec2:	4b66      	ldr	r3, [pc, #408]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a65      	ldr	r2, [pc, #404]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b63      	ldr	r3, [pc, #396]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4960      	ldr	r1, [pc, #384]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee0:	4b5e      	ldr	r3, [pc, #376]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	495b      	ldr	r1, [pc, #364]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fd14 	bl	800292c <RCC_SetFlashLatencyFromMSIRange>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e37a      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0e:	f000 fc81 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b51      	ldr	r3, [pc, #324]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4950      	ldr	r1, [pc, #320]	@ (8002060 <HAL_RCC_OscConfig+0x274>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002064 <HAL_RCC_OscConfig+0x278>)
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb8c 	bl	8000650 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d052      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	e35e      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d032      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a42      	ldr	r2, [pc, #264]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fbc9 	bl	80006f0 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f62:	f7fe fbc5 	bl	80006f0 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e347      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f74:	4b39      	ldr	r3, [pc, #228]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a35      	ldr	r2, [pc, #212]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f86:	f043 0308 	orr.w	r3, r3, #8
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b33      	ldr	r3, [pc, #204]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4930      	ldr	r1, [pc, #192]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	492b      	ldr	r1, [pc, #172]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
 8001fb2:	e01a      	b.n	8001fea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb4:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fc0:	f7fe fb96 	bl	80006f0 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc8:	f7fe fb92 	bl	80006f0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e314      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fda:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1dc>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d073      	beq.n	80020de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x21c>
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d10e      	bne.n	8002020 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b03      	cmp	r3, #3
 8002006:	d10b      	bne.n	8002020 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	4b14      	ldr	r3, [pc, #80]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d063      	beq.n	80020dc <HAL_RCC_OscConfig+0x2f0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d15f      	bne.n	80020dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e2f1      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002028:	d106      	bne.n	8002038 <HAL_RCC_OscConfig+0x24c>
 800202a:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e025      	b.n	8002084 <HAL_RCC_OscConfig+0x298>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002040:	d114      	bne.n	800206c <HAL_RCC_OscConfig+0x280>
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a02      	ldr	r2, [pc, #8]	@ (800205c <HAL_RCC_OscConfig+0x270>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e013      	b.n	8002084 <HAL_RCC_OscConfig+0x298>
 800205c:	40021000 	.word	0x40021000
 8002060:	08003070 	.word	0x08003070
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004
 800206c:	4ba0      	ldr	r3, [pc, #640]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a9f      	ldr	r2, [pc, #636]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b9d      	ldr	r3, [pc, #628]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a9c      	ldr	r2, [pc, #624]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208c:	f7fe fb30 	bl	80006f0 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fb2c 	bl	80006f0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	@ 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e2ae      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a6:	4b92      	ldr	r3, [pc, #584]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x2a8>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fb1c 	bl	80006f0 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe fb18 	bl	80006f0 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	@ 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e29a      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ce:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x2d0>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d060      	beq.n	80021ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x310>
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d119      	bne.n	800212a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d116      	bne.n	800212a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fc:	4b7c      	ldr	r3, [pc, #496]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x328>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e277      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b76      	ldr	r3, [pc, #472]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	4973      	ldr	r1, [pc, #460]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002128:	e040      	b.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d023      	beq.n	800217a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002132:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a6e      	ldr	r2, [pc, #440]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213e:	f7fe fad7 	bl	80006f0 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002146:	f7fe fad3 	bl	80006f0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e255      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	4b65      	ldr	r3, [pc, #404]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002164:	4b62      	ldr	r3, [pc, #392]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	061b      	lsls	r3, r3, #24
 8002172:	495f      	ldr	r1, [pc, #380]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e018      	b.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217a:	4b5d      	ldr	r3, [pc, #372]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a5c      	ldr	r2, [pc, #368]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fab3 	bl	80006f0 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218e:	f7fe faaf 	bl	80006f0 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e231      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a0:	4b53      	ldr	r3, [pc, #332]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03c      	beq.n	8002232 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d01c      	beq.n	80021fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c0:	4b4b      	ldr	r3, [pc, #300]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c6:	4a4a      	ldr	r2, [pc, #296]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d0:	f7fe fa8e 	bl	80006f0 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d8:	f7fe fa8a 	bl	80006f0 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e20c      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ea:	4b41      	ldr	r3, [pc, #260]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ef      	beq.n	80021d8 <HAL_RCC_OscConfig+0x3ec>
 80021f8:	e01b      	b.n	8002232 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fa:	4b3d      	ldr	r3, [pc, #244]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80021fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002200:	4a3b      	ldr	r2, [pc, #236]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220a:	f7fe fa71 	bl	80006f0 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe fa6d 	bl	80006f0 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e1ef      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002224:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1ef      	bne.n	8002212 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a6 	beq.w	800238c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002244:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002248:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10d      	bne.n	800226c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <HAL_RCC_OscConfig+0x508>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d118      	bne.n	80022aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_RCC_OscConfig+0x508>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_RCC_OscConfig+0x508>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002282:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002284:	f7fe fa34 	bl	80006f0 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228c:	f7fe fa30 	bl	80006f0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e1b2      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_RCC_OscConfig+0x508>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4d8>
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022c2:	e029      	b.n	8002318 <HAL_RCC_OscConfig+0x52c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d115      	bne.n	80022f8 <HAL_RCC_OscConfig+0x50c>
 80022cc:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d2:	4a07      	ldr	r2, [pc, #28]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022dc:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e2:	4a03      	ldr	r2, [pc, #12]	@ (80022f0 <HAL_RCC_OscConfig+0x504>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x52c>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	4a99      	ldr	r2, [pc, #612]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002308:	4b96      	ldr	r3, [pc, #600]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230e:	4a95      	ldr	r2, [pc, #596]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d016      	beq.n	800234e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe f9e6 	bl	80006f0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002326:	e00a      	b.n	800233e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002328:	f7fe f9e2 	bl	80006f0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e162      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233e:	4b89      	ldr	r3, [pc, #548]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ed      	beq.n	8002328 <HAL_RCC_OscConfig+0x53c>
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe f9cf 	bl	80006f0 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002356:	f7fe f9cb 	bl	80006f0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e14b      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800236c:	4b7d      	ldr	r3, [pc, #500]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ed      	bne.n	8002356 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002380:	4b78      	ldr	r3, [pc, #480]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002384:	4a77      	ldr	r2, [pc, #476]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800238a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0320 	and.w	r3, r3, #32
 8002394:	2b00      	cmp	r3, #0
 8002396:	d03c      	beq.n	8002412 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d01c      	beq.n	80023da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023a0:	4b70      	ldr	r3, [pc, #448]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80023a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b0:	f7fe f99e 	bl	80006f0 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023b8:	f7fe f99a 	bl	80006f0 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e11c      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ca:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80023cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0ef      	beq.n	80023b8 <HAL_RCC_OscConfig+0x5cc>
 80023d8:	e01b      	b.n	8002412 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023da:	4b62      	ldr	r3, [pc, #392]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80023dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e0:	4a60      	ldr	r2, [pc, #384]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ea:	f7fe f981 	bl	80006f0 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f2:	f7fe f97d 	bl	80006f0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0ff      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002404:	4b57      	ldr	r3, [pc, #348]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1ef      	bne.n	80023f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80f3 	beq.w	8002602 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	2b02      	cmp	r3, #2
 8002422:	f040 80c9 	bne.w	80025b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002426:	4b4f      	ldr	r3, [pc, #316]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	429a      	cmp	r2, r3
 8002438:	d12c      	bne.n	8002494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002444:	3b01      	subs	r3, #1
 8002446:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d123      	bne.n	8002494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002456:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d11b      	bne.n	8002494 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002466:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d113      	bne.n	8002494 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002476:	085b      	lsrs	r3, r3, #1
 8002478:	3b01      	subs	r3, #1
 800247a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d109      	bne.n	8002494 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	085b      	lsrs	r3, r3, #1
 800248c:	3b01      	subs	r3, #1
 800248e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002490:	429a      	cmp	r2, r3
 8002492:	d06b      	beq.n	800256c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d062      	beq.n	8002560 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800249a:	4b32      	ldr	r3, [pc, #200]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0ac      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80024b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024b6:	f7fe f91b 	bl	80006f0 <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024be:	f7fe f917 	bl	80006f0 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e099      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024d0:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1f0      	bne.n	80024be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4b21      	ldr	r3, [pc, #132]	@ (8002568 <HAL_RCC_OscConfig+0x77c>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024ec:	3a01      	subs	r2, #1
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	4311      	orrs	r1, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024f6:	0212      	lsls	r2, r2, #8
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024fe:	0852      	lsrs	r2, r2, #1
 8002500:	3a01      	subs	r2, #1
 8002502:	0552      	lsls	r2, r2, #21
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800250a:	0852      	lsrs	r2, r2, #1
 800250c:	3a01      	subs	r2, #1
 800250e:	0652      	lsls	r2, r2, #25
 8002510:	4311      	orrs	r1, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002516:	06d2      	lsls	r2, r2, #27
 8002518:	430a      	orrs	r2, r1
 800251a:	4912      	ldr	r1, [pc, #72]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002520:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0f      	ldr	r2, [pc, #60]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a0c      	ldr	r2, [pc, #48]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002538:	f7fe f8da 	bl	80006f0 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe f8d6 	bl	80006f0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e058      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_RCC_OscConfig+0x778>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800255e:	e050      	b.n	8002602 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e04f      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
 8002564:	40021000 	.word	0x40021000
 8002568:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800256c:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d144      	bne.n	8002602 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002578:	4b24      	ldr	r3, [pc, #144]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a23      	ldr	r2, [pc, #140]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002584:	4b21      	ldr	r3, [pc, #132]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a20      	ldr	r2, [pc, #128]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 800258a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800258e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002590:	f7fe f8ae 	bl	80006f0 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe f8aa 	bl	80006f0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e02c      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	4b18      	ldr	r3, [pc, #96]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x7ac>
 80025b6:	e024      	b.n	8002602 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d01f      	beq.n	80025fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b13      	ldr	r3, [pc, #76]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a12      	ldr	r2, [pc, #72]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 80025c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe f891 	bl	80006f0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7fe f88d 	bl	80006f0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	4b09      	ldr	r3, [pc, #36]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4905      	ldr	r1, [pc, #20]	@ (800260c <HAL_RCC_OscConfig+0x820>)
 80025f6:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <HAL_RCC_OscConfig+0x824>)
 80025f8:	4013      	ands	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
 80025fc:	e001      	b.n	8002602 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	feeefffc 	.word	0xfeeefffc

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0e7      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b75      	ldr	r3, [pc, #468]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d910      	bls.n	8002658 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b72      	ldr	r3, [pc, #456]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 0207 	bic.w	r2, r3, #7
 800263e:	4970      	ldr	r1, [pc, #448]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b6e      	ldr	r3, [pc, #440]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0cf      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d010      	beq.n	8002686 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002670:	429a      	cmp	r2, r3
 8002672:	d908      	bls.n	8002686 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002674:	4b63      	ldr	r3, [pc, #396]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4960      	ldr	r1, [pc, #384]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d04c      	beq.n	800272c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d107      	bne.n	80026aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	4b5a      	ldr	r3, [pc, #360]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d121      	bne.n	80026ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0a6      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d107      	bne.n	80026c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b2:	4b54      	ldr	r3, [pc, #336]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d115      	bne.n	80026ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e09a      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e08e      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026da:	4b4a      	ldr	r3, [pc, #296]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e086      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b46      	ldr	r3, [pc, #280]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4943      	ldr	r1, [pc, #268]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fc:	f7fd fff8 	bl	80006f0 <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7fd fff4 	bl	80006f0 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e06e      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b3a      	ldr	r3, [pc, #232]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d010      	beq.n	800275a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b31      	ldr	r3, [pc, #196]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002744:	429a      	cmp	r2, r3
 8002746:	d208      	bcs.n	800275a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b2e      	ldr	r3, [pc, #184]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	492b      	ldr	r1, [pc, #172]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800275a:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d210      	bcs.n	800278a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002768:	4b25      	ldr	r3, [pc, #148]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 0207 	bic.w	r2, r3, #7
 8002770:	4923      	ldr	r1, [pc, #140]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002778:	4b21      	ldr	r3, [pc, #132]	@ (8002800 <HAL_RCC_ClockConfig+0x1ec>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e036      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002796:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4918      	ldr	r1, [pc, #96]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027b4:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4910      	ldr	r1, [pc, #64]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027c8:	f000 f824 	bl	8002814 <HAL_RCC_GetSysClockFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	490b      	ldr	r1, [pc, #44]	@ (8002808 <HAL_RCC_ClockConfig+0x1f4>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	4a09      	ldr	r2, [pc, #36]	@ (800280c <HAL_RCC_ClockConfig+0x1f8>)
 80027e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027e8:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <HAL_RCC_ClockConfig+0x1fc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd ff2f 	bl	8000650 <HAL_InitTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40022000 	.word	0x40022000
 8002804:	40021000 	.word	0x40021000
 8002808:	08003070 	.word	0x08003070
 800280c:	20000000 	.word	0x20000000
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002814:	b480      	push	{r7}
 8002816:	b089      	sub	sp, #36	@ 0x24
 8002818:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002822:	4b3e      	ldr	r3, [pc, #248]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800282c:	4b3b      	ldr	r3, [pc, #236]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x34>
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d121      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d11e      	bne.n	8002886 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002848:	4b34      	ldr	r3, [pc, #208]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002854:	4b31      	ldr	r3, [pc, #196]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285a:	0a1b      	lsrs	r3, r3, #8
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e005      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002864:	4b2d      	ldr	r3, [pc, #180]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002870:	4a2b      	ldr	r2, [pc, #172]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002878:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10d      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002884:	e00a      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d102      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800288c:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x110>)
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e004      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b08      	cmp	r3, #8
 8002896:	d101      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002898:	4b23      	ldr	r3, [pc, #140]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x114>)
 800289a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d134      	bne.n	800290c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d003      	beq.n	80028ba <HAL_RCC_GetSysClockFreq+0xa6>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d003      	beq.n	80028c0 <HAL_RCC_GetSysClockFreq+0xac>
 80028b8:	e005      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x110>)
 80028bc:	617b      	str	r3, [r7, #20]
      break;
 80028be:	e005      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x114>)
 80028c2:	617b      	str	r3, [r7, #20]
      break;
 80028c4:	e002      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	617b      	str	r3, [r7, #20]
      break;
 80028ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	3301      	adds	r3, #1
 80028d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028da:	4b10      	ldr	r3, [pc, #64]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	fb03 f202 	mul.w	r2, r3, r2
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HAL_RCC_GetSysClockFreq+0x108>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	0e5b      	lsrs	r3, r3, #25
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	3301      	adds	r3, #1
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800290c:	69bb      	ldr	r3, [r7, #24]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3724      	adds	r7, #36	@ 0x24
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	08003080 	.word	0x08003080
 8002924:	00f42400 	.word	0x00f42400
 8002928:	007a1200 	.word	0x007a1200

0800292c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002938:	4b2a      	ldr	r3, [pc, #168]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002944:	f7ff f9ee 	bl	8001d24 <HAL_PWREx_GetVoltageRange>
 8002948:	6178      	str	r0, [r7, #20]
 800294a:	e014      	b.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b25      	ldr	r3, [pc, #148]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	4a24      	ldr	r2, [pc, #144]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002956:	6593      	str	r3, [r2, #88]	@ 0x58
 8002958:	4b22      	ldr	r3, [pc, #136]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002964:	f7ff f9de 	bl	8001d24 <HAL_PWREx_GetVoltageRange>
 8002968:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800296a:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	4a1d      	ldr	r2, [pc, #116]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800297c:	d10b      	bne.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b80      	cmp	r3, #128	@ 0x80
 8002982:	d919      	bls.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2ba0      	cmp	r3, #160	@ 0xa0
 8002988:	d902      	bls.n	8002990 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800298a:	2302      	movs	r3, #2
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	e013      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002990:	2301      	movs	r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	e010      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b80      	cmp	r3, #128	@ 0x80
 800299a:	d902      	bls.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800299c:	2303      	movs	r3, #3
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	e00a      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b80      	cmp	r3, #128	@ 0x80
 80029a6:	d102      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a8:	2302      	movs	r3, #2
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e004      	b.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b70      	cmp	r3, #112	@ 0x70
 80029b2:	d101      	bne.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b4:	2301      	movs	r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 0207 	bic.w	r2, r3, #7
 80029c0:	4909      	ldr	r1, [pc, #36]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029c8:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d001      	beq.n	80029da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	40022000 	.word	0x40022000

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029f4:	2300      	movs	r3, #0
 80029f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029f8:	2300      	movs	r3, #0
 80029fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d031      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a10:	d01a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a16:	d814      	bhi.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a20:	d10f      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a22:	4b5d      	ldr	r3, [pc, #372]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	4a5c      	ldr	r2, [pc, #368]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a2c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a2e:	e00c      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3304      	adds	r3, #4
 8002a34:	2100      	movs	r1, #0
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 f9f0 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	74fb      	strb	r3, [r7, #19]
      break;
 8002a46:	e000      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10b      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a50:	4b51      	ldr	r3, [pc, #324]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	494e      	ldr	r1, [pc, #312]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a66:	e001      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 809e 	beq.w	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a7e:	4b46      	ldr	r3, [pc, #280]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a94:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4a3f      	ldr	r2, [pc, #252]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aac:	2301      	movs	r3, #1
 8002aae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a39      	ldr	r2, [pc, #228]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002abc:	f7fd fe18 	bl	80006f0 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fd fe14 	bl	80006f0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad8:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d15a      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aea:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01e      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d019      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b06:	4b24      	ldr	r3, [pc, #144]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b10:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b12:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b22:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b28:	4a1b      	ldr	r2, [pc, #108]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b32:	4a19      	ldr	r2, [pc, #100]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fd fdd4 	bl	80006f0 <HAL_GetTick>
 8002b48:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7fd fdd0 	bl	80006f0 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d902      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	74fb      	strb	r3, [r7, #19]
            break;
 8002b62:	e006      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b64:	4b0c      	ldr	r3, [pc, #48]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0ec      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b78:	4b07      	ldr	r3, [pc, #28]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	4904      	ldr	r1, [pc, #16]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	74bb      	strb	r3, [r7, #18]
 8002b94:	e006      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba4:	7c7b      	ldrb	r3, [r7, #17]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b9b      	ldr	r3, [pc, #620]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bae:	4a9a      	ldr	r2, [pc, #616]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc2:	4b95      	ldr	r3, [pc, #596]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc8:	f023 0203 	bic.w	r2, r3, #3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4991      	ldr	r1, [pc, #580]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be4:	4b8c      	ldr	r3, [pc, #560]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	f023 020c 	bic.w	r2, r3, #12
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	4989      	ldr	r1, [pc, #548]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c06:	4b84      	ldr	r3, [pc, #528]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	4980      	ldr	r1, [pc, #512]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c28:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	4978      	ldr	r1, [pc, #480]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4a:	4b73      	ldr	r3, [pc, #460]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	496f      	ldr	r1, [pc, #444]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4967      	ldr	r1, [pc, #412]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c8e:	4b62      	ldr	r3, [pc, #392]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	495e      	ldr	r1, [pc, #376]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cb0:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	4956      	ldr	r1, [pc, #344]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cd2:	4b51      	ldr	r3, [pc, #324]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	494d      	ldr	r1, [pc, #308]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d028      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf4:	4b48      	ldr	r3, [pc, #288]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d02:	4945      	ldr	r1, [pc, #276]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d12:	d106      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d14:	4b40      	ldr	r3, [pc, #256]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a3f      	ldr	r2, [pc, #252]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d1e:	60d3      	str	r3, [r2, #12]
 8002d20:	e011      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f872 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d52:	4b31      	ldr	r3, [pc, #196]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d60:	492d      	ldr	r1, [pc, #180]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d72:	4b29      	ldr	r3, [pc, #164]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a28      	ldr	r2, [pc, #160]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002d78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7c:	60d3      	str	r3, [r2, #12]
 8002d7e:	e011      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f843 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01c      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dbe:	4916      	ldr	r1, [pc, #88]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002dce:	d10c      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f820 	bl	8002e1c <RCCEx_PLLSAI1_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002df6:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e04:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000

08002e1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e2a:	4b74      	ldr	r3, [pc, #464]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d018      	beq.n	8002e68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e36:	4b71      	ldr	r3, [pc, #452]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d10d      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
       ||
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d047      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
 8002e66:	e044      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d018      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x86>
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d825      	bhi.n	8002ec0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0x62>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d009      	beq.n	8002e90 <RCCEx_PLLSAI1_Config+0x74>
 8002e7c:	e020      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d11d      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8e:	e01a      	b.n	8002ec6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e90:	4b5a      	ldr	r3, [pc, #360]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d116      	bne.n	8002eca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e013      	b.n	8002eca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ea2:	4b56      	ldr	r3, [pc, #344]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10f      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eae:	4b53      	ldr	r3, [pc, #332]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ebe:	e006      	b.n	8002ece <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec4:	e004      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ec6:	bf00      	nop
 8002ec8:	e002      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eca:	bf00      	nop
 8002ecc:	e000      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ece:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ed6:	4b49      	ldr	r3, [pc, #292]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6819      	ldr	r1, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	430b      	orrs	r3, r1
 8002eec:	4943      	ldr	r1, [pc, #268]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d17c      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ef8:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a3f      	ldr	r2, [pc, #252]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f04:	f7fd fbf4 	bl	80006f0 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f0c:	f7fd fbf0 	bl	80006f0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d15f      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d110      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f38:	4b30      	ldr	r3, [pc, #192]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002f40:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6892      	ldr	r2, [r2, #8]
 8002f48:	0211      	lsls	r1, r2, #8
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	06d2      	lsls	r2, r2, #27
 8002f50:	430a      	orrs	r2, r1
 8002f52:	492a      	ldr	r1, [pc, #168]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	610b      	str	r3, [r1, #16]
 8002f58:	e027      	b.n	8002faa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d112      	bne.n	8002f86 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f60:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002f68:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	0211      	lsls	r1, r2, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6912      	ldr	r2, [r2, #16]
 8002f76:	0852      	lsrs	r2, r2, #1
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0552      	lsls	r2, r2, #21
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	491f      	ldr	r1, [pc, #124]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	610b      	str	r3, [r1, #16]
 8002f84:	e011      	b.n	8002faa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	0211      	lsls	r1, r2, #8
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6952      	ldr	r2, [r2, #20]
 8002f9c:	0852      	lsrs	r2, r2, #1
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	0652      	lsls	r2, r2, #25
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	4915      	ldr	r1, [pc, #84]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002faa:	4b14      	ldr	r3, [pc, #80]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a13      	ldr	r2, [pc, #76]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fd fb9b 	bl	80006f0 <HAL_GetTick>
 8002fba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fbc:	e009      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fbe:	f7fd fb97 	bl	80006f0 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d902      	bls.n	8002fd2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	73fb      	strb	r3, [r7, #15]
          break;
 8002fd0:	e005      	b.n	8002fde <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ef      	beq.n	8002fbe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	4903      	ldr	r1, [pc, #12]	@ (8002ffc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000

08003000 <memset>:
 8003000:	4402      	add	r2, r0
 8003002:	4603      	mov	r3, r0
 8003004:	4293      	cmp	r3, r2
 8003006:	d100      	bne.n	800300a <memset+0xa>
 8003008:	4770      	bx	lr
 800300a:	f803 1b01 	strb.w	r1, [r3], #1
 800300e:	e7f9      	b.n	8003004 <memset+0x4>

08003010 <__libc_init_array>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	4d0d      	ldr	r5, [pc, #52]	@ (8003048 <__libc_init_array+0x38>)
 8003014:	4c0d      	ldr	r4, [pc, #52]	@ (800304c <__libc_init_array+0x3c>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	2600      	movs	r6, #0
 800301c:	42a6      	cmp	r6, r4
 800301e:	d109      	bne.n	8003034 <__libc_init_array+0x24>
 8003020:	4d0b      	ldr	r5, [pc, #44]	@ (8003050 <__libc_init_array+0x40>)
 8003022:	4c0c      	ldr	r4, [pc, #48]	@ (8003054 <__libc_init_array+0x44>)
 8003024:	f000 f818 	bl	8003058 <_init>
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	2600      	movs	r6, #0
 800302e:	42a6      	cmp	r6, r4
 8003030:	d105      	bne.n	800303e <__libc_init_array+0x2e>
 8003032:	bd70      	pop	{r4, r5, r6, pc}
 8003034:	f855 3b04 	ldr.w	r3, [r5], #4
 8003038:	4798      	blx	r3
 800303a:	3601      	adds	r6, #1
 800303c:	e7ee      	b.n	800301c <__libc_init_array+0xc>
 800303e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003042:	4798      	blx	r3
 8003044:	3601      	adds	r6, #1
 8003046:	e7f2      	b.n	800302e <__libc_init_array+0x1e>
 8003048:	080030b0 	.word	0x080030b0
 800304c:	080030b0 	.word	0x080030b0
 8003050:	080030b0 	.word	0x080030b0
 8003054:	080030b4 	.word	0x080030b4

08003058 <_init>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr

08003064 <_fini>:
 8003064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003066:	bf00      	nop
 8003068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306a:	bc08      	pop	{r3}
 800306c:	469e      	mov	lr, r3
 800306e:	4770      	bx	lr
