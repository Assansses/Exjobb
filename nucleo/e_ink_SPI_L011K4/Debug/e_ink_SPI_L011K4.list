
e_ink_SPI_L011K4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f38  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001ff8  08001ff8  00002ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002014  08002014  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002014  08002014  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002014  08002014  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002014  08002014  00003014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002018  08002018  00003018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800201c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002028  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002028  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e5e  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001210  00000000  00000000  00008e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c8  00000000  00000000  0000a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000453  00000000  00000000  0000a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f9af  00000000  00000000  0000aac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f60  00000000  00000000  0001a472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ec73  00000000  00000000  000213d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080045  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001378  00000000  00000000  00080088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00081400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fe0 	.word	0x08001fe0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001fe0 	.word	0x08001fe0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 8000224:	23a0      	movs	r3, #160	@ 0xa0
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2201      	movs	r2, #1
 800022a:	2102      	movs	r1, #2
 800022c:	0018      	movs	r0, r3
 800022e:	f000 fe82 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000232:	2014      	movs	r0, #20
 8000234:	f000 fc24 	bl	8000a80 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 0);
    //HAL_Delay(2);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 8000238:	23a0      	movs	r3, #160	@ 0xa0
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	2200      	movs	r2, #0
 800023e:	2102      	movs	r1, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fe78 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000246:	2002      	movs	r0, #2
 8000248:	f000 fc1a 	bl	8000a80 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 800024c:	23a0      	movs	r3, #160	@ 0xa0
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	2201      	movs	r2, #1
 8000252:	2102      	movs	r1, #2
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fe6e 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800025a:	2014      	movs	r0, #20
 800025c:	f000 fc10 	bl	8000a80 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 0);
    //HAL_Delay(2);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 8000260:	23a0      	movs	r3, #160	@ 0xa0
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fe64 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 fc06 	bl	8000a80 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 8000274:	23a0      	movs	r3, #160	@ 0xa0
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2201      	movs	r2, #1
 800027a:	2102      	movs	r1, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fe5a 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000282:	2014      	movs	r0, #20
 8000284:	f000 fbfc 	bl	8000a80 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 0);
    //HAL_Delay(2);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
 8000288:	23a0      	movs	r3, #160	@ 0xa0
 800028a:	05db      	lsls	r3, r3, #23
 800028c:	2200      	movs	r2, #0
 800028e:	2102      	movs	r1, #2
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fe50 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000296:	2002      	movs	r0, #2
 8000298:	f000 fbf2 	bl	8000a80 <HAL_Delay>
    //DEV_Digital_Write(EPD_RST_PIN, 1);
    //HAL_Delay(20);
    HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);
 800029c:	23a0      	movs	r3, #160	@ 0xa0
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2201      	movs	r2, #1
 80002a2:	2102      	movs	r1, #2
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fe46 	bl	8000f36 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80002aa:	2014      	movs	r0, #20
 80002ac:	f000 fbe8 	bl	8000a80 <HAL_Delay>
}
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(uint8_t Reg)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	0002      	movs	r2, r0
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	701a      	strb	r2, [r3, #0]
	DEV_Digital_Write(EPD_DC_PIN, 0);
    DEV_Digital_Write(EPD_CS_PIN, 0);
    DEV_SPI_WriteByte(Reg);
    DEV_Digital_Write(EPD_CS_PIN, 1);
    */
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, 0);
 80002c4:	23a0      	movs	r3, #160	@ 0xa0
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2200      	movs	r2, #0
 80002ca:	2104      	movs	r1, #4
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fe32 	bl	8000f36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80002d2:	23a0      	movs	r3, #160	@ 0xa0
 80002d4:	05db      	lsls	r3, r3, #23
 80002d6:	2200      	movs	r2, #0
 80002d8:	2110      	movs	r1, #16
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fe2b 	bl	8000f36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Reg, 1, 100);
 80002e0:	1df9      	adds	r1, r7, #7
 80002e2:	4808      	ldr	r0, [pc, #32]	@ (8000304 <EPD_SendCommand+0x4c>)
 80002e4:	2364      	movs	r3, #100	@ 0x64
 80002e6:	2201      	movs	r2, #1
 80002e8:	f001 fc15 	bl	8001b16 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80002ec:	23a0      	movs	r3, #160	@ 0xa0
 80002ee:	05db      	lsls	r3, r3, #23
 80002f0:	2201      	movs	r2, #1
 80002f2:	2110      	movs	r1, #16
 80002f4:	0018      	movs	r0, r3
 80002f6:	f000 fe1e 	bl	8000f36 <HAL_GPIO_WritePin>
}
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	46bd      	mov	sp, r7
 80002fe:	b002      	add	sp, #8
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	20000028 	.word	0x20000028

08000308 <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(uint8_t Data)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	0002      	movs	r2, r0
 8000310:	1dfb      	adds	r3, r7, #7
 8000312:	701a      	strb	r2, [r3, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
    DEV_Digital_Write(EPD_CS_PIN, 0);
    DEV_SPI_WriteByte(Data);
    DEV_Digital_Write(EPD_CS_PIN, 1);
    */
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, 1);
 8000314:	23a0      	movs	r3, #160	@ 0xa0
 8000316:	05db      	lsls	r3, r3, #23
 8000318:	2201      	movs	r2, #1
 800031a:	2104      	movs	r1, #4
 800031c:	0018      	movs	r0, r3
 800031e:	f000 fe0a 	bl	8000f36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8000322:	23a0      	movs	r3, #160	@ 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	2200      	movs	r2, #0
 8000328:	2110      	movs	r1, #16
 800032a:	0018      	movs	r0, r3
 800032c:	f000 fe03 	bl	8000f36 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&Data, 1, 100);
 8000330:	1df9      	adds	r1, r7, #7
 8000332:	4808      	ldr	r0, [pc, #32]	@ (8000354 <EPD_SendData+0x4c>)
 8000334:	2364      	movs	r3, #100	@ 0x64
 8000336:	2201      	movs	r2, #1
 8000338:	f001 fbed 	bl	8001b16 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800033c:	23a0      	movs	r3, #160	@ 0xa0
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2201      	movs	r2, #1
 8000342:	2110      	movs	r1, #16
 8000344:	0018      	movs	r0, r3
 8000346:	f000 fdf6 	bl	8000f36 <HAL_GPIO_WritePin>
}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
 8000352:	46c0      	nop			@ (mov r8, r8)
 8000354:	20000028 	.word	0x20000028

08000358 <EPD_ReadBusy>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
void EPD_ReadBusy(void)
{
 8000358:	b590      	push	{r4, r7, lr}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
    HAL_Delay(20);
    Debug("e-Paper busy release\r\n");
    */
	uint8_t busy;
	    do {
	        EPD_SendCommand(0x71);
 800035e:	2071      	movs	r0, #113	@ 0x71
 8000360:	f7ff ffaa 	bl	80002b8 <EPD_SendCommand>
	        busy = HAL_GPIO_ReadPin (BUSY_GPIO_Port, BUSY_Pin);
 8000364:	1dfc      	adds	r4, r7, #7
 8000366:	23a0      	movs	r3, #160	@ 0xa0
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2108      	movs	r1, #8
 800036c:	0018      	movs	r0, r3
 800036e:	f000 fdc5 	bl	8000efc <HAL_GPIO_ReadPin>
 8000372:	0003      	movs	r3, r0
 8000374:	7023      	strb	r3, [r4, #0]
	        busy =!(busy & 0x01);
 8000376:	1dfb      	adds	r3, r7, #7
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2201      	movs	r2, #1
 800037c:	4013      	ands	r3, r2
 800037e:	425a      	negs	r2, r3
 8000380:	4153      	adcs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	1dfb      	adds	r3, r7, #7
 8000386:	701a      	strb	r2, [r3, #0]
	    } while(busy);
 8000388:	1dfb      	adds	r3, r7, #7
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d1e6      	bne.n	800035e <EPD_ReadBusy+0x6>
	    HAL_Delay(20);
 8000390:	2014      	movs	r0, #20
 8000392:	f000 fb75 	bl	8000a80 <HAL_Delay>

}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	46bd      	mov	sp, r7
 800039a:	b003      	add	sp, #12
 800039c:	bd90      	pop	{r4, r7, pc}

0800039e <EPD_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_TurnOnDisplay(void)
{
 800039e:	b580      	push	{r7, lr}
 80003a0:	af00      	add	r7, sp, #0
    EPD_SendCommand(0x12);		 //DISPLAY REFRESH
 80003a2:	2012      	movs	r0, #18
 80003a4:	f7ff ff88 	bl	80002b8 <EPD_SendCommand>
    HAL_Delay(10);     //!!!The delay here is necessary, 200uS at least!!!
 80003a8:	200a      	movs	r0, #10
 80003aa:	f000 fb69 	bl	8000a80 <HAL_Delay>

    EPD_ReadBusy();
 80003ae:	f7ff ffd3 	bl	8000358 <EPD_ReadBusy>
}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <EPD_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
void EPD_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    EPD_Reset();
 80003bc:	f7ff ff30 	bl	8000220 <EPD_Reset>

	EPD_SendCommand(0x04);
 80003c0:	2004      	movs	r0, #4
 80003c2:	f7ff ff79 	bl	80002b8 <EPD_SendCommand>
	EPD_ReadBusy();//waiting for the electronic paper IC to release the idle signal
 80003c6:	f7ff ffc7 	bl	8000358 <EPD_ReadBusy>

	EPD_SendCommand(0x00);			//panel setting
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ff74 	bl	80002b8 <EPD_SendCommand>
	EPD_SendData(0x1f);		//LUT from OTP，KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 80003d0:	201f      	movs	r0, #31
 80003d2:	f7ff ff99 	bl	8000308 <EPD_SendData>

	EPD_SendCommand(0x61);			//resolution setting
 80003d6:	2061      	movs	r0, #97	@ 0x61
 80003d8:	f7ff ff6e 	bl	80002b8 <EPD_SendCommand>
	EPD_SendData (0x80);
 80003dc:	2080      	movs	r0, #128	@ 0x80
 80003de:	f7ff ff93 	bl	8000308 <EPD_SendData>
	EPD_SendData (0x01);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f7ff ff90 	bl	8000308 <EPD_SendData>
	EPD_SendData (0x28);
 80003e8:	2028      	movs	r0, #40	@ 0x28
 80003ea:	f7ff ff8d 	bl	8000308 <EPD_SendData>

	EPD_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
 80003ee:	2050      	movs	r0, #80	@ 0x50
 80003f0:	f7ff ff62 	bl	80002b8 <EPD_SendCommand>
	EPD_SendData(0x97);		//WBmode:VBDF 17|D7 VBDW 97 VBDB 57		WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7
 80003f4:	2097      	movs	r0, #151	@ 0x97
 80003f6:	f7ff ff87 	bl	8000308 <EPD_SendData>
}
 80003fa:	46c0      	nop			@ (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}

08000400 <EPD_Draw1>:
/******************************************************************************
function :
parameter:
******************************************************************************/
void EPD_Draw1(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
	    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 8000406:	1dbb      	adds	r3, r7, #6
 8000408:	2210      	movs	r2, #16
 800040a:	801a      	strh	r2, [r3, #0]
	    Height = EPD_HEIGHT;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2294      	movs	r2, #148	@ 0x94
 8000410:	0052      	lsls	r2, r2, #1
 8000412:	801a      	strh	r2, [r3, #0]

	    EPD_SendCommand(0x10);
 8000414:	2010      	movs	r0, #16
 8000416:	f7ff ff4f 	bl	80002b8 <EPD_SendCommand>
	    for (uint16_t j = 0; j < Height; j++) {
 800041a:	230e      	movs	r3, #14
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	2200      	movs	r2, #0
 8000420:	801a      	strh	r2, [r3, #0]
 8000422:	e01a      	b.n	800045a <EPD_Draw1+0x5a>
	        for (uint16_t i = 0; i < Width; i++) {
 8000424:	230c      	movs	r3, #12
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	2200      	movs	r2, #0
 800042a:	801a      	strh	r2, [r3, #0]
 800042c:	e008      	b.n	8000440 <EPD_Draw1+0x40>
	            EPD_SendData(0x00);
 800042e:	2000      	movs	r0, #0
 8000430:	f7ff ff6a 	bl	8000308 <EPD_SendData>
	        for (uint16_t i = 0; i < Width; i++) {
 8000434:	210c      	movs	r1, #12
 8000436:	187b      	adds	r3, r7, r1
 8000438:	881a      	ldrh	r2, [r3, #0]
 800043a:	187b      	adds	r3, r7, r1
 800043c:	3201      	adds	r2, #1
 800043e:	801a      	strh	r2, [r3, #0]
 8000440:	230c      	movs	r3, #12
 8000442:	18fa      	adds	r2, r7, r3
 8000444:	1dbb      	adds	r3, r7, #6
 8000446:	8812      	ldrh	r2, [r2, #0]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	429a      	cmp	r2, r3
 800044c:	d3ef      	bcc.n	800042e <EPD_Draw1+0x2e>
	    for (uint16_t j = 0; j < Height; j++) {
 800044e:	210e      	movs	r1, #14
 8000450:	187b      	adds	r3, r7, r1
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	187b      	adds	r3, r7, r1
 8000456:	3201      	adds	r2, #1
 8000458:	801a      	strh	r2, [r3, #0]
 800045a:	230e      	movs	r3, #14
 800045c:	18fa      	adds	r2, r7, r3
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	8812      	ldrh	r2, [r2, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	429a      	cmp	r2, r3
 8000466:	d3dd      	bcc.n	8000424 <EPD_Draw1+0x24>
	        }
	    }

	    EPD_SendCommand(0x13);
 8000468:	2013      	movs	r0, #19
 800046a:	f7ff ff25 	bl	80002b8 <EPD_SendCommand>
	    for (uint16_t j = 0; j < Height; j++) {
 800046e:	230a      	movs	r3, #10
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2200      	movs	r2, #0
 8000474:	801a      	strh	r2, [r3, #0]
 8000476:	e01a      	b.n	80004ae <EPD_Draw1+0xae>
	        for (uint16_t i = 0; i < Width; i++) {
 8000478:	2308      	movs	r3, #8
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	2200      	movs	r2, #0
 800047e:	801a      	strh	r2, [r3, #0]
 8000480:	e008      	b.n	8000494 <EPD_Draw1+0x94>
	            EPD_SendData(0xF0);
 8000482:	20f0      	movs	r0, #240	@ 0xf0
 8000484:	f7ff ff40 	bl	8000308 <EPD_SendData>
	        for (uint16_t i = 0; i < Width; i++) {
 8000488:	2108      	movs	r1, #8
 800048a:	187b      	adds	r3, r7, r1
 800048c:	881a      	ldrh	r2, [r3, #0]
 800048e:	187b      	adds	r3, r7, r1
 8000490:	3201      	adds	r2, #1
 8000492:	801a      	strh	r2, [r3, #0]
 8000494:	2308      	movs	r3, #8
 8000496:	18fa      	adds	r2, r7, r3
 8000498:	1dbb      	adds	r3, r7, #6
 800049a:	8812      	ldrh	r2, [r2, #0]
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	429a      	cmp	r2, r3
 80004a0:	d3ef      	bcc.n	8000482 <EPD_Draw1+0x82>
	    for (uint16_t j = 0; j < Height; j++) {
 80004a2:	210a      	movs	r1, #10
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	881a      	ldrh	r2, [r3, #0]
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	3201      	adds	r2, #1
 80004ac:	801a      	strh	r2, [r3, #0]
 80004ae:	230a      	movs	r3, #10
 80004b0:	18fa      	adds	r2, r7, r3
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	8812      	ldrh	r2, [r2, #0]
 80004b6:	881b      	ldrh	r3, [r3, #0]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d3dd      	bcc.n	8000478 <EPD_Draw1+0x78>
	        }
	    }

	    EPD_TurnOnDisplay();
 80004bc:	f7ff ff6f 	bl	800039e <EPD_TurnOnDisplay>
}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <EPD_Draw2>:

void EPD_Draw2(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 80004ce:	1dbb      	adds	r3, r7, #6
 80004d0:	2210      	movs	r2, #16
 80004d2:	801a      	strh	r2, [r3, #0]
    Height = EPD_HEIGHT;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2294      	movs	r2, #148	@ 0x94
 80004d8:	0052      	lsls	r2, r2, #1
 80004da:	801a      	strh	r2, [r3, #0]

    EPD_SendCommand(0x10);
 80004dc:	2010      	movs	r0, #16
 80004de:	f7ff feeb 	bl	80002b8 <EPD_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 80004e2:	230e      	movs	r3, #14
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	2200      	movs	r2, #0
 80004e8:	801a      	strh	r2, [r3, #0]
 80004ea:	e01a      	b.n	8000522 <EPD_Draw2+0x5a>
        for (uint16_t i = 0; i < Width; i++) {
 80004ec:	230c      	movs	r3, #12
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	2200      	movs	r2, #0
 80004f2:	801a      	strh	r2, [r3, #0]
 80004f4:	e008      	b.n	8000508 <EPD_Draw2+0x40>
            EPD_SendData(0x00);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff ff06 	bl	8000308 <EPD_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 80004fc:	210c      	movs	r1, #12
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	881a      	ldrh	r2, [r3, #0]
 8000502:	187b      	adds	r3, r7, r1
 8000504:	3201      	adds	r2, #1
 8000506:	801a      	strh	r2, [r3, #0]
 8000508:	230c      	movs	r3, #12
 800050a:	18fa      	adds	r2, r7, r3
 800050c:	1dbb      	adds	r3, r7, #6
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3ef      	bcc.n	80004f6 <EPD_Draw2+0x2e>
    for (uint16_t j = 0; j < Height; j++) {
 8000516:	210e      	movs	r1, #14
 8000518:	187b      	adds	r3, r7, r1
 800051a:	881a      	ldrh	r2, [r3, #0]
 800051c:	187b      	adds	r3, r7, r1
 800051e:	3201      	adds	r2, #1
 8000520:	801a      	strh	r2, [r3, #0]
 8000522:	230e      	movs	r3, #14
 8000524:	18fa      	adds	r2, r7, r3
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	8812      	ldrh	r2, [r2, #0]
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	d3dd      	bcc.n	80004ec <EPD_Draw2+0x24>
        }
    }

    EPD_SendCommand(0x13);
 8000530:	2013      	movs	r0, #19
 8000532:	f7ff fec1 	bl	80002b8 <EPD_SendCommand>
    for (uint16_t j = 0; j < Height; j++) {
 8000536:	230a      	movs	r3, #10
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
 800053e:	e01a      	b.n	8000576 <EPD_Draw2+0xae>
        for (uint16_t i = 0; i < Width; i++) {
 8000540:	2308      	movs	r3, #8
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	2200      	movs	r2, #0
 8000546:	801a      	strh	r2, [r3, #0]
 8000548:	e008      	b.n	800055c <EPD_Draw2+0x94>
            EPD_SendData(0xAA);
 800054a:	20aa      	movs	r0, #170	@ 0xaa
 800054c:	f7ff fedc 	bl	8000308 <EPD_SendData>
        for (uint16_t i = 0; i < Width; i++) {
 8000550:	2108      	movs	r1, #8
 8000552:	187b      	adds	r3, r7, r1
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	187b      	adds	r3, r7, r1
 8000558:	3201      	adds	r2, #1
 800055a:	801a      	strh	r2, [r3, #0]
 800055c:	2308      	movs	r3, #8
 800055e:	18fa      	adds	r2, r7, r3
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	8812      	ldrh	r2, [r2, #0]
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	429a      	cmp	r2, r3
 8000568:	d3ef      	bcc.n	800054a <EPD_Draw2+0x82>
    for (uint16_t j = 0; j < Height; j++) {
 800056a:	210a      	movs	r1, #10
 800056c:	187b      	adds	r3, r7, r1
 800056e:	881a      	ldrh	r2, [r3, #0]
 8000570:	187b      	adds	r3, r7, r1
 8000572:	3201      	adds	r2, #1
 8000574:	801a      	strh	r2, [r3, #0]
 8000576:	230a      	movs	r3, #10
 8000578:	18fa      	adds	r2, r7, r3
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	8812      	ldrh	r2, [r2, #0]
 800057e:	881b      	ldrh	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	d3dd      	bcc.n	8000540 <EPD_Draw2+0x78>
        }
    }

    EPD_TurnOnDisplay();
 8000584:	f7ff ff0b 	bl	800039e <EPD_TurnOnDisplay>
}
 8000588:	46c0      	nop			@ (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	b004      	add	sp, #16
 800058e:	bd80      	pop	{r7, pc}

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fa04 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f81c 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f8ae 	bl	80006fc <MX_GPIO_Init>
  MX_SPI1_Init();
 80005a0:	f000 f874 	bl	800068c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */



  EPD_Init();
 80005a4:	f7ff ff08 	bl	80003b8 <EPD_Init>
  EPD_Draw1();
 80005a8:	f7ff ff2a 	bl	8000400 <EPD_Draw1>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //EPD_Clear();
	  	  HAL_Delay(5000);
 80005ac:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <main+0x40>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fa66 	bl	8000a80 <HAL_Delay>
	  	  EPD_Draw2();
 80005b4:	f7ff ff88 	bl	80004c8 <EPD_Draw2>
	  	  //HAL_Delay(10000);
	  	  //EPD_Clear();
	  	  HAL_Delay(5000);
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <main+0x40>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fa60 	bl	8000a80 <HAL_Delay>
	  	  EPD_Draw1();
 80005c0:	f7ff ff1e 	bl	8000400 <EPD_Draw1>
	  	  //HAL_Delay(10000);
	  	  HAL_Delay(5000);
 80005c4:	4b02      	ldr	r3, [pc, #8]	@ (80005d0 <main+0x40>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fa5a 	bl	8000a80 <HAL_Delay>
	  	  HAL_Delay(5000);
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	e7ed      	b.n	80005ac <main+0x1c>
 80005d0:	00001388 	.word	0x00001388

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b093      	sub	sp, #76	@ 0x4c
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	2414      	movs	r4, #20
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	0018      	movs	r0, r3
 80005e0:	2334      	movs	r3, #52	@ 0x34
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f001 fccf 	bl	8001f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	2314      	movs	r3, #20
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f001 fcc8 	bl	8001f88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <SystemClock_Config+0xb0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a22      	ldr	r2, [pc, #136]	@ (8000688 <SystemClock_Config+0xb4>)
 80005fe:	401a      	ands	r2, r3
 8000600:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <SystemClock_Config+0xb0>)
 8000602:	2180      	movs	r1, #128	@ 0x80
 8000604:	0109      	lsls	r1, r1, #4
 8000606:	430a      	orrs	r2, r1
 8000608:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060a:	0021      	movs	r1, r4
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2201      	movs	r2, #1
 8000616:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2210      	movs	r2, #16
 800061c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2202      	movs	r2, #2
 8000622:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	02d2      	lsls	r2, r2, #11
 8000630:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	03d2      	lsls	r2, r2, #15
 8000638:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	187b      	adds	r3, r7, r1
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fc97 	bl	8000f70 <HAL_RCC_OscConfig>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000646:	f000 f8ed 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	003b      	movs	r3, r7
 800064c:	220f      	movs	r2, #15
 800064e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	003b      	movs	r3, r7
 8000652:	2203      	movs	r2, #3
 8000654:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	003b      	movs	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	003b      	movs	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	003b      	movs	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000668:	003b      	movs	r3, r7
 800066a:	2101      	movs	r1, #1
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fffb 	bl	8001668 <HAL_RCC_ClockConfig>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 f8d5 	bl	8000824 <Error_Handler>
  }
}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b013      	add	sp, #76	@ 0x4c
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	40007000 	.word	0x40007000
 8000688:	ffffe7ff 	.word	0xffffe7ff

0800068c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x68>)
 8000692:	4a19      	ldr	r2, [pc, #100]	@ (80006f8 <MX_SPI1_Init+0x6c>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_SPI1_Init+0x68>)
 8000698:	2282      	movs	r2, #130	@ 0x82
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	0092      	lsls	r2, r2, #2
 80006bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006d6:	4b07      	ldr	r3, [pc, #28]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006d8:	2207      	movs	r2, #7
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4b05      	ldr	r3, [pc, #20]	@ (80006f4 <MX_SPI1_Init+0x68>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f990 	bl	8001a04 <HAL_SPI_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f89c 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	20000028 	.word	0x20000028
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	240c      	movs	r4, #12
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f001 fc3b 	bl	8001f88 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b42      	ldr	r3, [pc, #264]	@ (800081c <MX_GPIO_Init+0x120>)
 8000714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000716:	4b41      	ldr	r3, [pc, #260]	@ (800081c <MX_GPIO_Init+0x120>)
 8000718:	2104      	movs	r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800071e:	4b3f      	ldr	r3, [pc, #252]	@ (800081c <MX_GPIO_Init+0x120>)
 8000720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000722:	2204      	movs	r2, #4
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b3c      	ldr	r3, [pc, #240]	@ (800081c <MX_GPIO_Init+0x120>)
 800072c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072e:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <MX_GPIO_Init+0x120>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000736:	4b39      	ldr	r3, [pc, #228]	@ (800081c <MX_GPIO_Init+0x120>)
 8000738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b36      	ldr	r3, [pc, #216]	@ (800081c <MX_GPIO_Init+0x120>)
 8000744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <MX_GPIO_Init+0x120>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_GPIO_Init+0x120>)
 8000750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|CS_Pin, GPIO_PIN_RESET);
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2200      	movs	r2, #0
 8000760:	2116      	movs	r1, #22
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fbe7 	bl	8000f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000768:	4b2d      	ldr	r3, [pc, #180]	@ (8000820 <MX_GPIO_Init+0x124>)
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fbe1 	bl	8000f36 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin CS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CS_Pin;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2216      	movs	r2, #22
 8000778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	193a      	adds	r2, r7, r4
 800078e:	23a0      	movs	r3, #160	@ 0xa0
 8000790:	05db      	lsls	r3, r3, #23
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f000 fa4b 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 800079a:	193b      	adds	r3, r7, r4
 800079c:	2208      	movs	r2, #8
 800079e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80007ac:	193a      	adds	r2, r7, r4
 80007ae:	23a0      	movs	r3, #160	@ 0xa0
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fa3b 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007ba:	0021      	movs	r1, r4
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	0212      	lsls	r2, r2, #8
 80007c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	000c      	movs	r4, r1
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	2203      	movs	r2, #3
 80007d6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	2204      	movs	r2, #4
 80007dc:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007de:	193a      	adds	r2, r7, r4
 80007e0:	23a0      	movs	r3, #160	@ 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fa22 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007ec:	0021      	movs	r1, r4
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2208      	movs	r2, #8
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000806:	187b      	adds	r3, r7, r1
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <MX_GPIO_Init+0x124>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f000 fa0f 	bl	8000c30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	@ 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	50000400 	.word	0x50000400

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <HAL_MspInit+0x24>)
 8000836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <HAL_MspInit+0x24>)
 800083a:	2101      	movs	r1, #1
 800083c:	430a      	orrs	r2, r1
 800083e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	4b04      	ldr	r3, [pc, #16]	@ (8000854 <HAL_MspInit+0x24>)
 8000842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000844:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <HAL_MspInit+0x24>)
 8000846:	2180      	movs	r1, #128	@ 0x80
 8000848:	0549      	lsls	r1, r1, #21
 800084a:	430a      	orrs	r2, r1
 800084c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	240c      	movs	r4, #12
 8000862:	193b      	adds	r3, r7, r4
 8000864:	0018      	movs	r0, r3
 8000866:	2314      	movs	r3, #20
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f001 fb8c 	bl	8001f88 <memset>
  if(hspi->Instance==SPI1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <HAL_SPI_MspInit+0x80>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d129      	bne.n	80008ce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <HAL_SPI_MspInit+0x84>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087e:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <HAL_SPI_MspInit+0x84>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	0149      	lsls	r1, r1, #5
 8000884:	430a      	orrs	r2, r1
 8000886:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <HAL_SPI_MspInit+0x84>)
 800088a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <HAL_SPI_MspInit+0x84>)
 800088e:	2101      	movs	r1, #1
 8000890:	430a      	orrs	r2, r1
 8000892:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <HAL_SPI_MspInit+0x84>)
 8000896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000898:	2201      	movs	r2, #1
 800089a:	4013      	ands	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008a0:	0021      	movs	r1, r4
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	22e0      	movs	r2, #224	@ 0xe0
 80008a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2202      	movs	r2, #2
 80008ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2203      	movs	r2, #3
 80008b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	187a      	adds	r2, r7, r1
 80008c2:	23a0      	movs	r3, #160	@ 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 f9b1 	bl	8000c30 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b009      	add	sp, #36	@ 0x24
 80008d4:	bd90      	pop	{r4, r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	40013000 	.word	0x40013000
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f89e 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800091c:	4813      	ldr	r0, [pc, #76]	@ (800096c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000920:	f7ff fff7 	bl	8000912 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000924:	4812      	ldr	r0, [pc, #72]	@ (8000970 <LoopForever+0x6>)
    LDR R1, [R0]
 8000926:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000928:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <LoopForever+0xa>)
    CMP R1, R2
 800092c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800092e:	d105      	bne.n	800093c <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000930:	4811      	ldr	r0, [pc, #68]	@ (8000978 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000932:	4912      	ldr	r1, [pc, #72]	@ (800097c <LoopForever+0x12>)
    STR R1, [R0]
 8000934:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000936:	4812      	ldr	r0, [pc, #72]	@ (8000980 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000938:	4912      	ldr	r1, [pc, #72]	@ (8000984 <LoopForever+0x1a>)
    STR R1, [R0]
 800093a:	6001      	str	r1, [r0, #0]

0800093c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <LoopForever+0x1e>)
  ldr r1, =_edata
 800093e:	4913      	ldr	r1, [pc, #76]	@ (800098c <LoopForever+0x22>)
  ldr r2, =_sidata
 8000940:	4a13      	ldr	r2, [pc, #76]	@ (8000990 <LoopForever+0x26>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a10      	ldr	r2, [pc, #64]	@ (8000994 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000954:	4c10      	ldr	r4, [pc, #64]	@ (8000998 <LoopForever+0x2e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f001 fb19 	bl	8001f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fe13 	bl	8000590 <main>

0800096a <LoopForever>:

LoopForever:
    b LoopForever
 800096a:	e7fe      	b.n	800096a <LoopForever>
   ldr   r0, =_estack
 800096c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000970:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000974:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000978:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800097c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000980:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000984:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	0800201c 	.word	0x0800201c
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	20000084 	.word	0x20000084

0800099c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC1_COMP_IRQHandler>
	...

080009a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <HAL_Init+0x3c>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <HAL_Init+0x3c>)
 80009b2:	2140      	movs	r1, #64	@ 0x40
 80009b4:	430a      	orrs	r2, r1
 80009b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f811 	bl	80009e0 <HAL_InitTick>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d003      	beq.n	80009ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e001      	b.n	80009ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009ca:	f7ff ff31 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b14      	ldr	r3, [pc, #80]	@ (8000a3c <HAL_InitTick+0x5c>)
 80009ea:	681c      	ldr	r4, [r3, #0]
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <HAL_InitTick+0x60>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	0019      	movs	r1, r3
 80009f2:	23fa      	movs	r3, #250	@ 0xfa
 80009f4:	0098      	lsls	r0, r3, #2
 80009f6:	f7ff fb87 	bl	8000108 <__udivsi3>
 80009fa:	0003      	movs	r3, r0
 80009fc:	0019      	movs	r1, r3
 80009fe:	0020      	movs	r0, r4
 8000a00:	f7ff fb82 	bl	8000108 <__udivsi3>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0018      	movs	r0, r3
 8000a08:	f000 f905 	bl	8000c16 <HAL_SYSTICK_Config>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e00f      	b.n	8000a34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b03      	cmp	r3, #3
 8000a18:	d80b      	bhi.n	8000a32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	425b      	negs	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f8e2 	bl	8000bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_InitTick+0x64>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e000      	b.n	8000a34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b003      	add	sp, #12
 8000a3a:	bd90      	pop	{r4, r7, pc}
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	18d2      	adds	r2, r2, r3
 8000a58:	4b03      	ldr	r3, [pc, #12]	@ (8000a68 <HAL_IncTick+0x20>)
 8000a5a:	601a      	str	r2, [r3, #0]
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000080 	.word	0x20000080

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b02      	ldr	r3, [pc, #8]	@ (8000a7c <HAL_GetTick+0x10>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	0018      	movs	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	20000080 	.word	0x20000080

08000a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a88:	f7ff fff0 	bl	8000a6c <HAL_GetTick>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	d005      	beq.n	8000aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <HAL_Delay+0x44>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	189b      	adds	r3, r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	f7ff ffe0 	bl	8000a6c <HAL_GetTick>
 8000aac:	0002      	movs	r2, r0
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d8f7      	bhi.n	8000aa8 <HAL_Delay+0x28>
  {
  }
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	20000008 	.word	0x20000008

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8000adc:	d828      	bhi.n	8000b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ade:	4a2f      	ldr	r2, [pc, #188]	@ (8000b9c <__NVIC_SetPriority+0xd4>)
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	33c0      	adds	r3, #192	@ 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	589b      	ldr	r3, [r3, r2]
 8000aee:	1dfa      	adds	r2, r7, #7
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0011      	movs	r1, r2
 8000af4:	2203      	movs	r2, #3
 8000af6:	400a      	ands	r2, r1
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	21ff      	movs	r1, #255	@ 0xff
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	22ff      	movs	r2, #255	@ 0xff
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	2303      	movs	r3, #3
 8000b16:	4003      	ands	r3, r0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	481f      	ldr	r0, [pc, #124]	@ (8000b9c <__NVIC_SetPriority+0xd4>)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	430a      	orrs	r2, r1
 8000b28:	33c0      	adds	r3, #192	@ 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2e:	e031      	b.n	8000b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	0019      	movs	r1, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3306      	adds	r3, #6
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	3304      	adds	r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1dfa      	adds	r2, r7, #7
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	0011      	movs	r1, r2
 8000b50:	2203      	movs	r2, #3
 8000b52:	400a      	ands	r2, r1
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	21ff      	movs	r1, #255	@ 0xff
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	43d2      	mvns	r2, r2
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	22ff      	movs	r2, #255	@ 0xff
 8000b68:	401a      	ands	r2, r3
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2303      	movs	r3, #3
 8000b72:	4003      	ands	r3, r0
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4809      	ldr	r0, [pc, #36]	@ (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001c      	movs	r4, r3
 8000b80:	230f      	movs	r3, #15
 8000b82:	4023      	ands	r3, r4
 8000b84:	3b08      	subs	r3, #8
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	3306      	adds	r3, #6
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	18c3      	adds	r3, r0, r3
 8000b90:	3304      	adds	r3, #4
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			@ (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b003      	add	sp, #12
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	2380      	movs	r3, #128	@ 0x80
 8000bb2:	045b      	lsls	r3, r3, #17
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d301      	bcc.n	8000bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e010      	b.n	8000bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <SysTick_Config+0x44>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2103      	movs	r1, #3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff ff7c 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <SysTick_Config+0x44>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <SysTick_Config+0x44>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	1c02      	adds	r2, r0, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	0018      	movs	r0, r3
 8000c22:	f7ff ffbf 	bl	8000ba4 <SysTick_Config>
 8000c26:	0003      	movs	r3, r0
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b002      	add	sp, #8
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c46:	e143      	b.n	8000ed0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	4013      	ands	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <HAL_GPIO_Init+0x30>
 8000c5e:	e134      	b.n	8000eca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2203      	movs	r2, #3
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d005      	beq.n	8000c78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d130      	bne.n	8000cda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cae:	2201      	movs	r2, #1
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	091b      	lsrs	r3, r3, #4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	0013      	movs	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2203      	movs	r2, #3
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d017      	beq.n	8000d16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	58d3      	ldr	r3, [r2, r3]
 8000d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	2207      	movs	r2, #7
 8000d34:	4013      	ands	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4013      	ands	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	400b      	ands	r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	6939      	ldr	r1, [r7, #16]
 8000d68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2203      	movs	r2, #3
 8000d88:	401a      	ands	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	23c0      	movs	r3, #192	@ 0xc0
 8000da4:	029b      	lsls	r3, r3, #10
 8000da6:	4013      	ands	r3, r2
 8000da8:	d100      	bne.n	8000dac <HAL_GPIO_Init+0x17c>
 8000daa:	e08e      	b.n	8000eca <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dac:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee8 <HAL_GPIO_Init+0x2b8>)
 8000dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db0:	4b4d      	ldr	r3, [pc, #308]	@ (8000ee8 <HAL_GPIO_Init+0x2b8>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db8:	4a4c      	ldr	r2, [pc, #304]	@ (8000eec <HAL_GPIO_Init+0x2bc>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	589b      	ldr	r3, [r3, r2]
 8000dc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2203      	movs	r2, #3
 8000dca:	4013      	ands	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	23a0      	movs	r3, #160	@ 0xa0
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x1d2>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a41      	ldr	r2, [pc, #260]	@ (8000ef0 <HAL_GPIO_Init+0x2c0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x1ce>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a40      	ldr	r2, [pc, #256]	@ (8000ef4 <HAL_GPIO_Init+0x2c4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x1ca>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x1d4>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x1d4>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x1d4>
 8000e02:	2300      	movs	r3, #0
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	2103      	movs	r1, #3
 8000e08:	400a      	ands	r2, r1
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e14:	4935      	ldr	r1, [pc, #212]	@ (8000eec <HAL_GPIO_Init+0x2bc>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e22:	4b35      	ldr	r3, [pc, #212]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	2380      	movs	r3, #128	@ 0x80
 8000e38:	035b      	lsls	r3, r3, #13
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e46:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	2380      	movs	r3, #128	@ 0x80
 8000e62:	039b      	lsls	r3, r3, #14
 8000e64:	4013      	ands	r3, r2
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	@ 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43da      	mvns	r2, r3
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	2380      	movs	r3, #128	@ 0x80
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_GPIO_Init+0x2c8>)
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	40da      	lsrs	r2, r3
 8000ed8:	1e13      	subs	r3, r2, #0
 8000eda:	d000      	beq.n	8000ede <HAL_GPIO_Init+0x2ae>
 8000edc:	e6b4      	b.n	8000c48 <HAL_GPIO_Init+0x18>
  }
}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b006      	add	sp, #24
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	50000400 	.word	0x50000400
 8000ef4:	50000800 	.word	0x50000800
 8000ef8:	40010400 	.word	0x40010400

08000efc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	000a      	movs	r2, r1
 8000f06:	1cbb      	adds	r3, r7, #2
 8000f08:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	1cba      	adds	r2, r7, #2
 8000f10:	8812      	ldrh	r2, [r2, #0]
 8000f12:	4013      	ands	r3, r2
 8000f14:	d004      	beq.n	8000f20 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f16:	230f      	movs	r3, #15
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e003      	b.n	8000f28 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f28:	230f      	movs	r3, #15
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	781b      	ldrb	r3, [r3, #0]
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b004      	add	sp, #16
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	0008      	movs	r0, r1
 8000f40:	0011      	movs	r1, r2
 8000f42:	1cbb      	adds	r3, r7, #2
 8000f44:	1c02      	adds	r2, r0, #0
 8000f46:	801a      	strh	r2, [r3, #0]
 8000f48:	1c7b      	adds	r3, r7, #1
 8000f4a:	1c0a      	adds	r2, r1, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4e:	1c7b      	adds	r3, r7, #1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	1cbb      	adds	r3, r7, #2
 8000f58:	881a      	ldrh	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f5e:	e003      	b.n	8000f68 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	f000 fb6c 	bl	800165c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f84:	4bc8      	ldr	r3, [pc, #800]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f8e:	4bc6      	ldr	r3, [pc, #792]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	2380      	movs	r3, #128	@ 0x80
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x36>
 8000fa4:	e07d      	b.n	80010a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d007      	beq.n	8000fbc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0c      	cmp	r3, #12
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x68>
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d10d      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	4bba      	ldr	r3, [pc, #744]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	029b      	lsls	r3, r3, #10
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_OscConfig+0x5a>
 8000fc8:	e06a      	b.n	80010a0 <HAL_RCC_OscConfig+0x130>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d166      	bne.n	80010a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 fb42 	bl	800165c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	025b      	lsls	r3, r3, #9
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d107      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x84>
 8000fe4:	4bb0      	ldr	r3, [pc, #704]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4baf      	ldr	r3, [pc, #700]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8000fea:	2180      	movs	r1, #128	@ 0x80
 8000fec:	0249      	lsls	r1, r1, #9
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e027      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	23a0      	movs	r3, #160	@ 0xa0
 8000ffa:	02db      	lsls	r3, r3, #11
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10e      	bne.n	800101e <HAL_RCC_OscConfig+0xae>
 8001000:	4ba9      	ldr	r3, [pc, #676]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4ba8      	ldr	r3, [pc, #672]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001006:	2180      	movs	r1, #128	@ 0x80
 8001008:	02c9      	lsls	r1, r1, #11
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	4ba6      	ldr	r3, [pc, #664]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4ba5      	ldr	r3, [pc, #660]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	0249      	lsls	r1, r1, #9
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e012      	b.n	8001044 <HAL_RCC_OscConfig+0xd4>
 800101e:	4ba2      	ldr	r3, [pc, #648]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4ba1      	ldr	r3, [pc, #644]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001024:	49a1      	ldr	r1, [pc, #644]	@ (80012ac <HAL_RCC_OscConfig+0x33c>)
 8001026:	400a      	ands	r2, r1
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4b9f      	ldr	r3, [pc, #636]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	@ 0x80
 8001030:	025b      	lsls	r3, r3, #9
 8001032:	4013      	ands	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4b9b      	ldr	r3, [pc, #620]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b9a      	ldr	r3, [pc, #616]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800103e:	499c      	ldr	r1, [pc, #624]	@ (80012b0 <HAL_RCC_OscConfig+0x340>)
 8001040:	400a      	ands	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d014      	beq.n	8001076 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fd0e 	bl	8000a6c <HAL_GetTick>
 8001050:	0003      	movs	r3, r0
 8001052:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001056:	f7ff fd09 	bl	8000a6c <HAL_GetTick>
 800105a:	0002      	movs	r2, r0
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b64      	cmp	r3, #100	@ 0x64
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e2f9      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001068:	4b8f      	ldr	r3, [pc, #572]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0xe6>
 8001074:	e015      	b.n	80010a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001076:	f7ff fcf9 	bl	8000a6c <HAL_GetTick>
 800107a:	0003      	movs	r3, r0
 800107c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800107e:	e008      	b.n	8001092 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001080:	f7ff fcf4 	bl	8000a6c <HAL_GetTick>
 8001084:	0002      	movs	r2, r0
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	2b64      	cmp	r3, #100	@ 0x64
 800108c:	d901      	bls.n	8001092 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800108e:	2303      	movs	r3, #3
 8001090:	e2e4      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001092:	4b85      	ldr	r3, [pc, #532]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	2380      	movs	r3, #128	@ 0x80
 8001098:	029b      	lsls	r3, r3, #10
 800109a:	4013      	ands	r3, r2
 800109c:	d1f0      	bne.n	8001080 <HAL_RCC_OscConfig+0x110>
 800109e:	e000      	b.n	80010a2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	d100      	bne.n	80010ae <HAL_RCC_OscConfig+0x13e>
 80010ac:	e099      	b.n	80011e2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	2220      	movs	r2, #32
 80010b8:	4013      	ands	r3, r2
 80010ba:	d009      	beq.n	80010d0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80010bc:	4b7a      	ldr	r3, [pc, #488]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b79      	ldr	r3, [pc, #484]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80010c2:	2120      	movs	r1, #32
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	2220      	movs	r2, #32
 80010cc:	4393      	bics	r3, r2
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	2b0c      	cmp	r3, #12
 80010da:	d13e      	bne.n	800115a <HAL_RCC_OscConfig+0x1ea>
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d13b      	bne.n	800115a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010e2:	4b71      	ldr	r3, [pc, #452]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2204      	movs	r2, #4
 80010e8:	4013      	ands	r3, r2
 80010ea:	d004      	beq.n	80010f6 <HAL_RCC_OscConfig+0x186>
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e2b2      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f6:	4b6c      	ldr	r3, [pc, #432]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a6e      	ldr	r2, [pc, #440]	@ (80012b4 <HAL_RCC_OscConfig+0x344>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	021a      	lsls	r2, r3, #8
 8001106:	4b68      	ldr	r3, [pc, #416]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001108:	430a      	orrs	r2, r1
 800110a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800110c:	4b66      	ldr	r3, [pc, #408]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2209      	movs	r2, #9
 8001112:	4393      	bics	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	4b64      	ldr	r3, [pc, #400]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800111e:	f000 fbeb 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 8001122:	0001      	movs	r1, r0
 8001124:	4b60      	ldr	r3, [pc, #384]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	091b      	lsrs	r3, r3, #4
 800112a:	220f      	movs	r2, #15
 800112c:	4013      	ands	r3, r2
 800112e:	4a62      	ldr	r2, [pc, #392]	@ (80012b8 <HAL_RCC_OscConfig+0x348>)
 8001130:	5cd3      	ldrb	r3, [r2, r3]
 8001132:	000a      	movs	r2, r1
 8001134:	40da      	lsrs	r2, r3
 8001136:	4b61      	ldr	r3, [pc, #388]	@ (80012bc <HAL_RCC_OscConfig+0x34c>)
 8001138:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800113a:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <HAL_RCC_OscConfig+0x350>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2513      	movs	r5, #19
 8001140:	197c      	adds	r4, r7, r5
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fc4c 	bl	80009e0 <HAL_InitTick>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d046      	beq.n	80011e2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001154:	197b      	adds	r3, r7, r5
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	e280      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115c:	2b00      	cmp	r3, #0
 800115e:	d027      	beq.n	80011b0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001160:	4b51      	ldr	r3, [pc, #324]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2209      	movs	r2, #9
 8001166:	4393      	bics	r3, r2
 8001168:	0019      	movs	r1, r3
 800116a:	4b4f      	ldr	r3, [pc, #316]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800116c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fc7b 	bl	8000a6c <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff fc76 	bl	8000a6c <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e266      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800118e:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2204      	movs	r2, #4
 8001194:	4013      	ands	r3, r2
 8001196:	d0f1      	beq.n	800117c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a45      	ldr	r2, [pc, #276]	@ (80012b4 <HAL_RCC_OscConfig+0x344>)
 800119e:	4013      	ands	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	021a      	lsls	r2, r3, #8
 80011a8:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80011aa:	430a      	orrs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	e018      	b.n	80011e2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b0:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	438a      	bics	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc56 	bl	8000a6c <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fc51 	bl	8000a6c <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e241      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011d8:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2204      	movs	r2, #4
 80011de:	4013      	ands	r3, r2
 80011e0:	d1f1      	bne.n	80011c6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2210      	movs	r2, #16
 80011e8:	4013      	ands	r3, r2
 80011ea:	d100      	bne.n	80011ee <HAL_RCC_OscConfig+0x27e>
 80011ec:	e0a1      	b.n	8001332 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d140      	bne.n	8001276 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f4:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4013      	ands	r3, r2
 80011fe:	d005      	beq.n	800120c <HAL_RCC_OscConfig+0x29c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e227      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120c:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a2c      	ldr	r2, [pc, #176]	@ (80012c4 <HAL_RCC_OscConfig+0x354>)
 8001212:	4013      	ands	r3, r2
 8001214:	0019      	movs	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a1a      	ldr	r2, [r3, #32]
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	0a19      	lsrs	r1, r3, #8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	061a      	lsls	r2, r3, #24
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001230:	430a      	orrs	r2, r1
 8001232:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	0b5b      	lsrs	r3, r3, #13
 800123a:	3301      	adds	r3, #1
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	0212      	lsls	r2, r2, #8
 8001240:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001242:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	210f      	movs	r1, #15
 800124a:	400b      	ands	r3, r1
 800124c:	491a      	ldr	r1, [pc, #104]	@ (80012b8 <HAL_RCC_OscConfig+0x348>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <HAL_RCC_OscConfig+0x34c>)
 8001254:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_RCC_OscConfig+0x350>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2513      	movs	r5, #19
 800125c:	197c      	adds	r4, r7, r5
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff fbbe 	bl	80009e0 <HAL_InitTick>
 8001264:	0003      	movs	r3, r0
 8001266:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001268:	197b      	adds	r3, r7, r5
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d060      	beq.n	8001332 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001270:	197b      	adds	r3, r7, r5
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	e1f2      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03f      	beq.n	80012fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <HAL_RCC_OscConfig+0x338>)
 8001284:	2180      	movs	r1, #128	@ 0x80
 8001286:	0049      	lsls	r1, r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fbee 	bl	8000a6c <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001294:	e018      	b.n	80012c8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001296:	f7ff fbe9 	bl	8000a6c <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d911      	bls.n	80012c8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e1d9      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
 80012a8:	40021000 	.word	0x40021000
 80012ac:	fffeffff 	.word	0xfffeffff
 80012b0:	fffbffff 	.word	0xfffbffff
 80012b4:	ffffe0ff 	.word	0xffffe0ff
 80012b8:	08001ff8 	.word	0x08001ff8
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004
 80012c4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012c8:	4bc9      	ldr	r3, [pc, #804]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	2380      	movs	r3, #128	@ 0x80
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d0e0      	beq.n	8001296 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d4:	4bc6      	ldr	r3, [pc, #792]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4ac6      	ldr	r2, [pc, #792]	@ (80015f4 <HAL_RCC_OscConfig+0x684>)
 80012da:	4013      	ands	r3, r2
 80012dc:	0019      	movs	r1, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	4bc3      	ldr	r3, [pc, #780]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e8:	4bc1      	ldr	r3, [pc, #772]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	0a19      	lsrs	r1, r3, #8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
 80012f4:	061a      	lsls	r2, r3, #24
 80012f6:	4bbe      	ldr	r3, [pc, #760]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	e019      	b.n	8001332 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012fe:	4bbc      	ldr	r3, [pc, #752]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4bbb      	ldr	r3, [pc, #748]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001304:	49bc      	ldr	r1, [pc, #752]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fbaf 	bl	8000a6c <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001314:	f7ff fbaa 	bl	8000a6c <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e19a      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001326:	4bb2      	ldr	r3, [pc, #712]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2208      	movs	r2, #8
 8001338:	4013      	ands	r3, r2
 800133a:	d036      	beq.n	80013aa <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d019      	beq.n	8001378 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001344:	4baa      	ldr	r3, [pc, #680]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001346:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001348:	4ba9      	ldr	r3, [pc, #676]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800134a:	2101      	movs	r1, #1
 800134c:	430a      	orrs	r2, r1
 800134e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001350:	f7ff fb8c 	bl	8000a6c <HAL_GetTick>
 8001354:	0003      	movs	r3, r0
 8001356:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135a:	f7ff fb87 	bl	8000a6c <HAL_GetTick>
 800135e:	0002      	movs	r2, r0
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e177      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800136c:	4ba0      	ldr	r3, [pc, #640]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800136e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d0f1      	beq.n	800135a <HAL_RCC_OscConfig+0x3ea>
 8001376:	e018      	b.n	80013aa <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b9d      	ldr	r3, [pc, #628]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800137a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800137c:	4b9c      	ldr	r3, [pc, #624]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800137e:	2101      	movs	r1, #1
 8001380:	438a      	bics	r2, r1
 8001382:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001384:	f7ff fb72 	bl	8000a6c <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fb6d 	bl	8000a6c <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e15d      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013a0:	4b93      	ldr	r3, [pc, #588]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80013a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013a4:	2202      	movs	r2, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d1f1      	bne.n	800138e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2204      	movs	r2, #4
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x446>
 80013b4:	e0ae      	b.n	8001514 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2023      	movs	r0, #35	@ 0x23
 80013b8:	183b      	adds	r3, r7, r0
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b8c      	ldr	r3, [pc, #560]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80013c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	055b      	lsls	r3, r3, #21
 80013c6:	4013      	ands	r3, r2
 80013c8:	d109      	bne.n	80013de <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b89      	ldr	r3, [pc, #548]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80013cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013ce:	4b88      	ldr	r3, [pc, #544]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	0549      	lsls	r1, r1, #21
 80013d4:	430a      	orrs	r2, r1
 80013d6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013de:	4b87      	ldr	r3, [pc, #540]	@ (80015fc <HAL_RCC_OscConfig+0x68c>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	2380      	movs	r3, #128	@ 0x80
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	d11a      	bne.n	8001420 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ea:	4b84      	ldr	r3, [pc, #528]	@ (80015fc <HAL_RCC_OscConfig+0x68c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4b83      	ldr	r3, [pc, #524]	@ (80015fc <HAL_RCC_OscConfig+0x68c>)
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	0049      	lsls	r1, r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f8:	f7ff fb38 	bl	8000a6c <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff fb33 	bl	8000a6c <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	@ 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e123      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b79      	ldr	r3, [pc, #484]	@ (80015fc <HAL_RCC_OscConfig+0x68c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4013      	ands	r3, r2
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	429a      	cmp	r2, r3
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x4cc>
 800142c:	4b70      	ldr	r3, [pc, #448]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800142e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001430:	4b6f      	ldr	r3, [pc, #444]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001432:	2180      	movs	r1, #128	@ 0x80
 8001434:	0049      	lsls	r1, r1, #1
 8001436:	430a      	orrs	r2, r1
 8001438:	651a      	str	r2, [r3, #80]	@ 0x50
 800143a:	e031      	b.n	80014a0 <HAL_RCC_OscConfig+0x530>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x4ee>
 8001444:	4b6a      	ldr	r3, [pc, #424]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001448:	4b69      	ldr	r3, [pc, #420]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800144a:	496b      	ldr	r1, [pc, #428]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 800144c:	400a      	ands	r2, r1
 800144e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001450:	4b67      	ldr	r3, [pc, #412]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001452:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001454:	4b66      	ldr	r3, [pc, #408]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001456:	496a      	ldr	r1, [pc, #424]	@ (8001600 <HAL_RCC_OscConfig+0x690>)
 8001458:	400a      	ands	r2, r1
 800145a:	651a      	str	r2, [r3, #80]	@ 0x50
 800145c:	e020      	b.n	80014a0 <HAL_RCC_OscConfig+0x530>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	23a0      	movs	r3, #160	@ 0xa0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	429a      	cmp	r2, r3
 8001468:	d10e      	bne.n	8001488 <HAL_RCC_OscConfig+0x518>
 800146a:	4b61      	ldr	r3, [pc, #388]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800146c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800146e:	4b60      	ldr	r3, [pc, #384]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	00c9      	lsls	r1, r1, #3
 8001474:	430a      	orrs	r2, r1
 8001476:	651a      	str	r2, [r3, #80]	@ 0x50
 8001478:	4b5d      	ldr	r3, [pc, #372]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800147a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800147c:	4b5c      	ldr	r3, [pc, #368]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800147e:	2180      	movs	r1, #128	@ 0x80
 8001480:	0049      	lsls	r1, r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	651a      	str	r2, [r3, #80]	@ 0x50
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0x530>
 8001488:	4b59      	ldr	r3, [pc, #356]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800148a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800148c:	4b58      	ldr	r3, [pc, #352]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800148e:	495a      	ldr	r1, [pc, #360]	@ (80015f8 <HAL_RCC_OscConfig+0x688>)
 8001490:	400a      	ands	r2, r1
 8001492:	651a      	str	r2, [r3, #80]	@ 0x50
 8001494:	4b56      	ldr	r3, [pc, #344]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001496:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001498:	4b55      	ldr	r3, [pc, #340]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800149a:	4959      	ldr	r1, [pc, #356]	@ (8001600 <HAL_RCC_OscConfig+0x690>)
 800149c:	400a      	ands	r2, r1
 800149e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d015      	beq.n	80014d4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fae0 	bl	8000a6c <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fadb 	bl	8000a6c <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	4a51      	ldr	r2, [pc, #324]	@ (8001604 <HAL_RCC_OscConfig+0x694>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0ca      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c6:	4b4a      	ldr	r3, [pc, #296]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80014c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d0ef      	beq.n	80014b2 <HAL_RCC_OscConfig+0x542>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff faca 	bl	8000a6c <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fac5 	bl	8000a6c <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a46      	ldr	r2, [pc, #280]	@ (8001604 <HAL_RCC_OscConfig+0x694>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e0b4      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80014f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d1ef      	bne.n	80014de <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014fe:	2323      	movs	r3, #35	@ 0x23
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001508:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800150a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800150c:	4b38      	ldr	r3, [pc, #224]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800150e:	493e      	ldr	r1, [pc, #248]	@ (8001608 <HAL_RCC_OscConfig+0x698>)
 8001510:	400a      	ands	r2, r1
 8001512:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	2b00      	cmp	r3, #0
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x5ae>
 800151c:	e09d      	b.n	800165a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d100      	bne.n	8001526 <HAL_RCC_OscConfig+0x5b6>
 8001524:	e076      	b.n	8001614 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	2b02      	cmp	r3, #2
 800152c:	d145      	bne.n	80015ba <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b2f      	ldr	r3, [pc, #188]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001534:	4935      	ldr	r1, [pc, #212]	@ (800160c <HAL_RCC_OscConfig+0x69c>)
 8001536:	400a      	ands	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153a:	f7ff fa97 	bl	8000a6c <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001544:	f7ff fa92 	bl	8000a6c <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e082      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	049b      	lsls	r3, r3, #18
 800155e:	4013      	ands	r3, r2
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	4a2a      	ldr	r2, [pc, #168]	@ (8001610 <HAL_RCC_OscConfig+0x6a0>)
 8001568:	4013      	ands	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	431a      	orrs	r2, r3
 800157c:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 800157e:	430a      	orrs	r2, r1
 8001580:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001582:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 8001588:	2180      	movs	r1, #128	@ 0x80
 800158a:	0449      	lsls	r1, r1, #17
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fa6c 	bl	8000a6c <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fa67 	bl	8000a6c <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e057      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015ac:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	049b      	lsls	r3, r3, #18
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x62a>
 80015b8:	e04f      	b.n	800165a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80015c0:	4912      	ldr	r1, [pc, #72]	@ (800160c <HAL_RCC_OscConfig+0x69c>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fa51 	bl	8000a6c <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fa4c 	bl	8000a6c <HAL_GetTick>
 80015d4:	0002      	movs	r2, r0
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e03c      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015e2:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_RCC_OscConfig+0x680>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	049b      	lsls	r3, r3, #18
 80015ea:	4013      	ands	r3, r2
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x660>
 80015ee:	e034      	b.n	800165a <HAL_RCC_OscConfig+0x6ea>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	ffff1fff 	.word	0xffff1fff
 80015f8:	fffffeff 	.word	0xfffffeff
 80015fc:	40007000 	.word	0x40007000
 8001600:	fffffbff 	.word	0xfffffbff
 8001604:	00001388 	.word	0x00001388
 8001608:	efffffff 	.word	0xefffffff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_RCC_OscConfig+0x6f4>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	025b      	lsls	r3, r3, #9
 800162c:	401a      	ands	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	429a      	cmp	r2, r3
 8001634:	d10f      	bne.n	8001656 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	23f0      	movs	r3, #240	@ 0xf0
 800163a:	039b      	lsls	r3, r3, #14
 800163c:	401a      	ands	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	429a      	cmp	r2, r3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	23c0      	movs	r3, #192	@ 0xc0
 800164a:	041b      	lsls	r3, r3, #16
 800164c:	401a      	ands	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b00a      	add	sp, #40	@ 0x28
 8001662:	bdb0      	pop	{r4, r5, r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e128      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b96      	ldr	r3, [pc, #600]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d91e      	bls.n	80016c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b93      	ldr	r3, [pc, #588]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4393      	bics	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	4b90      	ldr	r3, [pc, #576]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800169c:	f7ff f9e6 	bl	8000a6c <HAL_GetTick>
 80016a0:	0003      	movs	r3, r0
 80016a2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a4:	e009      	b.n	80016ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff f9e1 	bl	8000a6c <HAL_GetTick>
 80016aa:	0002      	movs	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	4a8a      	ldr	r2, [pc, #552]	@ (80018dc <HAL_RCC_ClockConfig+0x274>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e109      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b87      	ldr	r3, [pc, #540]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1ee      	bne.n	80016a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d2:	4b83      	ldr	r3, [pc, #524]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	22f0      	movs	r2, #240	@ 0xf0
 80016d8:	4393      	bics	r3, r2
 80016da:	0019      	movs	r1, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b7f      	ldr	r3, [pc, #508]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	d100      	bne.n	80016f2 <HAL_RCC_ClockConfig+0x8a>
 80016f0:	e089      	b.n	8001806 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016fa:	4b79      	ldr	r3, [pc, #484]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	2380      	movs	r3, #128	@ 0x80
 8001700:	029b      	lsls	r3, r3, #10
 8001702:	4013      	ands	r3, r2
 8001704:	d120      	bne.n	8001748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0e1      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001712:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	049b      	lsls	r3, r3, #18
 800171a:	4013      	ands	r3, r2
 800171c:	d114      	bne.n	8001748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0d5      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d106      	bne.n	8001738 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800172a:	4b6d      	ldr	r3, [pc, #436]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d109      	bne.n	8001748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0ca      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001738:	4b69      	ldr	r3, [pc, #420]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0c2      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001748:	4b65      	ldr	r3, [pc, #404]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2203      	movs	r2, #3
 800174e:	4393      	bics	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4b62      	ldr	r3, [pc, #392]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800175c:	f7ff f986 	bl	8000a6c <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d111      	bne.n	8001790 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800176c:	e009      	b.n	8001782 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176e:	f7ff f97d 	bl	8000a6c <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4a58      	ldr	r2, [pc, #352]	@ (80018dc <HAL_RCC_ClockConfig+0x274>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0a5      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001782:	4b57      	ldr	r3, [pc, #348]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	220c      	movs	r2, #12
 8001788:	4013      	ands	r3, r2
 800178a:	2b08      	cmp	r3, #8
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_ClockConfig+0x106>
 800178e:	e03a      	b.n	8001806 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d111      	bne.n	80017bc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001798:	e009      	b.n	80017ae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179a:	f7ff f967 	bl	8000a6c <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a4d      	ldr	r2, [pc, #308]	@ (80018dc <HAL_RCC_ClockConfig+0x274>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e08f      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ae:	4b4c      	ldr	r3, [pc, #304]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	220c      	movs	r2, #12
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d1ef      	bne.n	800179a <HAL_RCC_ClockConfig+0x132>
 80017ba:	e024      	b.n	8001806 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d11b      	bne.n	80017fc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c4:	e009      	b.n	80017da <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7ff f951 	bl	8000a6c <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a42      	ldr	r2, [pc, #264]	@ (80018dc <HAL_RCC_ClockConfig+0x274>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e079      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	220c      	movs	r2, #12
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d1ef      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x15e>
 80017e6:	e00e      	b.n	8001806 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e8:	f7ff f940 	bl	8000a6c <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4a3a      	ldr	r2, [pc, #232]	@ (80018dc <HAL_RCC_ClockConfig+0x274>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e068      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017fc:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	220c      	movs	r2, #12
 8001802:	4013      	ands	r3, r2
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001806:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	4013      	ands	r3, r2
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d21e      	bcs.n	8001852 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001814:	4b30      	ldr	r3, [pc, #192]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4393      	bics	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001826:	f7ff f921 	bl	8000a6c <HAL_GetTick>
 800182a:	0003      	movs	r3, r0
 800182c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	e009      	b.n	8001844 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff f91c 	bl	8000a6c <HAL_GetTick>
 8001834:	0002      	movs	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	4a28      	ldr	r2, [pc, #160]	@ (80018dc <HAL_RCC_ClockConfig+0x274>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e044      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001844:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_ClockConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	4013      	ands	r3, r2
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d1ee      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2204      	movs	r2, #4
 8001858:	4013      	ands	r3, r2
 800185a:	d009      	beq.n	8001870 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800185c:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4a20      	ldr	r2, [pc, #128]	@ (80018e4 <HAL_RCC_ClockConfig+0x27c>)
 8001862:	4013      	ands	r3, r2
 8001864:	0019      	movs	r1, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800186c:	430a      	orrs	r2, r1
 800186e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2208      	movs	r2, #8
 8001876:	4013      	ands	r3, r2
 8001878:	d00a      	beq.n	8001890 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <HAL_RCC_ClockConfig+0x280>)
 8001880:	4013      	ands	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	00da      	lsls	r2, r3, #3
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 800188c:	430a      	orrs	r2, r1
 800188e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001890:	f000 f832 	bl	80018f8 <HAL_RCC_GetSysClockFreq>
 8001894:	0001      	movs	r1, r0
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x278>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	220f      	movs	r2, #15
 800189e:	4013      	ands	r3, r2
 80018a0:	4a12      	ldr	r2, [pc, #72]	@ (80018ec <HAL_RCC_ClockConfig+0x284>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	000a      	movs	r2, r1
 80018a6:	40da      	lsrs	r2, r3
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_RCC_ClockConfig+0x288>)
 80018aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ac:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_RCC_ClockConfig+0x28c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	250b      	movs	r5, #11
 80018b2:	197c      	adds	r4, r7, r5
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff f893 	bl	80009e0 <HAL_InitTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80018c6:	197b      	adds	r3, r7, r5
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	e000      	b.n	80018ce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bdb0      	pop	{r4, r5, r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	40022000 	.word	0x40022000
 80018dc:	00001388 	.word	0x00001388
 80018e0:	40021000 	.word	0x40021000
 80018e4:	fffff8ff 	.word	0xfffff8ff
 80018e8:	ffffc7ff 	.word	0xffffc7ff
 80018ec:	08001ff8 	.word	0x08001ff8
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018fe:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	220c      	movs	r2, #12
 8001908:	4013      	ands	r3, r2
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d013      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3e>
 800190e:	d85c      	bhi.n	80019ca <HAL_RCC_GetSysClockFreq+0xd2>
 8001910:	2b04      	cmp	r3, #4
 8001912:	d002      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x22>
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00b      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x38>
 8001918:	e057      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800191a:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2210      	movs	r2, #16
 8001920:	4013      	ands	r3, r2
 8001922:	d002      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001924:	4b33      	ldr	r3, [pc, #204]	@ (80019f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001926:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001928:	e05d      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800192a:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <HAL_RCC_GetSysClockFreq+0x100>)
 800192c:	613b      	str	r3, [r7, #16]
      break;
 800192e:	e05a      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001930:	4b32      	ldr	r3, [pc, #200]	@ (80019fc <HAL_RCC_GetSysClockFreq+0x104>)
 8001932:	613b      	str	r3, [r7, #16]
      break;
 8001934:	e057      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	220f      	movs	r2, #15
 800193c:	4013      	ands	r3, r2
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001940:	5cd3      	ldrb	r3, [r2, r3]
 8001942:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	0d9b      	lsrs	r3, r3, #22
 8001948:	2203      	movs	r2, #3
 800194a:	4013      	ands	r3, r2
 800194c:	3301      	adds	r3, #1
 800194e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001950:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	2380      	movs	r3, #128	@ 0x80
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	4013      	ands	r3, r2
 800195a:	d00f      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	000a      	movs	r2, r1
 8001960:	0152      	lsls	r2, r2, #5
 8001962:	1a52      	subs	r2, r2, r1
 8001964:	0193      	lsls	r3, r2, #6
 8001966:	1a9b      	subs	r3, r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	185b      	adds	r3, r3, r1
 800196c:	025b      	lsls	r3, r3, #9
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f7fe fbc9 	bl	8000108 <__udivsi3>
 8001976:	0003      	movs	r3, r0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e023      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800197c:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2210      	movs	r2, #16
 8001982:	4013      	ands	r3, r2
 8001984:	d00f      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	000a      	movs	r2, r1
 800198a:	0152      	lsls	r2, r2, #5
 800198c:	1a52      	subs	r2, r2, r1
 800198e:	0193      	lsls	r3, r2, #6
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	185b      	adds	r3, r3, r1
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	0018      	movs	r0, r3
 800199c:	f7fe fbb4 	bl	8000108 <__udivsi3>
 80019a0:	0003      	movs	r3, r0
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	e00e      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80019a6:	68b9      	ldr	r1, [r7, #8]
 80019a8:	000a      	movs	r2, r1
 80019aa:	0152      	lsls	r2, r2, #5
 80019ac:	1a52      	subs	r2, r2, r1
 80019ae:	0193      	lsls	r3, r2, #6
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	185b      	adds	r3, r3, r1
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7fe fba4 	bl	8000108 <__udivsi3>
 80019c0:	0003      	movs	r3, r0
 80019c2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	613b      	str	r3, [r7, #16]
      break;
 80019c8:	e00d      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019ca:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	0b5b      	lsrs	r3, r3, #13
 80019d0:	2207      	movs	r2, #7
 80019d2:	4013      	ands	r3, r2
 80019d4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	3301      	adds	r3, #1
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	0212      	lsls	r2, r2, #8
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
      break;
 80019e4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019e6:	693b      	ldr	r3, [r7, #16]
}
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b006      	add	sp, #24
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	003d0900 	.word	0x003d0900
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	007a1200 	.word	0x007a1200
 8001a00:	08002008 	.word	0x08002008

08001a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07b      	b.n	8001b0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	2382      	movs	r3, #130	@ 0x82
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d009      	beq.n	8001a3e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	61da      	str	r2, [r3, #28]
 8001a30:	e005      	b.n	8001a3e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2251      	movs	r2, #81	@ 0x51
 8001a48:	5c9b      	ldrb	r3, [r3, r2]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d107      	bne.n	8001a60 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2250      	movs	r2, #80	@ 0x50
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7fe fefc 	bl	8000858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2251      	movs	r2, #81	@ 0x51
 8001a64:	2102      	movs	r1, #2
 8001a66:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2140      	movs	r1, #64	@ 0x40
 8001a74:	438a      	bics	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	2382      	movs	r3, #130	@ 0x82
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	2384      	movs	r3, #132	@ 0x84
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68d9      	ldr	r1, [r3, #12]
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	400b      	ands	r3, r1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	400b      	ands	r3, r1
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6999      	ldr	r1, [r3, #24]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	2138      	movs	r1, #56	@ 0x38
 8001ac0:	400b      	ands	r3, r1
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	400b      	ands	r3, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	0011      	movs	r1, r2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	019b      	lsls	r3, r3, #6
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	0c1b      	lsrs	r3, r3, #16
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4013      	ands	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af2:	2210      	movs	r2, #16
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2251      	movs	r2, #81	@ 0x51
 8001b08:	2101      	movs	r1, #1
 8001b0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b002      	add	sp, #8
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b088      	sub	sp, #32
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	1dbb      	adds	r3, r7, #6
 8001b24:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b26:	f7fe ffa1 	bl	8000a6c <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001b2e:	231a      	movs	r3, #26
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	1dba      	adds	r2, r7, #6
 8001b34:	8812      	ldrh	r2, [r2, #0]
 8001b36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2251      	movs	r2, #81	@ 0x51
 8001b3c:	5c9b      	ldrb	r3, [r3, r2]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d001      	beq.n	8001b48 <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e132      	b.n	8001dae <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_SPI_Transmit+0x40>
 8001b4e:	1dbb      	adds	r3, r7, #6
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e129      	b.n	8001dae <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2250      	movs	r2, #80	@ 0x50
 8001b5e:	5c9b      	ldrb	r3, [r3, r2]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_SPI_Transmit+0x52>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e122      	b.n	8001dae <HAL_SPI_Transmit+0x298>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2250      	movs	r2, #80	@ 0x50
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2251      	movs	r2, #81	@ 0x51
 8001b74:	2103      	movs	r1, #3
 8001b76:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1dba      	adds	r2, r7, #6
 8001b88:	8812      	ldrh	r2, [r2, #0]
 8001b8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1dba      	adds	r2, r7, #6
 8001b90:	8812      	ldrh	r2, [r2, #0]
 8001b92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d110      	bne.n	8001be0 <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2140      	movs	r1, #64	@ 0x40
 8001bca:	438a      	bics	r2, r1
 8001bcc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2180      	movs	r1, #128	@ 0x80
 8001bda:	01c9      	lsls	r1, r1, #7
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b40      	cmp	r3, #64	@ 0x40
 8001bec:	d007      	beq.n	8001bfe <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2140      	movs	r1, #64	@ 0x40
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d153      	bne.n	8001cb2 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_SPI_Transmit+0x106>
 8001c12:	231a      	movs	r3, #26
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d144      	bne.n	8001ca6 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	1c9a      	adds	r2, r3, #2
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c40:	e031      	b.n	8001ca6 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d112      	bne.n	8001c76 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	881a      	ldrh	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	1c9a      	adds	r2, r3, #2
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c74:	e017      	b.n	8001ca6 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c76:	f7fe fef9 	bl	8000a6c <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d802      	bhi.n	8001c8c <HAL_SPI_Transmit+0x176>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	d102      	bne.n	8001c92 <HAL_SPI_Transmit+0x17c>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d109      	bne.n	8001ca6 <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2251      	movs	r2, #81	@ 0x51
 8001c96:	2101      	movs	r1, #1
 8001c98:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2250      	movs	r2, #80	@ 0x50
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e083      	b.n	8001dae <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1c8      	bne.n	8001c42 <HAL_SPI_Transmit+0x12c>
 8001cb0:	e054      	b.n	8001d5c <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_SPI_Transmit+0x1ae>
 8001cba:	231a      	movs	r3, #26
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d146      	bne.n	8001d52 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cea:	e032      	b.n	8001d52 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d113      	bne.n	8001d22 <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	330c      	adds	r3, #12
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d20:	e017      	b.n	8001d52 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d22:	f7fe fea3 	bl	8000a6c <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d802      	bhi.n	8001d38 <HAL_SPI_Transmit+0x222>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	d102      	bne.n	8001d3e <HAL_SPI_Transmit+0x228>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2251      	movs	r2, #81	@ 0x51
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2250      	movs	r2, #80	@ 0x50
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e02d      	b.n	8001dae <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1c7      	bne.n	8001cec <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f8b6 	bl	8001ed4 <SPI_EndRxTxTransaction>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2251      	movs	r2, #81	@ 0x51
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2250      	movs	r2, #80	@ 0x50
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
  }
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b008      	add	sp, #32
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001dc8:	f7fe fe50 	bl	8000a6c <HAL_GetTick>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	18d3      	adds	r3, r2, r3
 8001dd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001dd8:	f7fe fe48 	bl	8000a6c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001de0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	0d1b      	lsrs	r3, r3, #20
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	4353      	muls	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dee:	e059      	b.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	d056      	beq.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001df6:	f7fe fe39 	bl	8000a6c <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d902      	bls.n	8001e0c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d142      	bne.n	8001e92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	21e0      	movs	r1, #224	@ 0xe0
 8001e18:	438a      	bics	r2, r1
 8001e1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	2382      	movs	r3, #130	@ 0x82
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d113      	bne.n	8001e50 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d005      	beq.n	8001e40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d107      	bne.n	8001e50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2140      	movs	r1, #64	@ 0x40
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	019b      	lsls	r3, r3, #6
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d110      	bne.n	8001e7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	491a      	ldr	r1, [pc, #104]	@ (8001ed0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001e68:	400a      	ands	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	0189      	lsls	r1, r1, #6
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2251      	movs	r2, #81	@ 0x51
 8001e82:	2101      	movs	r1, #1
 8001e84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2250      	movs	r2, #80	@ 0x50
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e018      	b.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	e002      	b.n	8001ea4 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	4013      	ands	r3, r2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	425a      	negs	r2, r3
 8001eb4:	4153      	adcs	r3, r2
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	001a      	movs	r2, r3
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d196      	bne.n	8001df0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b008      	add	sp, #32
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	ffffdfff 	.word	0xffffdfff

08001ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	0013      	movs	r3, r2
 8001eea:	2201      	movs	r2, #1
 8001eec:	2102      	movs	r1, #2
 8001eee:	f7ff ff63 	bl	8001db8 <SPI_WaitFlagStateUntilTimeout>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d007      	beq.n	8001f06 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efa:	2220      	movs	r2, #32
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e037      	b.n	8001f76 <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <SPI_EndRxTxTransaction+0xac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	491e      	ldr	r1, [pc, #120]	@ (8001f84 <SPI_EndRxTxTransaction+0xb0>)
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe f8fb 	bl	8000108 <__udivsi3>
 8001f12:	0003      	movs	r3, r0
 8001f14:	001a      	movs	r2, r3
 8001f16:	0013      	movs	r3, r2
 8001f18:	015b      	lsls	r3, r3, #5
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	189b      	adds	r3, r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	2382      	movs	r3, #130	@ 0x82
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d112      	bne.n	8001f56 <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	0013      	movs	r3, r2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	f7ff ff3b 	bl	8001db8 <SPI_WaitFlagStateUntilTimeout>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d016      	beq.n	8001f74 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e00f      	b.n	8001f76 <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2280      	movs	r2, #128	@ 0x80
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b80      	cmp	r3, #128	@ 0x80
 8001f6e:	d0f2      	beq.n	8001f56 <SPI_EndRxTxTransaction+0x82>
 8001f70:	e000      	b.n	8001f74 <SPI_EndRxTxTransaction+0xa0>
        break;
 8001f72:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b006      	add	sp, #24
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	20000000 	.word	0x20000000
 8001f84:	016e3600 	.word	0x016e3600

08001f88 <memset>:
 8001f88:	0003      	movs	r3, r0
 8001f8a:	1882      	adds	r2, r0, r2
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <memset+0xa>
 8001f90:	4770      	bx	lr
 8001f92:	7019      	strb	r1, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	e7f9      	b.n	8001f8c <memset+0x4>

08001f98 <__libc_init_array>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	2600      	movs	r6, #0
 8001f9c:	4c0c      	ldr	r4, [pc, #48]	@ (8001fd0 <__libc_init_array+0x38>)
 8001f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8001fd4 <__libc_init_array+0x3c>)
 8001fa0:	1b64      	subs	r4, r4, r5
 8001fa2:	10a4      	asrs	r4, r4, #2
 8001fa4:	42a6      	cmp	r6, r4
 8001fa6:	d109      	bne.n	8001fbc <__libc_init_array+0x24>
 8001fa8:	2600      	movs	r6, #0
 8001faa:	f000 f819 	bl	8001fe0 <_init>
 8001fae:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd8 <__libc_init_array+0x40>)
 8001fb0:	4d0a      	ldr	r5, [pc, #40]	@ (8001fdc <__libc_init_array+0x44>)
 8001fb2:	1b64      	subs	r4, r4, r5
 8001fb4:	10a4      	asrs	r4, r4, #2
 8001fb6:	42a6      	cmp	r6, r4
 8001fb8:	d105      	bne.n	8001fc6 <__libc_init_array+0x2e>
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
 8001fbc:	00b3      	lsls	r3, r6, #2
 8001fbe:	58eb      	ldr	r3, [r5, r3]
 8001fc0:	4798      	blx	r3
 8001fc2:	3601      	adds	r6, #1
 8001fc4:	e7ee      	b.n	8001fa4 <__libc_init_array+0xc>
 8001fc6:	00b3      	lsls	r3, r6, #2
 8001fc8:	58eb      	ldr	r3, [r5, r3]
 8001fca:	4798      	blx	r3
 8001fcc:	3601      	adds	r6, #1
 8001fce:	e7f2      	b.n	8001fb6 <__libc_init_array+0x1e>
 8001fd0:	08002014 	.word	0x08002014
 8001fd4:	08002014 	.word	0x08002014
 8001fd8:	08002018 	.word	0x08002018
 8001fdc:	08002014 	.word	0x08002014

08001fe0 <_init>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr

08001fec <_fini>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr
